
EFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08005b88  08005b88  00015b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cec  08005cec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005cec  08005cec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cec  08005cec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cec  08005cec  00015cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000005c  08005d50  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005d50  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001361e  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279a  00000000  00000000  000336e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00035e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d08  00000000  00000000  00036f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161ca  00000000  00000000  00037c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142bb  00000000  00000000  0004ddf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008db60  00000000  00000000  000620ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004120  00000000  00000000  000efc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f3d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b70 	.word	0x08005b70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005b70 	.word	0x08005b70

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <app_main>:
void batteryled(void);						// Function prototype for activating battery LED
void console(char *log);              		// Function prototype for transmitting messages via UART

// Main application function
int app_main()
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	// Initialize message buffer with default message
	strcpy(message, "EFloodGuard\r\n");
 800024a:	4b5a      	ldr	r3, [pc, #360]	; (80003b4 <app_main+0x170>)
 800024c:	4a5a      	ldr	r2, [pc, #360]	; (80003b8 <app_main+0x174>)
 800024e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000250:	c313      	stmia	r3!, {r0, r1, r4}
 8000252:	8812      	ldrh	r2, [r2, #0]
 8000254:	801a      	strh	r2, [r3, #0]
	// Send initialization message
	console(message);
 8000256:	4b57      	ldr	r3, [pc, #348]	; (80003b4 <app_main+0x170>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 fae7 	bl	800082c <console>

	// Check if the flood flag is set
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 800025e:	4b57      	ldr	r3, [pc, #348]	; (80003bc <app_main+0x178>)
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	0018      	movs	r0, r3
 8000264:	f002 fac8 	bl	80027f8 <HAL_GPIO_ReadPin>
 8000268:	0003      	movs	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <app_main+0x3c>
	{
		floodFlag = 0;
 800026e:	4b54      	ldr	r3, [pc, #336]	; (80003c0 <app_main+0x17c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000274:	2064      	movs	r0, #100	; 0x64
 8000276:	f001 f913 	bl	80014a0 <HAL_Delay>
		openValve();
 800027a:	f000 f931 	bl	80004e0 <openValve>
 800027e:	e007      	b.n	8000290 <app_main+0x4c>
	}
	else
	{
		floodFlag = 1;
 8000280:	4b4f      	ldr	r3, [pc, #316]	; (80003c0 <app_main+0x17c>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f001 f90a 	bl	80014a0 <HAL_Delay>
		closeValve();
 800028c:	f000 f972 	bl	8000574 <closeValve>
	}
	HAL_Delay(500);
 8000290:	23fa      	movs	r3, #250	; 0xfa
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	0018      	movs	r0, r3
 8000296:	f001 f903 	bl	80014a0 <HAL_Delay>
	alert();
 800029a:	f000 fa9f 	bl	80007dc <alert>
	// Main loop
	while(1)
	{
		// Get current time
		uint32_t now;
		now = HAL_GetTick();
 800029e:	f001 f8f5 	bl	800148c <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	607b      	str	r3, [r7, #4]
		// Test Mode activated by long pressing the button
		if(pressDuration >= 2000 && !floodFlag)
 80002a6:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <app_main+0x180>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	23fa      	movs	r3, #250	; 0xfa
 80002ac:	00db      	lsls	r3, r3, #3
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d317      	bcc.n	80002e2 <app_main+0x9e>
 80002b2:	4b43      	ldr	r3, [pc, #268]	; (80003c0 <app_main+0x17c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d112      	bne.n	80002e2 <app_main+0x9e>
		{
			statusled();
 80002bc:	f000 fa46 	bl	800074c <statusled>
			closeValve();
 80002c0:	f000 f958 	bl	8000574 <closeValve>
			alert();
 80002c4:	f000 fa8a 	bl	80007dc <alert>
			HAL_Delay(500);
 80002c8:	23fa      	movs	r3, #250	; 0xfa
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f8e7 	bl	80014a0 <HAL_Delay>
			statusled();
 80002d2:	f000 fa3b 	bl	800074c <statusled>
			openValve();
 80002d6:	f000 f903 	bl	80004e0 <openValve>
			pressDuration = 0;
 80002da:	4b3a      	ldr	r3, [pc, #232]	; (80003c4 <app_main+0x180>)
 80002dc:	2200      	movs	r2, #0
 80002de:	601a      	str	r2, [r3, #0]
 80002e0:	e00e      	b.n	8000300 <app_main+0xbc>
		}
		// Servicing the short button press during a flood event
		else if(pressDuration <= 500 && pressDuration >= 50)
 80002e2:	4b38      	ldr	r3, [pc, #224]	; (80003c4 <app_main+0x180>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	23fa      	movs	r3, #250	; 0xfa
 80002e8:	005b      	lsls	r3, r3, #1
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d808      	bhi.n	8000300 <app_main+0xbc>
 80002ee:	4b35      	ldr	r3, [pc, #212]	; (80003c4 <app_main+0x180>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	2b31      	cmp	r3, #49	; 0x31
 80002f4:	d904      	bls.n	8000300 <app_main+0xbc>
		{
			resetFloodEvent();
 80002f6:	f000 f987 	bl	8000608 <resetFloodEvent>
			pressDuration = 0;
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <app_main+0x180>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
		}
		// Close the valve if the flood flag is set
		if (floodFlag)
 8000300:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <app_main+0x17c>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	b2db      	uxtb	r3, r3
 8000306:	2b00      	cmp	r3, #0
 8000308:	d026      	beq.n	8000358 <app_main+0x114>
		{
			if(now - alert_time > 5000)
 800030a:	4b2f      	ldr	r3, [pc, #188]	; (80003c8 <app_main+0x184>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	1ad3      	subs	r3, r2, r3
 8000312:	4a2e      	ldr	r2, [pc, #184]	; (80003cc <app_main+0x188>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d90c      	bls.n	8000332 <app_main+0xee>
			{
				strcpy(message, "Flood\r\n");
 8000318:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <app_main+0x170>)
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <app_main+0x18c>)
 800031c:	ca03      	ldmia	r2!, {r0, r1}
 800031e:	c303      	stmia	r3!, {r0, r1}
				console(message);
 8000320:	4b24      	ldr	r3, [pc, #144]	; (80003b4 <app_main+0x170>)
 8000322:	0018      	movs	r0, r3
 8000324:	f000 fa82 	bl	800082c <console>
				alert();
 8000328:	f000 fa58 	bl	80007dc <alert>
				alert_time = now;
 800032c:	4b26      	ldr	r3, [pc, #152]	; (80003c8 <app_main+0x184>)
 800032e:	687a      	ldr	r2, [r7, #4]
 8000330:	601a      	str	r2, [r3, #0]
			}
			if(valve_open == 1)
 8000332:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <app_main+0x190>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	b2db      	uxtb	r3, r3
 8000338:	2b01      	cmp	r3, #1
 800033a:	d10d      	bne.n	8000358 <app_main+0x114>
			{
				closeValve();
 800033c:	f000 f91a 	bl	8000574 <closeValve>
				strcpy(message, "valve closed\r\n");
 8000340:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <app_main+0x170>)
 8000342:	4a25      	ldr	r2, [pc, #148]	; (80003d8 <app_main+0x194>)
 8000344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000346:	c313      	stmia	r3!, {r0, r1, r4}
 8000348:	8811      	ldrh	r1, [r2, #0]
 800034a:	8019      	strh	r1, [r3, #0]
 800034c:	7892      	ldrb	r2, [r2, #2]
 800034e:	709a      	strb	r2, [r3, #2]
				console(message);
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <app_main+0x170>)
 8000352:	0018      	movs	r0, r3
 8000354:	f000 fa6a 	bl	800082c <console>
			}
		}

		if(wupFlag == 1)
 8000358:	4b20      	ldr	r3, [pc, #128]	; (80003dc <app_main+0x198>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d106      	bne.n	800036e <app_main+0x12a>
		{
			wupFlag = 0;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <app_main+0x198>)
 8000362:	2200      	movs	r2, #0
 8000364:	701a      	strb	r2, [r3, #0]
			statusled();
 8000366:	f000 f9f1 	bl	800074c <statusled>
			monitorBattery();
 800036a:	f000 f9cb 	bl	8000704 <monitorBattery>
		}
		if(now - sleep_time >= 5000 && !floodFlag)
 800036e:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <app_main+0x19c>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	1ad3      	subs	r3, r2, r3
 8000376:	4a1b      	ldr	r2, [pc, #108]	; (80003e4 <app_main+0x1a0>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d990      	bls.n	800029e <app_main+0x5a>
 800037c:	4b10      	ldr	r3, [pc, #64]	; (80003c0 <app_main+0x17c>)
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b00      	cmp	r3, #0
 8000384:	d18b      	bne.n	800029e <app_main+0x5a>
		{
			strcpy(message, "Entering Sleep\r\n");
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <app_main+0x170>)
 8000388:	4a17      	ldr	r2, [pc, #92]	; (80003e8 <app_main+0x1a4>)
 800038a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800038c:	c313      	stmia	r3!, {r0, r1, r4}
 800038e:	6811      	ldr	r1, [r2, #0]
 8000390:	6019      	str	r1, [r3, #0]
 8000392:	7912      	ldrb	r2, [r2, #4]
 8000394:	711a      	strb	r2, [r3, #4]
			console(message);
 8000396:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <app_main+0x170>)
 8000398:	0018      	movs	r0, r3
 800039a:	f000 fa47 	bl	800082c <console>
			wupFlag = 0;
 800039e:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <app_main+0x198>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
			HAL_SuspendTick();
 80003a4:	f001 f8a0 	bl	80014e8 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);    	// Enable Stop mode
 80003a8:	2101      	movs	r1, #1
 80003aa:	2000      	movs	r0, #0
 80003ac:	f002 fa88 	bl	80028c0 <HAL_PWR_EnterSTOPMode>
	{
 80003b0:	e775      	b.n	800029e <app_main+0x5a>
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	20000078 	.word	0x20000078
 80003b8:	08005b88 	.word	0x08005b88
 80003bc:	50000400 	.word	0x50000400
 80003c0:	200000a3 	.word	0x200000a3
 80003c4:	200000b0 	.word	0x200000b0
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	00001388 	.word	0x00001388
 80003d0:	08005b98 	.word	0x08005b98
 80003d4:	200000a2 	.word	0x200000a2
 80003d8:	08005ba0 	.word	0x08005ba0
 80003dc:	200000a0 	.word	0x200000a0
 80003e0:	200000b4 	.word	0x200000b4
 80003e4:	00001387 	.word	0x00001387
 80003e8:	08005bb0 	.word	0x08005bb0

080003ec <HAL_GPIO_EXTI_Rising_Callback>:
	return 0;
}

// Callback function for rising edge interrupt on GPIO EXTI line
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	0002      	movs	r2, r0
 80003f4:	1dbb      	adds	r3, r7, #6
 80003f6:	801a      	strh	r2, [r3, #0]
	HAL_ResumeTick();
 80003f8:	f001 f884 	bl	8001504 <HAL_ResumeTick>
	sleep_time = HAL_GetTick();         // Update sleep time
 80003fc:	f001 f846 	bl	800148c <HAL_GetTick>
 8000400:	0002      	movs	r2, r0
 8000402:	4b10      	ldr	r3, [pc, #64]	; (8000444 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 8000404:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_15)
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	881a      	ldrh	r2, [r3, #0]
 800040a:	2380      	movs	r3, #128	; 0x80
 800040c:	021b      	lsls	r3, r3, #8
 800040e:	429a      	cmp	r2, r3
 8000410:	d113      	bne.n	800043a <HAL_GPIO_EXTI_Rising_Callback+0x4e>
	{
		if (buttonState == 1)
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	2b01      	cmp	r3, #1
 800041a:	d10b      	bne.n	8000434 <HAL_GPIO_EXTI_Rising_Callback+0x48>
		{
			releaseTime = HAL_GetTick();
 800041c:	f001 f836 	bl	800148c <HAL_GetTick>
 8000420:	0002      	movs	r2, r0
 8000422:	4b0a      	ldr	r3, [pc, #40]	; (800044c <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8000424:	601a      	str	r2, [r3, #0]
			pressDuration = releaseTime - holdTime;
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_GPIO_EXTI_Rising_Callback+0x64>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	1ad2      	subs	r2, r2, r3
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <HAL_GPIO_EXTI_Rising_Callback+0x68>)
 8000432:	601a      	str	r2, [r3, #0]
		}
		buttonState = 0;
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
	}
}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	46bd      	mov	sp, r7
 800043e:	b002      	add	sp, #8
 8000440:	bd80      	pop	{r7, pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	200000b4 	.word	0x200000b4
 8000448:	200000a4 	.word	0x200000a4
 800044c:	200000ac 	.word	0x200000ac
 8000450:	200000a8 	.word	0x200000a8
 8000454:	200000b0 	.word	0x200000b0

08000458 <HAL_GPIO_EXTI_Falling_Callback>:

// Callback function for falling edge interrupt on GPIO EXTI line
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	0002      	movs	r2, r0
 8000460:	1dbb      	adds	r3, r7, #6
 8000462:	801a      	strh	r2, [r3, #0]
	HAL_ResumeTick();
 8000464:	f001 f84e 	bl	8001504 <HAL_ResumeTick>
	sleep_time = HAL_GetTick();         // Update sleep time
 8000468:	f001 f810 	bl	800148c <HAL_GetTick>
 800046c:	0002      	movs	r2, r0
 800046e:	4b0d      	ldr	r3, [pc, #52]	; (80004a4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000470:	601a      	str	r2, [r3, #0]

	// Handle button press
	if(GPIO_Pin == GPIO_PIN_15)
 8000472:	1dbb      	adds	r3, r7, #6
 8000474:	881a      	ldrh	r2, [r3, #0]
 8000476:	2380      	movs	r3, #128	; 0x80
 8000478:	021b      	lsls	r3, r3, #8
 800047a:	429a      	cmp	r2, r3
 800047c:	d107      	bne.n	800048e <HAL_GPIO_EXTI_Falling_Callback+0x36>
	{
		buttonState = 1;
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
		holdTime = HAL_GetTick(); 		// Record button hold time
 8000484:	f001 f802 	bl	800148c <HAL_GetTick>
 8000488:	0002      	movs	r2, r0
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 800048c:	601a      	str	r2, [r3, #0]
	}
	// Handle flood flag
	if(GPIO_Pin == GPIO_PIN_6)
 800048e:	1dbb      	adds	r3, r7, #6
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	2b40      	cmp	r3, #64	; 0x40
 8000494:	d102      	bne.n	800049c <HAL_GPIO_EXTI_Falling_Callback+0x44>
	{
		floodFlag = 1; // Set flood flag
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000498:	2201      	movs	r2, #1
 800049a:	701a      	strb	r2, [r3, #0]
	}
}
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	200000b4 	.word	0x200000b4
 80004a8:	200000a4 	.word	0x200000a4
 80004ac:	200000a8 	.word	0x200000a8
 80004b0:	200000a3 	.word	0x200000a3

080004b4 <HAL_RTC_AlarmAEventCallback>:

// Callback function for TIM16 period elapsed interrupt
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 80004bc:	f001 f822 	bl	8001504 <HAL_ResumeTick>
	sleep_time = HAL_GetTick();         // Update sleep time
 80004c0:	f000 ffe4 	bl	800148c <HAL_GetTick>
 80004c4:	0002      	movs	r2, r0
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <HAL_RTC_AlarmAEventCallback+0x24>)
 80004c8:	601a      	str	r2, [r3, #0]
	wupFlag = 1;
 80004ca:	4b04      	ldr	r3, [pc, #16]	; (80004dc <HAL_RTC_AlarmAEventCallback+0x28>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	701a      	strb	r2, [r3, #0]
}
 80004d0:	46c0      	nop			; (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	200000b4 	.word	0x200000b4
 80004dc:	200000a0 	.word	0x200000a0

080004e0 <openValve>:
// Function to open the valve
void openValve()
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 80004e6:	2380      	movs	r3, #128	; 0x80
 80004e8:	0099      	lsls	r1, r3, #2
 80004ea:	23a0      	movs	r3, #160	; 0xa0
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2201      	movs	r2, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f002 f99e 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <openValve+0x8c>)
 80004f8:	2100      	movs	r1, #0
 80004fa:	0018      	movs	r0, r3
 80004fc:	f003 fabe 	bl	8003a7c <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 8000500:	2032      	movs	r0, #50	; 0x32
 8000502:	f000 ffcd 	bl	80014a0 <HAL_Delay>
	for(uint16_t i = 1800; i >= 900; i-=50)
 8000506:	1dbb      	adds	r3, r7, #6
 8000508:	22e1      	movs	r2, #225	; 0xe1
 800050a:	00d2      	lsls	r2, r2, #3
 800050c:	801a      	strh	r2, [r3, #0]
 800050e:	e00c      	b.n	800052a <openValve+0x4a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);   	// Set PWM duty cycle for valve opening
 8000510:	4b16      	ldr	r3, [pc, #88]	; (800056c <openValve+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	1dba      	adds	r2, r7, #6
 8000516:	8812      	ldrh	r2, [r2, #0]
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(30);
 800051a:	201e      	movs	r0, #30
 800051c:	f000 ffc0 	bl	80014a0 <HAL_Delay>
	for(uint16_t i = 1800; i >= 900; i-=50)
 8000520:	1dbb      	adds	r3, r7, #6
 8000522:	1dba      	adds	r2, r7, #6
 8000524:	8812      	ldrh	r2, [r2, #0]
 8000526:	3a32      	subs	r2, #50	; 0x32
 8000528:	801a      	strh	r2, [r3, #0]
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	881a      	ldrh	r2, [r3, #0]
 800052e:	23e1      	movs	r3, #225	; 0xe1
 8000530:	009b      	lsls	r3, r3, #2
 8000532:	429a      	cmp	r2, r3
 8000534:	d2ec      	bcs.n	8000510 <openValve+0x30>
	}

	HAL_Delay(50);
 8000536:	2032      	movs	r0, #50	; 0x32
 8000538:	f000 ffb2 	bl	80014a0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 800053c:	4b0b      	ldr	r3, [pc, #44]	; (800056c <openValve+0x8c>)
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f003 fb73 	bl	8003c2c <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 8000546:	2032      	movs	r0, #50	; 0x32
 8000548:	f000 ffaa 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	0099      	lsls	r1, r3, #2
 8000550:	23a0      	movs	r3, #160	; 0xa0
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	2200      	movs	r2, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f002 f96b 	bl	8002832 <HAL_GPIO_WritePin>
	valve_open = 1;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <openValve+0x90>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	20000148 	.word	0x20000148
 8000570:	200000a2 	.word	0x200000a2

08000574 <closeValve>:

// Function to close the valve
void closeValve()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 800057a:	2380      	movs	r3, #128	; 0x80
 800057c:	0099      	lsls	r1, r3, #2
 800057e:	23a0      	movs	r3, #160	; 0xa0
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	2201      	movs	r2, #1
 8000584:	0018      	movs	r0, r3
 8000586:	f002 f954 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <closeValve+0x8c>)
 800058c:	2100      	movs	r1, #0
 800058e:	0018      	movs	r0, r3
 8000590:	f003 fa74 	bl	8003a7c <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 8000594:	2032      	movs	r0, #50	; 0x32
 8000596:	f000 ff83 	bl	80014a0 <HAL_Delay>
	for(uint16_t i = 900; i <= 1800; i+=50)
 800059a:	1dbb      	adds	r3, r7, #6
 800059c:	22e1      	movs	r2, #225	; 0xe1
 800059e:	0092      	lsls	r2, r2, #2
 80005a0:	801a      	strh	r2, [r3, #0]
 80005a2:	e00c      	b.n	80005be <closeValve+0x4a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);   	// Set PWM duty cycle for valve Closing
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <closeValve+0x8c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	1dba      	adds	r2, r7, #6
 80005aa:	8812      	ldrh	r2, [r2, #0]
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(30
 80005ae:	201e      	movs	r0, #30
 80005b0:	f000 ff76 	bl	80014a0 <HAL_Delay>
	for(uint16_t i = 900; i <= 1800; i+=50)
 80005b4:	1dbb      	adds	r3, r7, #6
 80005b6:	1dba      	adds	r2, r7, #6
 80005b8:	8812      	ldrh	r2, [r2, #0]
 80005ba:	3232      	adds	r2, #50	; 0x32
 80005bc:	801a      	strh	r2, [r3, #0]
 80005be:	1dbb      	adds	r3, r7, #6
 80005c0:	881a      	ldrh	r2, [r3, #0]
 80005c2:	23e1      	movs	r3, #225	; 0xe1
 80005c4:	00db      	lsls	r3, r3, #3
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d9ec      	bls.n	80005a4 <closeValve+0x30>

);
	}
	HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f000 ff68 	bl	80014a0 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <closeValve+0x8c>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	0018      	movs	r0, r3
 80005d6:	f003 fb29 	bl	8003c2c <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 80005da:	2032      	movs	r0, #50	; 0x32
 80005dc:	f000 ff60 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	0099      	lsls	r1, r3, #2
 80005e4:	23a0      	movs	r3, #160	; 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2200      	movs	r2, #0
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 f921 	bl	8002832 <HAL_GPIO_WritePin>
	valve_open = 0;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <closeValve+0x90>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	701a      	strb	r2, [r3, #0]
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b002      	add	sp, #8
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	20000148 	.word	0x20000148
 8000604:	200000a2 	.word	0x200000a2

08000608 <resetFloodEvent>:

// Function to reset flood event
void resetFloodEvent()
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	af00      	add	r7, sp, #0
	// Check if the button is pressed and the valve is open
	if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	021a      	lsls	r2, r3, #8
 8000610:	23a0      	movs	r3, #160	; 0xa0
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	0011      	movs	r1, r2
 8000616:	0018      	movs	r0, r3
 8000618:	f002 f8ee 	bl	80027f8 <HAL_GPIO_ReadPin>
 800061c:	0003      	movs	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d11b      	bne.n	800065a <resetFloodEvent+0x52>
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <resetFloodEvent+0x58>)
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	0018      	movs	r0, r3
 8000628:	f002 f8e6 	bl	80027f8 <HAL_GPIO_ReadPin>
 800062c:	0003      	movs	r3, r0
 800062e:	2b01      	cmp	r3, #1
 8000630:	d113      	bne.n	800065a <resetFloodEvent+0x52>
	{
		if(valve_open == 0)
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <resetFloodEvent+0x5c>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <resetFloodEvent+0x38>
		{
			openValve();            // Open the valve
 800063c:	f7ff ff50 	bl	80004e0 <openValve>
		}
		strcpy(message, "valve open\r\n");
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <resetFloodEvent+0x60>)
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <resetFloodEvent+0x64>)
 8000644:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000646:	c313      	stmia	r3!, {r0, r1, r4}
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	701a      	strb	r2, [r3, #0]
		console(message);
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <resetFloodEvent+0x60>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 f8ec 	bl	800082c <console>
		floodFlag = 0;          	// Clear the flood flag
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <resetFloodEvent+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
	}
}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	bdb0      	pop	{r4, r5, r7, pc}
 8000660:	50000400 	.word	0x50000400
 8000664:	200000a2 	.word	0x200000a2
 8000668:	20000078 	.word	0x20000078
 800066c:	08005bc4 	.word	0x08005bc4
 8000670:	200000a3 	.word	0x200000a3

08000674 <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);           	// Enable battery voltage measurement
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	481d      	ldr	r0, [pc, #116]	; (80006f4 <measureBattery+0x80>)
 8000680:	2201      	movs	r2, #1
 8000682:	0019      	movs	r1, r3
 8000684:	f002 f8d5 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);                                	// Start ADC conversion
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <measureBattery+0x84>)
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fa58 	bl	8001b40 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);              	// Wait for ADC conversion to complete
 8000690:	23fa      	movs	r3, #250	; 0xfa
 8000692:	009a      	lsls	r2, r3, #2
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <measureBattery+0x84>)
 8000696:	0011      	movs	r1, r2
 8000698:	0018      	movs	r0, r3
 800069a:	f001 fadb 	bl	8001c54 <HAL_ADC_PollForConversion>
	volatile uint16_t analogbatt = HAL_ADC_GetValue(&hadc1);       	// Read ADC value
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <measureBattery+0x84>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 fb65 	bl	8001d70 <HAL_ADC_GetValue>
 80006a6:	0003      	movs	r3, r0
 80006a8:	b29a      	uxth	r2, r3
 80006aa:	1dbb      	adds	r3, r7, #6
 80006ac:	801a      	strh	r2, [r3, #0]
	HAL_Delay(5);
 80006ae:	2005      	movs	r0, #5
 80006b0:	f000 fef6 	bl	80014a0 <HAL_Delay>
	HAL_ADC_Stop(&hadc1);                                 	// Stop ADC conversion
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <measureBattery+0x84>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fa90 	bl	8001bdc <HAL_ADC_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);         	// Disable battery voltage measurement
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	021b      	lsls	r3, r3, #8
 80006c0:	480c      	ldr	r0, [pc, #48]	; (80006f4 <measureBattery+0x80>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0019      	movs	r1, r3
 80006c6:	f002 f8b4 	bl	8002832 <HAL_GPIO_WritePin>

	// Check battery voltage threshold
	if(analogbatt < 2950)
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <measureBattery+0x88>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d803      	bhi.n	80006de <measureBattery+0x6a>
	{
		Low_battery = 1;			// Set low battery flag if voltage is below threshold
 80006d6:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <measureBattery+0x8c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	701a      	strb	r2, [r3, #0]
 80006dc:	e002      	b.n	80006e4 <measureBattery+0x70>
	}
	else
	{
		Low_battery = 0;			// Reset low battery flag if voltage is above threshold
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <measureBattery+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
	}
	return analogbatt;  // Return battery voltage reading
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	b29b      	uxth	r3, r3
}
 80006ea:	0018      	movs	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	50000400 	.word	0x50000400
 80006f8:	200000bc 	.word	0x200000bc
 80006fc:	00000b85 	.word	0x00000b85
 8000700:	200000a1 	.word	0x200000a1

08000704 <monitorBattery>:

// Function to monitor battery voltage
void monitorBattery(void)
{
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
	uint16_t vBatt = measureBattery();            			// Measure battery voltage
 800070a:	1dbc      	adds	r4, r7, #6
 800070c:	f7ff ffb2 	bl	8000674 <measureBattery>
 8000710:	0003      	movs	r3, r0
 8000712:	8023      	strh	r3, [r4, #0]
	if(Low_battery)
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <monitorBattery+0x3c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <monitorBattery+0x1c>
	{
		batteryled();
 800071c:	f000 f83a 	bl	8000794 <batteryled>
	}
	sprintf(message, "Battery Voltage: %d\r\n", vBatt); 	// Format battery voltage message
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	881a      	ldrh	r2, [r3, #0]
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <monitorBattery+0x40>)
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <monitorBattery+0x44>)
 8000728:	0018      	movs	r0, r3
 800072a:	f004 fd7b 	bl	8005224 <siprintf>
	console(message);                             			// Send battery voltage message via UART
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <monitorBattery+0x44>)
 8000730:	0018      	movs	r0, r3
 8000732:	f000 f87b 	bl	800082c <console>
}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b003      	add	sp, #12
 800073c:	bd90      	pop	{r4, r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200000a1 	.word	0x200000a1
 8000744:	08005bd4 	.word	0x08005bd4
 8000748:	20000078 	.word	0x20000078

0800074c <statusled>:

// Function to control status LED
void statusled(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <statusled+0x44>)
 8000752:	2201      	movs	r2, #1
 8000754:	2180      	movs	r1, #128	; 0x80
 8000756:	0018      	movs	r0, r3
 8000758:	f002 f86b 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	480b      	ldr	r0, [pc, #44]	; (8000790 <statusled+0x44>)
 8000762:	2201      	movs	r2, #1
 8000764:	0019      	movs	r1, r3
 8000766:	f002 f864 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f000 fe98 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000770:	4b07      	ldr	r3, [pc, #28]	; (8000790 <statusled+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0018      	movs	r0, r3
 8000778:	f002 f85b 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <statusled+0x44>)
 8000782:	2200      	movs	r2, #0
 8000784:	0019      	movs	r1, r3
 8000786:	f002 f854 	bl	8002832 <HAL_GPIO_WritePin>
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	50000400 	.word	0x50000400

08000794 <batteryled>:

// Function to activate battery LED
void batteryled(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate battery LED
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <batteryled+0x44>)
 800079a:	2201      	movs	r2, #1
 800079c:	2180      	movs	r1, #128	; 0x80
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 f847 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <batteryled+0x44>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	0019      	movs	r1, r3
 80007ae:	f002 f840 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_Delay(200);											// Delay for LED indication
 80007b2:	20c8      	movs	r0, #200	; 0xc8
 80007b4:	f000 fe74 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4806      	ldr	r0, [pc, #24]	; (80007d8 <batteryled+0x44>)
 80007be:	2200      	movs	r2, #0
 80007c0:	0019      	movs	r1, r3
 80007c2:	f002 f836 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Deactivate battery LED
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <batteryled+0x44>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	2180      	movs	r1, #128	; 0x80
 80007cc:	0018      	movs	r0, r3
 80007ce:	f002 f830 	bl	8002832 <HAL_GPIO_WritePin>
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	50000400 	.word	0x50000400

080007dc <alert>:

// Function to activate buzzer and warning LED
void alert(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);		// Activate buzzer
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <alert+0x4c>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	0019      	movs	r1, r3
 80007ea:	f002 f822 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);		// Activate warning LED
 80007ee:	2380      	movs	r3, #128	; 0x80
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <alert+0x4c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	0019      	movs	r1, r3
 80007f8:	f002 f81b 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_Delay(1000);										// Delay for alert indication
 80007fc:	23fa      	movs	r3, #250	; 0xfa
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fe4d 	bl	80014a0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	// Deactivate buzzer
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	4807      	ldr	r0, [pc, #28]	; (8000828 <alert+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	0019      	movs	r1, r3
 8000810:	f002 f80f 	bl	8002832 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	// Deactivate warning LED
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <alert+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	0019      	movs	r1, r3
 800081e:	f002 f808 	bl	8002832 <HAL_GPIO_WritePin>
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	50000400 	.word	0x50000400

0800082c <console>:

// Function to transmit messages via UART
void console(char *log)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);  // Transmit message via UART
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	0018      	movs	r0, r3
 8000838:	f7ff fc66 	bl	8000108 <strlen>
 800083c:	0003      	movs	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	2301      	movs	r3, #1
 8000842:	425b      	negs	r3, r3
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <console+0x44>)
 8000848:	f004 f89c 	bl	8004984 <HAL_UART_Transmit>
	HAL_Delay(10);
 800084c:	200a      	movs	r0, #10
 800084e:	f000 fe27 	bl	80014a0 <HAL_Delay>
	memset(log, '\0', strlen(log));  // Clear message buffer
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff fc57 	bl	8000108 <strlen>
 800085a:	0002      	movs	r2, r0
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f004 fcff 	bl	8005264 <memset>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000194 	.word	0x20000194

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fd95 	bl	80013a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f80d 	bl	800089a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f000 fa62 	bl	8000d48 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000884:	f000 f9ca 	bl	8000c1c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000888:	f000 f84e 	bl	8000928 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800088c:	f000 fa28 	bl	8000ce0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000890:	f000 f912 	bl	8000ab8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 8000894:	f7ff fcd6 	bl	8000244 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000898:	e7fe      	b.n	8000898 <main+0x24>

0800089a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089a:	b590      	push	{r4, r7, lr}
 800089c:	b08d      	sub	sp, #52	; 0x34
 800089e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	231c      	movs	r3, #28
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f004 fcda 	bl	8005264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	003b      	movs	r3, r7
 80008b2:	0018      	movs	r0, r3
 80008b4:	2314      	movs	r3, #20
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f004 fcd3 	bl	8005264 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	220a      	movs	r2, #10
 80008c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2280      	movs	r2, #128	; 0x80
 80008c8:	0052      	lsls	r2, r2, #1
 80008ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0152      	lsls	r2, r2, #5
 80008d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2240      	movs	r2, #64	; 0x40
 80008d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2201      	movs	r2, #1
 80008de:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 f816 	bl	8002914 <HAL_RCC_OscConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80008ec:	f000 fb38 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	003b      	movs	r3, r7
 80008f2:	2207      	movs	r2, #7
 80008f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000902:	003b      	movs	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000908:	003b      	movs	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800090e:	003b      	movs	r3, r7
 8000910:	2100      	movs	r1, #0
 8000912:	0018      	movs	r0, r3
 8000914:	f002 f9e2 	bl	8002cdc <HAL_RCC_ClockConfig>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800091c:	f000 fb20 	bl	8000f60 <Error_Handler>
  }
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b00d      	add	sp, #52	; 0x34
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	0018      	movs	r0, r3
 8000932:	230c      	movs	r3, #12
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f004 fc94 	bl	8005264 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093c:	4b5b      	ldr	r3, [pc, #364]	; (8000aac <MX_ADC1_Init+0x184>)
 800093e:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <MX_ADC1_Init+0x188>)
 8000940:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000942:	4b5a      	ldr	r3, [pc, #360]	; (8000aac <MX_ADC1_Init+0x184>)
 8000944:	22c0      	movs	r2, #192	; 0xc0
 8000946:	0612      	lsls	r2, r2, #24
 8000948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094a:	4b58      	ldr	r3, [pc, #352]	; (8000aac <MX_ADC1_Init+0x184>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000950:	4b56      	ldr	r3, [pc, #344]	; (8000aac <MX_ADC1_Init+0x184>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000956:	4b55      	ldr	r3, [pc, #340]	; (8000aac <MX_ADC1_Init+0x184>)
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	0392      	lsls	r2, r2, #14
 800095c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800095e:	4b53      	ldr	r3, [pc, #332]	; (8000aac <MX_ADC1_Init+0x184>)
 8000960:	2204      	movs	r2, #4
 8000962:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000964:	4b51      	ldr	r3, [pc, #324]	; (8000aac <MX_ADC1_Init+0x184>)
 8000966:	2200      	movs	r2, #0
 8000968:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800096a:	4b50      	ldr	r3, [pc, #320]	; (8000aac <MX_ADC1_Init+0x184>)
 800096c:	2200      	movs	r2, #0
 800096e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000970:	4b4e      	ldr	r3, [pc, #312]	; (8000aac <MX_ADC1_Init+0x184>)
 8000972:	2200      	movs	r2, #0
 8000974:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 8000976:	4b4d      	ldr	r3, [pc, #308]	; (8000aac <MX_ADC1_Init+0x184>)
 8000978:	2208      	movs	r2, #8
 800097a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800097c:	4b4b      	ldr	r3, [pc, #300]	; (8000aac <MX_ADC1_Init+0x184>)
 800097e:	2220      	movs	r2, #32
 8000980:	2100      	movs	r1, #0
 8000982:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000984:	4b49      	ldr	r3, [pc, #292]	; (8000aac <MX_ADC1_Init+0x184>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098a:	4b48      	ldr	r3, [pc, #288]	; (8000aac <MX_ADC1_Init+0x184>)
 800098c:	2200      	movs	r2, #0
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000990:	4b46      	ldr	r3, [pc, #280]	; (8000aac <MX_ADC1_Init+0x184>)
 8000992:	222c      	movs	r2, #44	; 0x2c
 8000994:	2100      	movs	r1, #0
 8000996:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000998:	4b44      	ldr	r3, [pc, #272]	; (8000aac <MX_ADC1_Init+0x184>)
 800099a:	2200      	movs	r2, #0
 800099c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800099e:	4b43      	ldr	r3, [pc, #268]	; (8000aac <MX_ADC1_Init+0x184>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80009a4:	4b41      	ldr	r3, [pc, #260]	; (8000aac <MX_ADC1_Init+0x184>)
 80009a6:	2207      	movs	r2, #7
 80009a8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009aa:	4b40      	ldr	r3, [pc, #256]	; (8000aac <MX_ADC1_Init+0x184>)
 80009ac:	223c      	movs	r2, #60	; 0x3c
 80009ae:	2100      	movs	r1, #0
 80009b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009b2:	4b3e      	ldr	r3, [pc, #248]	; (8000aac <MX_ADC1_Init+0x184>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b8:	4b3c      	ldr	r3, [pc, #240]	; (8000aac <MX_ADC1_Init+0x184>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 ff1a 	bl	80017f4 <HAL_ADC_Init>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80009c4:	f000 facc 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80009c8:	1d3b      	adds	r3, r7, #4
 80009ca:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <MX_ADC1_Init+0x18c>)
 80009cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	1d3a      	adds	r2, r7, #4
 80009dc:	4b33      	ldr	r3, [pc, #204]	; (8000aac <MX_ADC1_Init+0x184>)
 80009de:	0011      	movs	r1, r2
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 f9d1 	bl	8001d88 <HAL_ADC_ConfigChannel>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009ea:	f000 fab9 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2204      	movs	r2, #4
 80009f2:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f4:	1d3a      	adds	r2, r7, #4
 80009f6:	4b2d      	ldr	r3, [pc, #180]	; (8000aac <MX_ADC1_Init+0x184>)
 80009f8:	0011      	movs	r1, r2
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 f9c4 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000a04:	f000 faac 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0e:	1d3a      	adds	r2, r7, #4
 8000a10:	4b26      	ldr	r3, [pc, #152]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 f9b7 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000a1e:	f000 fa9f 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	220c      	movs	r2, #12
 8000a26:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a28:	1d3a      	adds	r2, r7, #4
 8000a2a:	4b20      	ldr	r3, [pc, #128]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a2c:	0011      	movs	r1, r2
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f001 f9aa 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d001      	beq.n	8000a3c <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000a38:	f000 fa92 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	2210      	movs	r2, #16
 8000a40:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a42:	1d3a      	adds	r2, r7, #4
 8000a44:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 f99d 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a4e:	1e03      	subs	r3, r0, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 8000a52:	f000 fa85 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2214      	movs	r2, #20
 8000a5a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	1d3a      	adds	r2, r7, #4
 8000a5e:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 f990 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a68:	1e03      	subs	r3, r0, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 8000a6c:	f000 fa78 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2218      	movs	r2, #24
 8000a74:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a76:	1d3a      	adds	r2, r7, #4
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a7a:	0011      	movs	r1, r2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f001 f983 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 8000a86:	f000 fa6b 	bl	8000f60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	221c      	movs	r2, #28
 8000a8e:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	1d3a      	adds	r2, r7, #4
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_ADC1_Init+0x184>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 f976 	bl	8001d88 <HAL_ADC_ConfigChannel>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000aa0:	f000 fa5e 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b004      	add	sp, #16
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000bc 	.word	0x200000bc
 8000ab0:	40012400 	.word	0x40012400
 8000ab4:	30001000 	.word	0x30001000

08000ab8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b090      	sub	sp, #64	; 0x40
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000abe:	232c      	movs	r3, #44	; 0x2c
 8000ac0:	18fb      	adds	r3, r7, r3
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 fbcb 	bl	8005264 <memset>
  RTC_DateTypeDef sDate = {0};
 8000ace:	2328      	movs	r3, #40	; 0x28
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000ad6:	003b      	movs	r3, r7
 8000ad8:	0018      	movs	r0, r3
 8000ada:	2328      	movs	r3, #40	; 0x28
 8000adc:	001a      	movs	r2, r3
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f004 fbc0 	bl	8005264 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ae4:	4b4a      	ldr	r3, [pc, #296]	; (8000c10 <MX_RTC_Init+0x158>)
 8000ae6:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <MX_RTC_Init+0x15c>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000aea:	4b49      	ldr	r3, [pc, #292]	; (8000c10 <MX_RTC_Init+0x158>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000af0:	4b47      	ldr	r3, [pc, #284]	; (8000c10 <MX_RTC_Init+0x158>)
 8000af2:	227f      	movs	r2, #127	; 0x7f
 8000af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 250;
 8000af6:	4b46      	ldr	r3, [pc, #280]	; (8000c10 <MX_RTC_Init+0x158>)
 8000af8:	22fa      	movs	r2, #250	; 0xfa
 8000afa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000afc:	4b44      	ldr	r3, [pc, #272]	; (8000c10 <MX_RTC_Init+0x158>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_POS1;
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0612      	lsls	r2, r2, #24
 8000b08:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b0a:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b10:	4b3f      	ldr	r3, [pc, #252]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	05d2      	lsls	r2, r2, #23
 8000b16:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000b18:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b1e:	4b3c      	ldr	r3, [pc, #240]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 fb35 	bl	8003190 <HAL_RTC_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_RTC_Init+0x76>
  {
    Error_Handler();
 8000b2a:	f000 fa19 	bl	8000f60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8000b2e:	212c      	movs	r1, #44	; 0x2c
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2217      	movs	r2, #23
 8000b34:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 20;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2214      	movs	r2, #20
 8000b3a:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b54:	1879      	adds	r1, r7, r1
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 fbb6 	bl	80032cc <HAL_RTC_SetTime>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_RTC_Init+0xb0>
  {
    Error_Handler();
 8000b64:	f000 f9fc 	bl	8000f60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8000b68:	2128      	movs	r1, #40	; 0x28
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2205      	movs	r2, #5
 8000b6e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2205      	movs	r2, #5
 8000b74:	705a      	strb	r2, [r3, #1]
  sDate.Date = 10;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	220a      	movs	r2, #10
 8000b7a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2200      	movs	r2, #0
 8000b80:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b82:	1879      	adds	r1, r7, r1
 8000b84:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_RTC_Init+0x158>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f002 fc47 	bl	800341c <HAL_RTC_SetDate>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <MX_RTC_Init+0xde>
  {
    Error_Handler();
 8000b92:	f000 f9e5 	bl	8000f60 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 59;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	223b      	movs	r2, #59	; 0x3b
 8000ba6:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000ba8:	003b      	movs	r3, r7
 8000baa:	2200      	movs	r2, #0
 8000bac:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bae:	003b      	movs	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bb4:	003b      	movs	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000bba:	003b      	movs	r3, r7
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <MX_RTC_Init+0x160>)
 8000bbe:	615a      	str	r2, [r3, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2220      	movs	r2, #32
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	2280      	movs	r2, #128	; 0x80
 8000bd8:	0052      	lsls	r2, r2, #1
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000bdc:	0039      	movs	r1, r7
 8000bde:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_RTC_Init+0x158>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 fcac 	bl	8003540 <HAL_RTC_SetAlarm_IT>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8000bec:	f000 f9b8 	bl	8000f60 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000bf0:	2380      	movs	r3, #128	; 0x80
 8000bf2:	031a      	lsls	r2, r3, #12
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_RTC_Init+0x158>)
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 fe9f 	bl	800393c <HAL_RTCEx_SetCalibrationOutPut>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <MX_RTC_Init+0x14e>
  {
    Error_Handler();
 8000c02:	f000 f9ad 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b010      	add	sp, #64	; 0x40
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	20000120 	.word	0x20000120
 8000c14:	40002800 	.word	0x40002800
 8000c18:	80808000 	.word	0x80808000

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	231c      	movs	r3, #28
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	0018      	movs	r0, r3
 8000c28:	230c      	movs	r3, #12
 8000c2a:	001a      	movs	r2, r3
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	f004 fb19 	bl	8005264 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c32:	003b      	movs	r3, r7
 8000c34:	0018      	movs	r0, r3
 8000c36:	231c      	movs	r3, #28
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f004 fb12 	bl	8005264 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c40:	4b24      	ldr	r3, [pc, #144]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <MX_TIM3_Init+0xbc>)
 8000c44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c48:	220c      	movs	r2, #12
 8000c4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100;
 8000c52:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c54:	4a21      	ldr	r2, [pc, #132]	; (8000cdc <MX_TIM3_Init+0xc0>)
 8000c56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c60:	2280      	movs	r2, #128	; 0x80
 8000c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c64:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 feb0 	bl	80039cc <HAL_TIM_PWM_Init>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c70:	f000 f976 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c74:	211c      	movs	r1, #28
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c82:	187a      	adds	r2, r7, r1
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 fdab 	bl	80047e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c92:	f000 f965 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c96:	003b      	movs	r3, r7
 8000c98:	2260      	movs	r2, #96	; 0x60
 8000c9a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c9c:	003b      	movs	r3, r7
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca2:	003b      	movs	r3, r7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ca8:	003b      	movs	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cae:	0039      	movs	r1, r7
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f003 f941 	bl	8003f3c <HAL_TIM_PWM_ConfigChannel>
 8000cba:	1e03      	subs	r3, r0, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000cbe:	f000 f94f 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <MX_TIM3_Init+0xb8>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fa3d 	bl	8001144 <HAL_TIM_MspPostInit>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b00a      	add	sp, #40	; 0x28
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	20000148 	.word	0x20000148
 8000cd8:	40000400 	.word	0x40000400
 8000cdc:	00000834 	.word	0x00000834

08000ce0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ce4:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000ce6:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <MX_USART2_UART_Init+0x64>)
 8000ce8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000cec:	22e1      	movs	r2, #225	; 0xe1
 8000cee:	0252      	lsls	r2, r2, #9
 8000cf0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d06:	220c      	movs	r2, #12
 8000d08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x60>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 fdd4 	bl	80048d8 <HAL_UART_Init>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d34:	f000 f914 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	20000194 	.word	0x20000194
 8000d44:	40004400 	.word	0x40004400

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b08b      	sub	sp, #44	; 0x2c
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	2414      	movs	r4, #20
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	0018      	movs	r0, r3
 8000d54:	2314      	movs	r3, #20
 8000d56:	001a      	movs	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f004 fa83 	bl	8005264 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5e:	4b75      	ldr	r3, [pc, #468]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d62:	4b74      	ldr	r3, [pc, #464]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d64:	2104      	movs	r1, #4
 8000d66:	430a      	orrs	r2, r1
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6a:	4b72      	ldr	r3, [pc, #456]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6e:	2204      	movs	r2, #4
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d76:	4b6f      	ldr	r3, [pc, #444]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d7a:	4b6e      	ldr	r3, [pc, #440]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d7c:	2120      	movs	r1, #32
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	635a      	str	r2, [r3, #52]	; 0x34
 8000d82:	4b6c      	ldr	r3, [pc, #432]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d86:	2220      	movs	r2, #32
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b69      	ldr	r3, [pc, #420]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d92:	4b68      	ldr	r3, [pc, #416]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9a:	4b66      	ldr	r3, [pc, #408]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b63      	ldr	r3, [pc, #396]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000da8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000daa:	4b62      	ldr	r3, [pc, #392]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000dac:	2102      	movs	r1, #2
 8000dae:	430a      	orrs	r2, r1
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	2202      	movs	r2, #2
 8000db8:	4013      	ands	r3, r2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc2:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dca:	4b5a      	ldr	r3, [pc, #360]	; (8000f34 <MX_GPIO_Init+0x1ec>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2208      	movs	r2, #8
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000dd6:	4958      	ldr	r1, [pc, #352]	; (8000f38 <MX_GPIO_Init+0x1f0>)
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <MX_GPIO_Init+0x1f4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f001 fd28 	bl	8002832 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	0099      	lsls	r1, r3, #2
 8000de6:	23a0      	movs	r3, #160	; 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	2200      	movs	r2, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f001 fd20 	bl	8002832 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	4a52      	ldr	r2, [pc, #328]	; (8000f40 <MX_GPIO_Init+0x1f8>)
 8000df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <MX_GPIO_Init+0x1fc>)
 8000e08:	0019      	movs	r1, r3
 8000e0a:	0010      	movs	r0, r2
 8000e0c:	f001 fb82 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000e10:	193b      	adds	r3, r7, r4
 8000e12:	220f      	movs	r2, #15
 8000e14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	2203      	movs	r2, #3
 8000e1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	4a48      	ldr	r2, [pc, #288]	; (8000f48 <MX_GPIO_Init+0x200>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f001 fb73 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 PA8 PA10 PA11
                           PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	4a46      	ldr	r2, [pc, #280]	; (8000f4c <MX_GPIO_Init+0x204>)
 8000e32:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	2203      	movs	r2, #3
 8000e38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e40:	193a      	adds	r2, r7, r4
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 fb63 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <MX_GPIO_Init+0x208>)
 8000e52:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e54:	193b      	adds	r3, r7, r4
 8000e56:	2203      	movs	r2, #3
 8000e58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	4a36      	ldr	r2, [pc, #216]	; (8000f3c <MX_GPIO_Init+0x1f4>)
 8000e64:	0019      	movs	r1, r3
 8000e66:	0010      	movs	r0, r2
 8000e68:	f001 fb54 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	4a32      	ldr	r2, [pc, #200]	; (8000f38 <MX_GPIO_Init+0x1f0>)
 8000e70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2201      	movs	r2, #1
 8000e76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	4a2d      	ldr	r2, [pc, #180]	; (8000f3c <MX_GPIO_Init+0x1f4>)
 8000e88:	0019      	movs	r1, r3
 8000e8a:	0010      	movs	r0, r2
 8000e8c:	f001 fb42 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e90:	0021      	movs	r1, r4
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0092      	lsls	r2, r2, #2
 8000e98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	193a      	adds	r2, r7, r4
 8000eb0:	23a0      	movs	r3, #160	; 0xa0
 8000eb2:	05db      	lsls	r3, r3, #23
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f001 fb2c 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ebc:	193b      	adds	r3, r7, r4
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	0212      	lsls	r2, r2, #8
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <MX_GPIO_Init+0x20c>)
 8000ec8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	193a      	adds	r2, r7, r4
 8000ed2:	23a0      	movs	r3, #160	; 0xa0
 8000ed4:	05db      	lsls	r3, r3, #23
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f001 fb1b 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ede:	193b      	adds	r3, r7, r4
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	4a19      	ldr	r2, [pc, #100]	; (8000f58 <MX_GPIO_Init+0x210>)
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0010      	movs	r0, r2
 8000ef8:	f001 fb0c 	bl	8002514 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000efc:	0021      	movs	r1, r4
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	2240      	movs	r2, #64	; 0x40
 8000f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <MX_GPIO_Init+0x214>)
 8000f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <MX_GPIO_Init+0x1f4>)
 8000f14:	0019      	movs	r1, r3
 8000f16:	0010      	movs	r0, r2
 8000f18:	f001 fafc 	bl	8002514 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2100      	movs	r1, #0
 8000f20:	2007      	movs	r0, #7
 8000f22:	f001 fac5 	bl	80024b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000f26:	2007      	movs	r0, #7
 8000f28:	f001 fad7 	bl	80024da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2c:	46c0      	nop			; (mov r8, r8)
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	b00b      	add	sp, #44	; 0x2c
 8000f32:	bd90      	pop	{r4, r7, pc}
 8000f34:	40021000 	.word	0x40021000
 8000f38:	00008380 	.word	0x00008380
 8000f3c:	50000400 	.word	0x50000400
 8000f40:	0000e080 	.word	0x0000e080
 8000f44:	50000800 	.word	0x50000800
 8000f48:	50001400 	.word	0x50001400
 8000f4c:	00006de3 	.word	0x00006de3
 8000f50:	00007c3f 	.word	0x00007c3f
 8000f54:	10310000 	.word	0x10310000
 8000f58:	50000c00 	.word	0x50000c00
 8000f5c:	10210000 	.word	0x10210000

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	2201      	movs	r2, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f90:	2180      	movs	r1, #128	; 0x80
 8000f92:	0549      	lsls	r1, r1, #21
 8000f94:	430a      	orrs	r2, r1
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <HAL_MspInit+0x44>)
 8000f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	055b      	lsls	r3, r3, #21
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b091      	sub	sp, #68	; 0x44
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	232c      	movs	r3, #44	; 0x2c
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	2314      	movs	r3, #20
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	f004 f94c 	bl	8005264 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	2410      	movs	r4, #16
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	231c      	movs	r3, #28
 8000fd4:	001a      	movs	r2, r3
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	f004 f944 	bl	8005264 <memset>
  if(hadc->Instance==ADC1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_ADC_MspInit+0xb0>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d13a      	bne.n	800105c <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	2280      	movs	r2, #128	; 0x80
 8000fea:	01d2      	lsls	r2, r2, #7
 8000fec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f001 ffdc 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000ffc:	1e03      	subs	r3, r0, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001000:	f7ff ffae 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0349      	lsls	r1, r1, #13
 800100e:	430a      	orrs	r2, r1
 8001010:	641a      	str	r2, [r3, #64]	; 0x40
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 8001014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 8001022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 8001026:	2101      	movs	r1, #1
 8001028:	430a      	orrs	r2, r1
 800102a:	635a      	str	r2, [r3, #52]	; 0x34
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_ADC_MspInit+0xb4>)
 800102e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001030:	2201      	movs	r2, #1
 8001032:	4013      	ands	r3, r2
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001038:	212c      	movs	r1, #44	; 0x2c
 800103a:	187b      	adds	r3, r7, r1
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	0152      	lsls	r2, r2, #5
 8001040:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2203      	movs	r2, #3
 8001046:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	187a      	adds	r2, r7, r1
 8001050:	23a0      	movs	r3, #160	; 0xa0
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f001 fa5c 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b011      	add	sp, #68	; 0x44
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40012400 	.word	0x40012400
 8001068:	40021000 	.word	0x40021000

0800106c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b08b      	sub	sp, #44	; 0x2c
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	240c      	movs	r4, #12
 8001076:	193b      	adds	r3, r7, r4
 8001078:	0018      	movs	r0, r3
 800107a:	231c      	movs	r3, #28
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f004 f8f0 	bl	8005264 <memset>
  if(hrtc->Instance==RTC)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_RTC_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800108e:	193b      	adds	r3, r7, r4
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	0292      	lsls	r2, r2, #10
 8001094:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001096:	193b      	adds	r3, r7, r4
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	0018      	movs	r0, r3
 80010a2:	f001 ff87 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80010a6:	1e03      	subs	r3, r0, #0
 80010a8:	d001      	beq.n	80010ae <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80010aa:	f7ff ff59 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_RTC_MspInit+0x88>)
 80010b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_RTC_MspInit+0x88>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0209      	lsls	r1, r1, #8
 80010b8:	430a      	orrs	r2, r1
 80010ba:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_RTC_MspInit+0x88>)
 80010be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_RTC_MspInit+0x88>)
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	00c9      	lsls	r1, r1, #3
 80010c6:	430a      	orrs	r2, r1
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_RTC_MspInit+0x88>)
 80010cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ce:	2380      	movs	r3, #128	; 0x80
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4013      	ands	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2002      	movs	r0, #2
 80010de:	f001 f9e7 	bl	80024b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80010e2:	2002      	movs	r0, #2
 80010e4:	f001 f9f9 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b00b      	add	sp, #44	; 0x2c
 80010ee:	bd90      	pop	{r4, r7, pc}
 80010f0:	40002800 	.word	0x40002800
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_TIM_PWM_MspInit+0x44>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d113      	bne.n	8001132 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_TIM_PWM_MspInit+0x48>)
 800110c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_TIM_PWM_MspInit+0x48>)
 8001110:	2102      	movs	r1, #2
 8001112:	430a      	orrs	r2, r1
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_TIM_PWM_MspInit+0x48>)
 8001118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800111a:	2202      	movs	r2, #2
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	2010      	movs	r0, #16
 8001128:	f001 f9c2 	bl	80024b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800112c:	2010      	movs	r0, #16
 800112e:	f001 f9d4 	bl	80024da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	40000400 	.word	0x40000400
 8001140:	40021000 	.word	0x40021000

08001144 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	240c      	movs	r4, #12
 800114e:	193b      	adds	r3, r7, r4
 8001150:	0018      	movs	r0, r3
 8001152:	2314      	movs	r3, #20
 8001154:	001a      	movs	r2, r3
 8001156:	2100      	movs	r1, #0
 8001158:	f004 f884 	bl	8005264 <memset>
  if(htim->Instance==TIM3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_TIM_MspPostInit+0x70>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d121      	bne.n	80011aa <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <HAL_TIM_MspPostInit+0x74>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <HAL_TIM_MspPostInit+0x74>)
 800116c:	2104      	movs	r1, #4
 800116e:	430a      	orrs	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	; 0x34
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_TIM_MspPostInit+0x74>)
 8001174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001176:	2204      	movs	r2, #4
 8001178:	4013      	ands	r3, r2
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800117e:	0021      	movs	r1, r4
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2240      	movs	r2, #64	; 0x40
 8001184:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2202      	movs	r2, #2
 800118a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	187b      	adds	r3, r7, r1
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2200      	movs	r2, #0
 8001196:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2201      	movs	r2, #1
 800119c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	4a06      	ldr	r2, [pc, #24]	; (80011bc <HAL_TIM_MspPostInit+0x78>)
 80011a2:	0019      	movs	r1, r3
 80011a4:	0010      	movs	r0, r2
 80011a6:	f001 f9b5 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b009      	add	sp, #36	; 0x24
 80011b0:	bd90      	pop	{r4, r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	40000400 	.word	0x40000400
 80011b8:	40021000 	.word	0x40021000
 80011bc:	50000800 	.word	0x50000800

080011c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	2414      	movs	r4, #20
 80011ca:	193b      	adds	r3, r7, r4
 80011cc:	0018      	movs	r0, r3
 80011ce:	2314      	movs	r3, #20
 80011d0:	001a      	movs	r2, r3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f004 f846 	bl	8005264 <memset>
  if(huart->Instance==USART2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1b      	ldr	r2, [pc, #108]	; (800124c <HAL_UART_MspInit+0x8c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d130      	bne.n	8001244 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011e2:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011e8:	2180      	movs	r1, #128	; 0x80
 80011ea:	0289      	lsls	r1, r1, #10
 80011ec:	430a      	orrs	r2, r1
 80011ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80011f0:	4b17      	ldr	r3, [pc, #92]	; (8001250 <HAL_UART_MspInit+0x90>)
 80011f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <HAL_UART_MspInit+0x90>)
 8001200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <HAL_UART_MspInit+0x90>)
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	635a      	str	r2, [r3, #52]	; 0x34
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_UART_MspInit+0x90>)
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001216:	0021      	movs	r1, r4
 8001218:	187b      	adds	r3, r7, r1
 800121a:	220c      	movs	r2, #12
 800121c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	187b      	adds	r3, r7, r1
 8001220:	2202      	movs	r2, #2
 8001222:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	187b      	adds	r3, r7, r1
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	187b      	adds	r3, r7, r1
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001230:	187b      	adds	r3, r7, r1
 8001232:	2201      	movs	r2, #1
 8001234:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	187a      	adds	r2, r7, r1
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	0011      	movs	r1, r2
 800123e:	0018      	movs	r0, r3
 8001240:	f001 f968 	bl	8002514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	b00b      	add	sp, #44	; 0x2c
 800124a:	bd90      	pop	{r4, r7, pc}
 800124c:	40004400 	.word	0x40004400
 8001250:	40021000 	.word	0x40021000

08001254 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001258:	e7fe      	b.n	8001258 <NMI_Handler+0x4>

0800125a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <HardFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f000 f8f6 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	46c0      	nop			; (mov r8, r8)
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <RTC_IRQHandler+0x14>)
 800128a:	0018      	movs	r0, r3
 800128c:	f002 fa48 	bl	8003720 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	20000120 	.word	0x20000120

0800129c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80012a0:	2040      	movs	r0, #64	; 0x40
 80012a2:	f001 fae3 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 fade 	bl	800286c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80012b0:	46c0      	nop			; (mov r8, r8)
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <TIM3_IRQHandler+0x14>)
 80012be:	0018      	movs	r0, r3
 80012c0:	f002 fd3a 	bl	8003d38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012c4:	46c0      	nop			; (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	20000148 	.word	0x20000148

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	18d3      	adds	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 ffb8 	bl	8005274 <__errno>
 8001304:	0003      	movs	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	2301      	movs	r3, #1
 800130c:	425b      	negs	r3, r3
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	18d2      	adds	r2, r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	0018      	movs	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	b006      	add	sp, #24
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20003000 	.word	0x20003000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000228 	.word	0x20000228
 8001338:	20000378 	.word	0x20000378

0800133c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001340:	4b03      	ldr	r3, [pc, #12]	; (8001350 <SystemInit+0x14>)
 8001342:	2280      	movs	r2, #128	; 0x80
 8001344:	0512      	lsls	r2, r2, #20
 8001346:	609a      	str	r2, [r3, #8]
#endif
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001356:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001358:	f7ff fff0 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800135c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800135e:	e003      	b.n	8001368 <LoopCopyDataInit>

08001360 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001360:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001362:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001364:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001366:	3104      	adds	r1, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <LoopForever+0xa>)
  ldr r3, =_edata
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <LoopForever+0xe>)
  adds r2, r0, r1
 800136c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800136e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001370:	d3f6      	bcc.n	8001360 <CopyDataInit>
  ldr r2, =_sbss
 8001372:	4a0a      	ldr	r2, [pc, #40]	; (800139c <LoopForever+0x12>)
  b LoopFillZerobss
 8001374:	e002      	b.n	800137c <LoopFillZerobss>

08001376 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  str  r3, [r2]
 8001378:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800137a:	3204      	adds	r2, #4

0800137c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <LoopForever+0x16>)
  cmp r2, r3
 800137e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001380:	d3f9      	bcc.n	8001376 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001382:	f003 ff7d 	bl	8005280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fa75 	bl	8000874 <main>

0800138a <LoopForever>:

LoopForever:
    b LoopForever
 800138a:	e7fe      	b.n	800138a <LoopForever>
  ldr   r0, =_estack
 800138c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001390:	08005cf4 	.word	0x08005cf4
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001398:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 800139c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 80013a0:	20000378 	.word	0x20000378

080013a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a4:	e7fe      	b.n	80013a4 <ADC1_IRQHandler>

080013a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f80e 	bl	80013d4 <HAL_InitTick>
 80013b8:	1e03      	subs	r3, r0, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	e001      	b.n	80013c8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013c4:	f7ff fdd2 	bl	8000f6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013dc:	230f      	movs	r3, #15
 80013de:	18fb      	adds	r3, r7, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_InitTick+0x88>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d02b      	beq.n	8001444 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_InitTick+0x8c>)
 80013ee:	681c      	ldr	r4, [r3, #0]
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <HAL_InitTick+0x88>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	0019      	movs	r1, r3
 80013f6:	23fa      	movs	r3, #250	; 0xfa
 80013f8:	0098      	lsls	r0, r3, #2
 80013fa:	f7fe fe97 	bl	800012c <__udivsi3>
 80013fe:	0003      	movs	r3, r0
 8001400:	0019      	movs	r1, r3
 8001402:	0020      	movs	r0, r4
 8001404:	f7fe fe92 	bl	800012c <__udivsi3>
 8001408:	0003      	movs	r3, r0
 800140a:	0018      	movs	r0, r3
 800140c:	f001 f875 	bl	80024fa <HAL_SYSTICK_Config>
 8001410:	1e03      	subs	r3, r0, #0
 8001412:	d112      	bne.n	800143a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d80a      	bhi.n	8001430 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	2301      	movs	r3, #1
 800141e:	425b      	negs	r3, r3
 8001420:	2200      	movs	r2, #0
 8001422:	0018      	movs	r0, r3
 8001424:	f001 f844 	bl	80024b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_InitTick+0x90>)
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	e00d      	b.n	800144c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001430:	230f      	movs	r3, #15
 8001432:	18fb      	adds	r3, r7, r3
 8001434:	2201      	movs	r2, #1
 8001436:	701a      	strb	r2, [r3, #0]
 8001438:	e008      	b.n	800144c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	230f      	movs	r3, #15
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	2201      	movs	r2, #1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e003      	b.n	800144c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001444:	230f      	movs	r3, #15
 8001446:	18fb      	adds	r3, r7, r3
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800144c:	230f      	movs	r3, #15
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	20000008 	.word	0x20000008
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <HAL_IncTick+0x1c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	001a      	movs	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_IncTick+0x20>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	18d2      	adds	r2, r2, r3
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_IncTick+0x20>)
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	46c0      	nop			; (mov r8, r8)
 8001484:	20000008 	.word	0x20000008
 8001488:	2000022c 	.word	0x2000022c

0800148c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  return uwTick;
 8001490:	4b02      	ldr	r3, [pc, #8]	; (800149c <HAL_GetTick+0x10>)
 8001492:	681b      	ldr	r3, [r3, #0]
}
 8001494:	0018      	movs	r0, r3
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	2000022c 	.word	0x2000022c

080014a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a8:	f7ff fff0 	bl	800148c <HAL_GetTick>
 80014ac:	0003      	movs	r3, r0
 80014ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	d005      	beq.n	80014c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_Delay+0x44>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	001a      	movs	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	f7ff ffe0 	bl	800148c <HAL_GetTick>
 80014cc:	0002      	movs	r2, r0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8f7      	bhi.n	80014c8 <HAL_Delay+0x28>
  {
  }
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b004      	add	sp, #16
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	20000008 	.word	0x20000008

080014e8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <HAL_SuspendTick+0x18>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b03      	ldr	r3, [pc, #12]	; (8001500 <HAL_SuspendTick+0x18>)
 80014f2:	2102      	movs	r1, #2
 80014f4:	438a      	bics	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_ResumeTick+0x18>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b03      	ldr	r3, [pc, #12]	; (800151c <HAL_ResumeTick+0x18>)
 800150e:	2102      	movs	r1, #2
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	e000e010 	.word	0xe000e010

08001520 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a05      	ldr	r2, [pc, #20]	; (8001544 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001530:	401a      	ands	r2, r3
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	601a      	str	r2, [r3, #0]
}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	46bd      	mov	sp, r7
 800153e:	b002      	add	sp, #8
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	ff3fffff 	.word	0xff3fffff

08001548 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	23c0      	movs	r3, #192	; 0xc0
 8001556:	041b      	lsls	r3, r3, #16
 8001558:	4013      	ands	r3, r2
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}

08001562 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	2104      	movs	r1, #4
 8001576:	400a      	ands	r2, r1
 8001578:	2107      	movs	r1, #7
 800157a:	4091      	lsls	r1, r2
 800157c:	000a      	movs	r2, r1
 800157e:	43d2      	mvns	r2, r2
 8001580:	401a      	ands	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2104      	movs	r1, #4
 8001586:	400b      	ands	r3, r1
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4099      	lsls	r1, r3
 800158c:	000b      	movs	r3, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}

0800159c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	2104      	movs	r1, #4
 80015ae:	400a      	ands	r2, r1
 80015b0:	2107      	movs	r1, #7
 80015b2:	4091      	lsls	r1, r2
 80015b4:	000a      	movs	r2, r1
 80015b6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	2104      	movs	r1, #4
 80015bc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80015be:	40da      	lsrs	r2, r3
 80015c0:	0013      	movs	r3, r2
}
 80015c2:	0018      	movs	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b002      	add	sp, #8
 80015c8:	bd80      	pop	{r7, pc}

080015ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68da      	ldr	r2, [r3, #12]
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4013      	ands	r3, r2
 80015dc:	d101      	bne.n	80015e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80015de:	2301      	movs	r3, #1
 80015e0:	e000      	b.n	80015e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80015e2:	2300      	movs	r3, #0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}

080015ec <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	211f      	movs	r1, #31
 8001600:	400a      	ands	r2, r1
 8001602:	210f      	movs	r1, #15
 8001604:	4091      	lsls	r1, r2
 8001606:	000a      	movs	r2, r1
 8001608:	43d2      	mvns	r2, r2
 800160a:	401a      	ands	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	0e9b      	lsrs	r3, r3, #26
 8001610:	210f      	movs	r1, #15
 8001612:	4019      	ands	r1, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	201f      	movs	r0, #31
 8001618:	4003      	ands	r3, r0
 800161a:	4099      	lsls	r1, r3
 800161c:	000b      	movs	r3, r1
 800161e:	431a      	orrs	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001624:	46c0      	nop			; (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	b004      	add	sp, #16
 800162a:	bd80      	pop	{r7, pc}

0800162c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	025b      	lsls	r3, r3, #9
 800163e:	0a5b      	lsrs	r3, r3, #9
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001646:	46c0      	nop			; (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}

0800164e <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	0252      	lsls	r2, r2, #9
 8001660:	0a52      	lsrs	r2, r2, #9
 8001662:	43d2      	mvns	r2, r2
 8001664:	401a      	ands	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	; 0x28
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	0212      	lsls	r2, r2, #8
 8001688:	43d2      	mvns	r2, r2
 800168a:	401a      	ands	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	021b      	lsls	r3, r3, #8
 8001690:	6879      	ldr	r1, [r7, #4]
 8001692:	400b      	ands	r3, r1
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001696:	400b      	ands	r3, r1
 8001698:	431a      	orrs	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b004      	add	sp, #16
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	7fffff00 	.word	0x7fffff00

080016ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	0552      	lsls	r2, r2, #21
 80016c0:	431a      	orrs	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	6fffffe8 	.word	0x6fffffe8

080016d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	055b      	lsls	r3, r3, #21
 80016e4:	401a      	ands	r2, r3
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	055b      	lsls	r3, r3, #21
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d101      	bne.n	80016f2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}

080016fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a04      	ldr	r2, [pc, #16]	; (800171c <LL_ADC_Enable+0x20>)
 800170a:	4013      	ands	r3, r2
 800170c:	2201      	movs	r2, #1
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b002      	add	sp, #8
 800171a:	bd80      	pop	{r7, pc}
 800171c:	7fffffe8 	.word	0x7fffffe8

08001720 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <LL_ADC_Disable+0x20>)
 800172e:	4013      	ands	r3, r2
 8001730:	2202      	movs	r2, #2
 8001732:	431a      	orrs	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b002      	add	sp, #8
 800173e:	bd80      	pop	{r7, pc}
 8001740:	7fffffe8 	.word	0x7fffffe8

08001744 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	2b01      	cmp	r3, #1
 8001756:	d101      	bne.n	800175c <LL_ADC_IsEnabled+0x18>
 8001758:	2301      	movs	r3, #1
 800175a:	e000      	b.n	800175e <LL_ADC_IsEnabled+0x1a>
 800175c:	2300      	movs	r3, #0
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}

08001766 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	2b02      	cmp	r3, #2
 8001778:	d101      	bne.n	800177e <LL_ADC_IsDisableOngoing+0x18>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <LL_ADC_IsDisableOngoing+0x1a>
 800177e:	2300      	movs	r3, #0
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}

08001788 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <LL_ADC_REG_StartConversion+0x20>)
 8001796:	4013      	ands	r3, r2
 8001798:	2204      	movs	r2, #4
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	7fffffe8 	.word	0x7fffffe8

080017ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	4a04      	ldr	r2, [pc, #16]	; (80017cc <LL_ADC_REG_StopConversion+0x20>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	2210      	movs	r2, #16
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	7fffffe8 	.word	0x7fffffe8

080017d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2204      	movs	r2, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d101      	bne.n	80017e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e000      	b.n	80017ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b002      	add	sp, #8
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fc:	231f      	movs	r3, #31
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e17e      	b.n	8001b18 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10a      	bne.n	8001838 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fbc5 	bl	8000fb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2254      	movs	r2, #84	; 0x54
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ff49 	bl	80016d4 <LL_ADC_IsInternalRegulatorEnabled>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d114      	bne.n	8001870 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	0018      	movs	r0, r3
 800184c:	f7ff ff2e 	bl	80016ac <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001850:	4bb3      	ldr	r3, [pc, #716]	; (8001b20 <HAL_ADC_Init+0x32c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	49b3      	ldr	r1, [pc, #716]	; (8001b24 <HAL_ADC_Init+0x330>)
 8001856:	0018      	movs	r0, r3
 8001858:	f7fe fc68 	bl	800012c <__udivsi3>
 800185c:	0003      	movs	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001862:	e002      	b.n	800186a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3b01      	subs	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f9      	bne.n	8001864 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff ff2d 	bl	80016d4 <LL_ADC_IsInternalRegulatorEnabled>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d10f      	bne.n	800189e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	2210      	movs	r2, #16
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2201      	movs	r2, #1
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001896:	231f      	movs	r3, #31
 8001898:	18fb      	adds	r3, r7, r3
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff ff94 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b0:	2210      	movs	r2, #16
 80018b2:	4013      	ands	r3, r2
 80018b4:	d000      	beq.n	80018b8 <HAL_ADC_Init+0xc4>
 80018b6:	e122      	b.n	8001afe <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d000      	beq.n	80018c0 <HAL_ADC_Init+0xcc>
 80018be:	e11e      	b.n	8001afe <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	4a98      	ldr	r2, [pc, #608]	; (8001b28 <HAL_ADC_Init+0x334>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	2202      	movs	r2, #2
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ff35 	bl	8001744 <LL_ADC_IsEnabled>
 80018da:	1e03      	subs	r3, r0, #0
 80018dc:	d000      	beq.n	80018e0 <HAL_ADC_Init+0xec>
 80018de:	e0ad      	b.n	8001a3c <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7e1b      	ldrb	r3, [r3, #24]
 80018e8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80018ea:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7e5b      	ldrb	r3, [r3, #25]
 80018f0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80018f2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e9b      	ldrb	r3, [r3, #26]
 80018f8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80018fa:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <HAL_ADC_Init+0x116>
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	015b      	lsls	r3, r3, #5
 8001908:	e000      	b.n	800190c <HAL_ADC_Init+0x118>
 800190a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800190c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001912:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da04      	bge.n	8001926 <HAL_ADC_Init+0x132>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	e001      	b.n	800192a <HAL_ADC_Init+0x136>
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800192a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	212c      	movs	r1, #44	; 0x2c
 8001930:	5c5b      	ldrb	r3, [r3, r1]
 8001932:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001934:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4313      	orrs	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2220      	movs	r2, #32
 8001940:	5c9b      	ldrb	r3, [r3, r2]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d115      	bne.n	8001972 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7e9b      	ldrb	r3, [r3, #26]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	0252      	lsls	r2, r2, #9
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	e00b      	b.n	8001972 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	2220      	movs	r2, #32
 8001960:	431a      	orrs	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196a:	2201      	movs	r2, #1
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00a      	beq.n	8001990 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197e:	23e0      	movs	r3, #224	; 0xe0
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001988:	4313      	orrs	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	4a65      	ldr	r2, [pc, #404]	; (8001b2c <HAL_ADC_Init+0x338>)
 8001998:	4013      	ands	r3, r2
 800199a:	0019      	movs	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0f9b      	lsrs	r3, r3, #30
 80019ac:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019b2:	4313      	orrs	r3, r2
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	223c      	movs	r2, #60	; 0x3c
 80019be:	5c9b      	ldrb	r3, [r3, r2]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d111      	bne.n	80019e8 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	0f9b      	lsrs	r3, r3, #30
 80019ca:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019d0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80019d6:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80019dc:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	2201      	movs	r2, #1
 80019e4:	4313      	orrs	r3, r2
 80019e6:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	4a50      	ldr	r2, [pc, #320]	; (8001b30 <HAL_ADC_Init+0x33c>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	0019      	movs	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	23c0      	movs	r3, #192	; 0xc0
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d018      	beq.n	8001a3c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	05db      	lsls	r3, r3, #23
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d012      	beq.n	8001a3c <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	061b      	lsls	r3, r3, #24
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d00c      	beq.n	8001a3c <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a22:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_ADC_Init+0x340>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a44      	ldr	r2, [pc, #272]	; (8001b38 <HAL_ADC_Init+0x344>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	23f0      	movs	r3, #240	; 0xf0
 8001a32:	039b      	lsls	r3, r3, #14
 8001a34:	401a      	ands	r2, r3
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_ADC_Init+0x340>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	001a      	movs	r2, r3
 8001a46:	2100      	movs	r1, #0
 8001a48:	f7ff fd8b 	bl	8001562 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a54:	4939      	ldr	r1, [pc, #228]	; (8001b3c <HAL_ADC_Init+0x348>)
 8001a56:	001a      	movs	r2, r3
 8001a58:	f7ff fd83 	bl	8001562 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d109      	bne.n	8001a78 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2110      	movs	r1, #16
 8001a70:	4249      	negs	r1, r1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
 8001a76:	e018      	b.n	8001aaa <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	039b      	lsls	r3, r3, #14
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d112      	bne.n	8001aaa <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	221c      	movs	r2, #28
 8001a94:	4013      	ands	r3, r2
 8001a96:	2210      	movs	r2, #16
 8001a98:	4252      	negs	r2, r2
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	0011      	movs	r1, r2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2100      	movs	r1, #0
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f7ff fd73 	bl	800159c <LL_ADC_GetSamplingTimeCommonChannels>
 8001ab6:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10b      	bne.n	8001ad8 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	2203      	movs	r2, #3
 8001acc:	4393      	bics	r3, r2
 8001ace:	2201      	movs	r2, #1
 8001ad0:	431a      	orrs	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ad6:	e01c      	b.n	8001b12 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001adc:	2212      	movs	r2, #18
 8001ade:	4393      	bics	r3, r2
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2201      	movs	r2, #1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001af4:	231f      	movs	r3, #31
 8001af6:	18fb      	adds	r3, r7, r3
 8001af8:	2201      	movs	r2, #1
 8001afa:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001afc:	e009      	b.n	8001b12 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b02:	2210      	movs	r2, #16
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b0a:	231f      	movs	r3, #31
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2201      	movs	r2, #1
 8001b10:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b12:	231f      	movs	r3, #31
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	781b      	ldrb	r3, [r3, #0]
}
 8001b18:	0018      	movs	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b008      	add	sp, #32
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000000 	.word	0x20000000
 8001b24:	00030d40 	.word	0x00030d40
 8001b28:	fffffefd 	.word	0xfffffefd
 8001b2c:	ffde0201 	.word	0xffde0201
 8001b30:	1ffffc02 	.word	0x1ffffc02
 8001b34:	40012708 	.word	0x40012708
 8001b38:	ffc3ffff 	.word	0xffc3ffff
 8001b3c:	7fffff04 	.word	0x7fffff04

08001b40 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff fe3f 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d135      	bne.n	8001bc2 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2254      	movs	r2, #84	; 0x54
 8001b5a:	5c9b      	ldrb	r3, [r3, r2]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_Start+0x24>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e035      	b.n	8001bd0 <HAL_ADC_Start+0x90>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2254      	movs	r2, #84	; 0x54
 8001b68:	2101      	movs	r1, #1
 8001b6a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b6c:	250f      	movs	r5, #15
 8001b6e:	197c      	adds	r4, r7, r5
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fb1a 	bl	80021ac <ADC_Enable>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b7c:	197b      	adds	r3, r7, r5
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d119      	bne.n	8001bb8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_ADC_Start+0x98>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0052      	lsls	r2, r2, #1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	221c      	movs	r2, #28
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2254      	movs	r2, #84	; 0x54
 8001ba8:	2100      	movs	r1, #0
 8001baa:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f7ff fde9 	bl	8001788 <LL_ADC_REG_StartConversion>
 8001bb6:	e008      	b.n	8001bca <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2254      	movs	r2, #84	; 0x54
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	18fb      	adds	r3, r7, r3
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	781b      	ldrb	r3, [r3, #0]
}
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	b004      	add	sp, #16
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	fffff0fe 	.word	0xfffff0fe

08001bdc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2254      	movs	r2, #84	; 0x54
 8001be8:	5c9b      	ldrb	r3, [r3, r2]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_ADC_Stop+0x16>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e029      	b.n	8001c46 <HAL_ADC_Stop+0x6a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2254      	movs	r2, #84	; 0x54
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001bfa:	250f      	movs	r5, #15
 8001bfc:	197c      	adds	r4, r7, r5
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f000 fa97 	bl	8002134 <ADC_ConversionStop>
 8001c06:	0003      	movs	r3, r0
 8001c08:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c0a:	197b      	adds	r3, r7, r5
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d112      	bne.n	8001c38 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c12:	197c      	adds	r4, r7, r5
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 fb46 	bl	80022a8 <ADC_Disable>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c20:	197b      	adds	r3, r7, r5
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d107      	bne.n	8001c38 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_ADC_Stop+0x74>)
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2201      	movs	r2, #1
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2254      	movs	r2, #84	; 0x54
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	781b      	ldrb	r3, [r3, #0]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	fffffefe 	.word	0xfffffefe

08001c54 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d102      	bne.n	8001c6c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c66:	2308      	movs	r3, #8
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	e00f      	b.n	8001c8c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4013      	ands	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e06c      	b.n	8001d62 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001c88:	2304      	movs	r3, #4
 8001c8a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c8c:	f7ff fbfe 	bl	800148c <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c94:	e019      	b.n	8001cca <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	d016      	beq.n	8001cca <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c9c:	f7ff fbf6 	bl	800148c <HAL_GetTick>
 8001ca0:	0002      	movs	r2, r0
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d302      	bcc.n	8001cb2 <HAL_ADC_PollForConversion+0x5e>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10b      	bne.n	8001cca <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2254      	movs	r2, #84	; 0x54
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e04b      	b.n	8001d62 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d0df      	beq.n	8001c96 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	2280      	movs	r2, #128	; 0x80
 8001cdc:	0092      	lsls	r2, r2, #2
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff fc6e 	bl	80015ca <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d02e      	beq.n	8001d50 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	7e9b      	ldrb	r3, [r3, #26]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d12a      	bne.n	8001d50 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2208      	movs	r2, #8
 8001d02:	4013      	ands	r3, r2
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d123      	bne.n	8001d50 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff fd5f 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d110      	bne.n	8001d38 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	210c      	movs	r1, #12
 8001d22:	438a      	bics	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a10      	ldr	r2, [pc, #64]	; (8001d6c <HAL_ADC_PollForConversion+0x118>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2201      	movs	r2, #1
 8001d30:	431a      	orrs	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	659a      	str	r2, [r3, #88]	; 0x58
 8001d36:	e00b      	b.n	8001d50 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	2201      	movs	r2, #1
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	7e1b      	ldrb	r3, [r3, #24]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d103      	bne.n	8001d60 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	220c      	movs	r2, #12
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	fffffefe 	.word	0xfffffefe

08001d70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d92:	2317      	movs	r3, #23
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2254      	movs	r2, #84	; 0x54
 8001da2:	5c9b      	ldrb	r3, [r3, r2]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x24>
 8001da8:	2302      	movs	r3, #2
 8001daa:	e1be      	b.n	800212a <HAL_ADC_ConfigChannel+0x3a2>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2254      	movs	r2, #84	; 0x54
 8001db0:	2101      	movs	r1, #1
 8001db2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f7ff fd09 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d000      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0x3c>
 8001dc2:	e1a1      	b.n	8002108 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d100      	bne.n	8001dce <HAL_ADC_ConfigChannel+0x46>
 8001dcc:	e152      	b.n	8002074 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691a      	ldr	r2, [r3, #16]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d004      	beq.n	8001de4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dde:	4ac2      	ldr	r2, [pc, #776]	; (80020e8 <HAL_ADC_ConfigChannel+0x360>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d108      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0019      	movs	r1, r3
 8001dee:	0010      	movs	r0, r2
 8001df0:	f7ff fc1c 	bl	800162c <LL_ADC_REG_SetSequencerChAdd>
 8001df4:	e0ed      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	211f      	movs	r1, #31
 8001e00:	400b      	ands	r3, r1
 8001e02:	210f      	movs	r1, #15
 8001e04:	4099      	lsls	r1, r3
 8001e06:	000b      	movs	r3, r1
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	025b      	lsls	r3, r3, #9
 8001e14:	0a5b      	lsrs	r3, r3, #9
 8001e16:	d105      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x9c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	221f      	movs	r2, #31
 8001e20:	4013      	ands	r3, r2
 8001e22:	e0bc      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d000      	beq.n	8001e30 <HAL_ADC_ConfigChannel+0xa8>
 8001e2e:	e0b5      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x214>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d000      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0xb4>
 8001e3a:	e0ad      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x210>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2204      	movs	r2, #4
 8001e42:	4013      	ands	r3, r2
 8001e44:	d000      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0xc0>
 8001e46:	e0a5      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x20c>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2208      	movs	r2, #8
 8001e4e:	4013      	ands	r3, r2
 8001e50:	d000      	beq.n	8001e54 <HAL_ADC_ConfigChannel+0xcc>
 8001e52:	e09d      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x208>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2210      	movs	r2, #16
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d000      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0xd8>
 8001e5e:	e095      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x204>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2220      	movs	r2, #32
 8001e66:	4013      	ands	r3, r2
 8001e68:	d000      	beq.n	8001e6c <HAL_ADC_ConfigChannel+0xe4>
 8001e6a:	e08d      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x200>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2240      	movs	r2, #64	; 0x40
 8001e72:	4013      	ands	r3, r2
 8001e74:	d000      	beq.n	8001e78 <HAL_ADC_ConfigChannel+0xf0>
 8001e76:	e085      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x1fc>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2280      	movs	r2, #128	; 0x80
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d000      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0xfc>
 8001e82:	e07d      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x1f8>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d000      	beq.n	8001e92 <HAL_ADC_ConfigChannel+0x10a>
 8001e90:	e074      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x1f4>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d000      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x118>
 8001e9e:	e06b      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x1f0>
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d000      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x126>
 8001eac:	e062      	b.n	8001f74 <HAL_ADC_ConfigChannel+0x1ec>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	011b      	lsls	r3, r3, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d000      	beq.n	8001ebc <HAL_ADC_ConfigChannel+0x134>
 8001eba:	e059      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x1e8>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d151      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1e4>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d149      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x1e0>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	01db      	lsls	r3, r3, #7
 8001edc:	4013      	ands	r3, r2
 8001ede:	d141      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x1dc>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	021b      	lsls	r3, r3, #8
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d139      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1d8>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	025b      	lsls	r3, r3, #9
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d131      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x1d4>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d129      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d0>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	02db      	lsls	r3, r3, #11
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d121      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x1cc>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d119      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1c8>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	035b      	lsls	r3, r3, #13
 8001f24:	4013      	ands	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x1c4>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	2380      	movs	r3, #128	; 0x80
 8001f2e:	039b      	lsls	r3, r3, #14
 8001f30:	4013      	ands	r3, r2
 8001f32:	d109      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x1c0>
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	03db      	lsls	r3, r3, #15
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d001      	beq.n	8001f44 <HAL_ADC_ConfigChannel+0x1bc>
 8001f40:	2316      	movs	r3, #22
 8001f42:	e02c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e02a      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f48:	2315      	movs	r3, #21
 8001f4a:	e028      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f4c:	2314      	movs	r3, #20
 8001f4e:	e026      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f50:	2313      	movs	r3, #19
 8001f52:	e024      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f54:	2312      	movs	r3, #18
 8001f56:	e022      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f58:	2311      	movs	r3, #17
 8001f5a:	e020      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	e01e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f60:	230f      	movs	r3, #15
 8001f62:	e01c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f64:	230e      	movs	r3, #14
 8001f66:	e01a      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f68:	230d      	movs	r3, #13
 8001f6a:	e018      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f6c:	230c      	movs	r3, #12
 8001f6e:	e016      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f70:	230b      	movs	r3, #11
 8001f72:	e014      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f74:	230a      	movs	r3, #10
 8001f76:	e012      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f78:	2309      	movs	r3, #9
 8001f7a:	e010      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f7c:	2308      	movs	r3, #8
 8001f7e:	e00e      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f80:	2307      	movs	r3, #7
 8001f82:	e00c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f84:	2306      	movs	r3, #6
 8001f86:	e00a      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f88:	2305      	movs	r3, #5
 8001f8a:	e008      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	e006      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f90:	2303      	movs	r3, #3
 8001f92:	e004      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x216>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	6852      	ldr	r2, [r2, #4]
 8001fa2:	201f      	movs	r0, #31
 8001fa4:	4002      	ands	r2, r0
 8001fa6:	4093      	lsls	r3, r2
 8001fa8:	000a      	movs	r2, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d808      	bhi.n	8001fd2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	001a      	movs	r2, r3
 8001fce:	f7ff fb0d 	bl	80015ec <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6819      	ldr	r1, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	001a      	movs	r2, r3
 8001fe0:	f7ff fb48 	bl	8001674 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db00      	blt.n	8001fee <HAL_ADC_ConfigChannel+0x266>
 8001fec:	e096      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fee:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff faa9 	bl	8001548 <LL_ADC_GetCommonPathInternalCh>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <HAL_ADC_ConfigChannel+0x368>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d123      	bne.n	800204c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	041b      	lsls	r3, r3, #16
 800200a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800200c:	d11e      	bne.n	800204c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	0412      	lsls	r2, r2, #16
 8002014:	4313      	orrs	r3, r2
 8002016:	4a35      	ldr	r2, [pc, #212]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 8002018:	0019      	movs	r1, r3
 800201a:	0010      	movs	r0, r2
 800201c:	f7ff fa80 	bl	8001520 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_ADC_ConfigChannel+0x36c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4934      	ldr	r1, [pc, #208]	; (80020f8 <HAL_ADC_ConfigChannel+0x370>)
 8002026:	0018      	movs	r0, r3
 8002028:	f7fe f880 	bl	800012c <__udivsi3>
 800202c:	0003      	movs	r3, r0
 800202e:	001a      	movs	r2, r3
 8002030:	0013      	movs	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	189b      	adds	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	3301      	adds	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800203c:	e002      	b.n	8002044 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	3b01      	subs	r3, #1
 8002042:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800204a:	e067      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a2a      	ldr	r2, [pc, #168]	; (80020fc <HAL_ADC_ConfigChannel+0x374>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d162      	bne.n	800211c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	03db      	lsls	r3, r3, #15
 800205c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800205e:	d15d      	bne.n	800211c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	03d2      	lsls	r2, r2, #15
 8002066:	4313      	orrs	r3, r2
 8002068:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 800206a:	0019      	movs	r1, r3
 800206c:	0010      	movs	r0, r2
 800206e:	f7ff fa57 	bl	8001520 <LL_ADC_SetCommonPathInternalCh>
 8002072:	e053      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	2380      	movs	r3, #128	; 0x80
 800207a:	061b      	lsls	r3, r3, #24
 800207c:	429a      	cmp	r2, r3
 800207e:	d004      	beq.n	800208a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002084:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <HAL_ADC_ConfigChannel+0x360>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d107      	bne.n	800209a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0019      	movs	r1, r3
 8002094:	0010      	movs	r0, r2
 8002096:	f7ff fada 	bl	800164e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	da3c      	bge.n	800211c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff fa4f 	bl	8001548 <LL_ADC_GetCommonPathInternalCh>
 80020aa:	0003      	movs	r3, r0
 80020ac:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0f      	ldr	r2, [pc, #60]	; (80020f0 <HAL_ADC_ConfigChannel+0x368>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d108      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4a11      	ldr	r2, [pc, #68]	; (8002100 <HAL_ADC_ConfigChannel+0x378>)
 80020bc:	4013      	ands	r3, r2
 80020be:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 80020c0:	0019      	movs	r1, r3
 80020c2:	0010      	movs	r0, r2
 80020c4:	f7ff fa2c 	bl	8001520 <LL_ADC_SetCommonPathInternalCh>
 80020c8:	e028      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_ADC_ConfigChannel+0x374>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d123      	bne.n	800211c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <HAL_ADC_ConfigChannel+0x37c>)
 80020d8:	4013      	ands	r3, r2
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_ADC_ConfigChannel+0x364>)
 80020dc:	0019      	movs	r1, r3
 80020de:	0010      	movs	r0, r2
 80020e0:	f7ff fa1e 	bl	8001520 <LL_ADC_SetCommonPathInternalCh>
 80020e4:	e01a      	b.n	800211c <HAL_ADC_ConfigChannel+0x394>
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	80000004 	.word	0x80000004
 80020ec:	40012708 	.word	0x40012708
 80020f0:	a4000200 	.word	0xa4000200
 80020f4:	20000000 	.word	0x20000000
 80020f8:	00030d40 	.word	0x00030d40
 80020fc:	a8000400 	.word	0xa8000400
 8002100:	ff7fffff 	.word	0xff7fffff
 8002104:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210c:	2220      	movs	r2, #32
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002114:	2317      	movs	r3, #23
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2254      	movs	r2, #84	; 0x54
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002124:	2317      	movs	r3, #23
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	781b      	ldrb	r3, [r3, #0]
}
 800212a:	0018      	movs	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	b006      	add	sp, #24
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)

08002134 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fb45 	bl	80017d0 <LL_ADC_REG_IsConversionOngoing>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d02b      	beq.n	80021a2 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0018      	movs	r0, r3
 8002150:	f7ff fb09 	bl	8001766 <LL_ADC_IsDisableOngoing>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d104      	bne.n	8002162 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	0018      	movs	r0, r3
 800215e:	f7ff fb25 	bl	80017ac <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002162:	f7ff f993 	bl	800148c <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800216a:	e014      	b.n	8002196 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800216c:	f7ff f98e 	bl	800148c <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d90d      	bls.n	8002196 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217e:	2210      	movs	r2, #16
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218a:	2201      	movs	r2, #1
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e006      	b.n	80021a4 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2204      	movs	r2, #4
 800219e:	4013      	ands	r3, r2
 80021a0:	d1e4      	bne.n	800216c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b004      	add	sp, #16
 80021aa:	bd80      	pop	{r7, pc}

080021ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff fac1 	bl	8001744 <LL_ADC_IsEnabled>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d162      	bne.n	800228c <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a32      	ldr	r2, [pc, #200]	; (8002298 <ADC_Enable+0xec>)
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00d      	beq.n	80021ee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	2210      	movs	r2, #16
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e2:	2201      	movs	r2, #1
 80021e4:	431a      	orrs	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e04f      	b.n	800228e <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f7ff fa82 	bl	80016fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80021f8:	4b28      	ldr	r3, [pc, #160]	; (800229c <ADC_Enable+0xf0>)
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff f9a4 	bl	8001548 <LL_ADC_GetCommonPathInternalCh>
 8002200:	0002      	movs	r2, r0
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	4013      	ands	r3, r2
 8002208:	d00f      	beq.n	800222a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800220a:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <ADC_Enable+0xf4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4925      	ldr	r1, [pc, #148]	; (80022a4 <ADC_Enable+0xf8>)
 8002210:	0018      	movs	r0, r3
 8002212:	f7fd ff8b 	bl	800012c <__udivsi3>
 8002216:	0003      	movs	r3, r0
 8002218:	3301      	adds	r3, #1
 800221a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800221c:	e002      	b.n	8002224 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	3b01      	subs	r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f9      	bne.n	800221e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7e5b      	ldrb	r3, [r3, #25]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d02c      	beq.n	800228c <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002232:	f7ff f92b 	bl	800148c <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800223a:	e020      	b.n	800227e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff fa7f 	bl	8001744 <LL_ADC_IsEnabled>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d104      	bne.n	8002254 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff fa54 	bl	80016fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002254:	f7ff f91a 	bl	800148c <HAL_GetTick>
 8002258:	0002      	movs	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d90d      	bls.n	800227e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	2210      	movs	r2, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002272:	2201      	movs	r2, #1
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2201      	movs	r2, #1
 8002286:	4013      	ands	r3, r2
 8002288:	2b01      	cmp	r3, #1
 800228a:	d1d7      	bne.n	800223c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	0018      	movs	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	b004      	add	sp, #16
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	80000017 	.word	0x80000017
 800229c:	40012708 	.word	0x40012708
 80022a0:	20000000 	.word	0x20000000
 80022a4:	00030d40 	.word	0x00030d40

080022a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff fa56 	bl	8001766 <LL_ADC_IsDisableOngoing>
 80022ba:	0003      	movs	r3, r0
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff fa3e 	bl	8001744 <LL_ADC_IsEnabled>
 80022c8:	1e03      	subs	r3, r0, #0
 80022ca:	d040      	beq.n	800234e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d13d      	bne.n	800234e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2205      	movs	r2, #5
 80022da:	4013      	ands	r3, r2
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d10d      	bne.n	80022fc <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff fa1b 	bl	8001720 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2203      	movs	r2, #3
 80022f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022f2:	f7ff f8cb 	bl	800148c <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80022fa:	e022      	b.n	8002342 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002300:	2210      	movs	r2, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2201      	movs	r2, #1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e01b      	b.n	8002350 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002318:	f7ff f8b8 	bl	800148c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d90d      	bls.n	8002342 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	2210      	movs	r2, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e006      	b.n	8002350 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	d1e4      	bne.n	8002318 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	0002      	movs	r2, r0
 8002360:	1dfb      	adds	r3, r7, #7
 8002362:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b7f      	cmp	r3, #127	; 0x7f
 800236a:	d809      	bhi.n	8002380 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236c:	1dfb      	adds	r3, r7, #7
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	001a      	movs	r2, r3
 8002372:	231f      	movs	r3, #31
 8002374:	401a      	ands	r2, r3
 8002376:	4b04      	ldr	r3, [pc, #16]	; (8002388 <__NVIC_EnableIRQ+0x30>)
 8002378:	2101      	movs	r1, #1
 800237a:	4091      	lsls	r1, r2
 800237c:	000a      	movs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	e000e100 	.word	0xe000e100

0800238c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b7f      	cmp	r3, #127	; 0x7f
 80023a0:	d828      	bhi.n	80023f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a2:	4a2f      	ldr	r2, [pc, #188]	; (8002460 <__NVIC_SetPriority+0xd4>)
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	b25b      	sxtb	r3, r3
 80023aa:	089b      	lsrs	r3, r3, #2
 80023ac:	33c0      	adds	r3, #192	; 0xc0
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	589b      	ldr	r3, [r3, r2]
 80023b2:	1dfa      	adds	r2, r7, #7
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	0011      	movs	r1, r2
 80023b8:	2203      	movs	r2, #3
 80023ba:	400a      	ands	r2, r1
 80023bc:	00d2      	lsls	r2, r2, #3
 80023be:	21ff      	movs	r1, #255	; 0xff
 80023c0:	4091      	lsls	r1, r2
 80023c2:	000a      	movs	r2, r1
 80023c4:	43d2      	mvns	r2, r2
 80023c6:	401a      	ands	r2, r3
 80023c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	019b      	lsls	r3, r3, #6
 80023ce:	22ff      	movs	r2, #255	; 0xff
 80023d0:	401a      	ands	r2, r3
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	2303      	movs	r3, #3
 80023da:	4003      	ands	r3, r0
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e0:	481f      	ldr	r0, [pc, #124]	; (8002460 <__NVIC_SetPriority+0xd4>)
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	430a      	orrs	r2, r1
 80023ec:	33c0      	adds	r3, #192	; 0xc0
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023f2:	e031      	b.n	8002458 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <__NVIC_SetPriority+0xd8>)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	0019      	movs	r1, r3
 80023fc:	230f      	movs	r3, #15
 80023fe:	400b      	ands	r3, r1
 8002400:	3b08      	subs	r3, #8
 8002402:	089b      	lsrs	r3, r3, #2
 8002404:	3306      	adds	r3, #6
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	18d3      	adds	r3, r2, r3
 800240a:	3304      	adds	r3, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1dfa      	adds	r2, r7, #7
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	0011      	movs	r1, r2
 8002414:	2203      	movs	r2, #3
 8002416:	400a      	ands	r2, r1
 8002418:	00d2      	lsls	r2, r2, #3
 800241a:	21ff      	movs	r1, #255	; 0xff
 800241c:	4091      	lsls	r1, r2
 800241e:	000a      	movs	r2, r1
 8002420:	43d2      	mvns	r2, r2
 8002422:	401a      	ands	r2, r3
 8002424:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	019b      	lsls	r3, r3, #6
 800242a:	22ff      	movs	r2, #255	; 0xff
 800242c:	401a      	ands	r2, r3
 800242e:	1dfb      	adds	r3, r7, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	0018      	movs	r0, r3
 8002434:	2303      	movs	r3, #3
 8002436:	4003      	ands	r3, r0
 8002438:	00db      	lsls	r3, r3, #3
 800243a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <__NVIC_SetPriority+0xd8>)
 800243e:	1dfb      	adds	r3, r7, #7
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	001c      	movs	r4, r3
 8002444:	230f      	movs	r3, #15
 8002446:	4023      	ands	r3, r4
 8002448:	3b08      	subs	r3, #8
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	430a      	orrs	r2, r1
 800244e:	3306      	adds	r3, #6
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	18c3      	adds	r3, r0, r3
 8002454:	3304      	adds	r3, #4
 8002456:	601a      	str	r2, [r3, #0]
}
 8002458:	46c0      	nop			; (mov r8, r8)
 800245a:	46bd      	mov	sp, r7
 800245c:	b003      	add	sp, #12
 800245e:	bd90      	pop	{r4, r7, pc}
 8002460:	e000e100 	.word	0xe000e100
 8002464:	e000ed00 	.word	0xe000ed00

08002468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1e5a      	subs	r2, r3, #1
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	045b      	lsls	r3, r3, #17
 8002478:	429a      	cmp	r2, r3
 800247a:	d301      	bcc.n	8002480 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247c:	2301      	movs	r3, #1
 800247e:	e010      	b.n	80024a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <SysTick_Config+0x44>)
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	3a01      	subs	r2, #1
 8002486:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002488:	2301      	movs	r3, #1
 800248a:	425b      	negs	r3, r3
 800248c:	2103      	movs	r1, #3
 800248e:	0018      	movs	r0, r3
 8002490:	f7ff ff7c 	bl	800238c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x44>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x44>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b002      	add	sp, #8
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	210f      	movs	r1, #15
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	1c02      	adds	r2, r0, #0
 80024c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80024c2:	68ba      	ldr	r2, [r7, #8]
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b25b      	sxtb	r3, r3
 80024ca:	0011      	movs	r1, r2
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ff5d 	bl	800238c <__NVIC_SetPriority>
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	0002      	movs	r2, r0
 80024e2:	1dfb      	adds	r3, r7, #7
 80024e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e6:	1dfb      	adds	r3, r7, #7
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	b25b      	sxtb	r3, r3
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff ff33 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f7ff ffaf 	bl	8002468 <SysTick_Config>
 800250a:	0003      	movs	r3, r0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002522:	e153      	b.n	80027cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4091      	lsls	r1, r2
 800252e:	000a      	movs	r2, r1
 8002530:	4013      	ands	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d100      	bne.n	800253c <HAL_GPIO_Init+0x28>
 800253a:	e144      	b.n	80027c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x38>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b12      	cmp	r3, #18
 800254a:	d125      	bne.n	8002598 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	08da      	lsrs	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3208      	adds	r2, #8
 8002554:	0092      	lsls	r2, r2, #2
 8002556:	58d3      	ldr	r3, [r2, r3]
 8002558:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2207      	movs	r2, #7
 800255e:	4013      	ands	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	220f      	movs	r2, #15
 8002564:	409a      	lsls	r2, r3
 8002566:	0013      	movs	r3, r2
 8002568:	43da      	mvns	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	4013      	ands	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	220f      	movs	r2, #15
 8002576:	401a      	ands	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	2107      	movs	r1, #7
 800257c:	400b      	ands	r3, r1
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	409a      	lsls	r2, r3
 8002582:	0013      	movs	r3, r2
 8002584:	697a      	ldr	r2, [r7, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	43da      	mvns	r2, r3
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4013      	ands	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2203      	movs	r2, #3
 80025b6:	401a      	ands	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	409a      	lsls	r2, r3
 80025be:	0013      	movs	r3, r2
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d00b      	beq.n	80025ec <HAL_GPIO_Init+0xd8>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d007      	beq.n	80025ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025e0:	2b11      	cmp	r3, #17
 80025e2:	d003      	beq.n	80025ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b12      	cmp	r3, #18
 80025ea:	d130      	bne.n	800264e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	2203      	movs	r2, #3
 80025f8:	409a      	lsls	r2, r3
 80025fa:	0013      	movs	r3, r2
 80025fc:	43da      	mvns	r2, r3
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	4013      	ands	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	409a      	lsls	r2, r3
 800260e:	0013      	movs	r3, r2
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4313      	orrs	r3, r2
 8002614:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002622:	2201      	movs	r2, #1
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	43da      	mvns	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4013      	ands	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	091b      	lsrs	r3, r3, #4
 8002638:	2201      	movs	r2, #1
 800263a:	401a      	ands	r2, r3
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	409a      	lsls	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b03      	cmp	r3, #3
 8002654:	d017      	beq.n	8002686 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	409a      	lsls	r2, r3
 8002664:	0013      	movs	r3, r2
 8002666:	43da      	mvns	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4013      	ands	r3, r2
 800266c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	409a      	lsls	r2, r3
 8002678:	0013      	movs	r3, r2
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	2380      	movs	r3, #128	; 0x80
 800268c:	055b      	lsls	r3, r3, #21
 800268e:	4013      	ands	r3, r2
 8002690:	d100      	bne.n	8002694 <HAL_GPIO_Init+0x180>
 8002692:	e098      	b.n	80027c6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002694:	4a53      	ldr	r2, [pc, #332]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	089b      	lsrs	r3, r3, #2
 800269a:	3318      	adds	r3, #24
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	589b      	ldr	r3, [r3, r2]
 80026a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	2203      	movs	r2, #3
 80026a6:	4013      	ands	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	220f      	movs	r2, #15
 80026ac:	409a      	lsls	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	43da      	mvns	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	4013      	ands	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	23a0      	movs	r3, #160	; 0xa0
 80026bc:	05db      	lsls	r3, r3, #23
 80026be:	429a      	cmp	r2, r3
 80026c0:	d019      	beq.n	80026f6 <HAL_GPIO_Init+0x1e2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a48      	ldr	r2, [pc, #288]	; (80027e8 <HAL_GPIO_Init+0x2d4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d013      	beq.n	80026f2 <HAL_GPIO_Init+0x1de>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a47      	ldr	r2, [pc, #284]	; (80027ec <HAL_GPIO_Init+0x2d8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00d      	beq.n	80026ee <HAL_GPIO_Init+0x1da>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a46      	ldr	r2, [pc, #280]	; (80027f0 <HAL_GPIO_Init+0x2dc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d007      	beq.n	80026ea <HAL_GPIO_Init+0x1d6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a45      	ldr	r2, [pc, #276]	; (80027f4 <HAL_GPIO_Init+0x2e0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d101      	bne.n	80026e6 <HAL_GPIO_Init+0x1d2>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x1e4>
 80026f6:	2300      	movs	r3, #0
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	2103      	movs	r1, #3
 80026fc:	400a      	ands	r2, r1
 80026fe:	00d2      	lsls	r2, r2, #3
 8002700:	4093      	lsls	r3, r2
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002708:	4936      	ldr	r1, [pc, #216]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3318      	adds	r3, #24
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002716:	4a33      	ldr	r2, [pc, #204]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002718:	2380      	movs	r3, #128	; 0x80
 800271a:	58d3      	ldr	r3, [r2, r3]
 800271c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	43da      	mvns	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	4013      	ands	r3, r2
 8002726:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	025b      	lsls	r3, r3, #9
 8002730:	4013      	ands	r3, r2
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800273c:	4929      	ldr	r1, [pc, #164]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002744:	4a27      	ldr	r2, [pc, #156]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002746:	2384      	movs	r3, #132	; 0x84
 8002748:	58d3      	ldr	r3, [r2, r3]
 800274a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43da      	mvns	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	029b      	lsls	r3, r3, #10
 800275e:	4013      	ands	r3, r2
 8002760:	d003      	beq.n	800276a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4313      	orrs	r3, r2
 8002768:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800276a:	491e      	ldr	r1, [pc, #120]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800276c:	2284      	movs	r2, #132	; 0x84
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	43da      	mvns	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	4013      	ands	r3, r2
 8002780:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	035b      	lsls	r3, r3, #13
 800278a:	4013      	ands	r3, r2
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800279c:	4b11      	ldr	r3, [pc, #68]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	43da      	mvns	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4013      	ands	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	2380      	movs	r3, #128	; 0x80
 80027b2:	039b      	lsls	r3, r3, #14
 80027b4:	4013      	ands	r3, r2
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4313      	orrs	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_GPIO_Init+0x2d0>)
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	3301      	adds	r3, #1
 80027ca:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	40da      	lsrs	r2, r3
 80027d4:	1e13      	subs	r3, r2, #0
 80027d6:	d000      	beq.n	80027da <HAL_GPIO_Init+0x2c6>
 80027d8:	e6a4      	b.n	8002524 <HAL_GPIO_Init+0x10>
  }
}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	b006      	add	sp, #24
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021800 	.word	0x40021800
 80027e8:	50000400 	.word	0x50000400
 80027ec:	50000800 	.word	0x50000800
 80027f0:	50000c00 	.word	0x50000c00
 80027f4:	50001400 	.word	0x50001400

080027f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	000a      	movs	r2, r1
 8002802:	1cbb      	adds	r3, r7, #2
 8002804:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	1cba      	adds	r2, r7, #2
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	4013      	ands	r3, r2
 8002810:	d004      	beq.n	800281c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2201      	movs	r2, #1
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e003      	b.n	8002824 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800281c:	230f      	movs	r3, #15
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002824:	230f      	movs	r3, #15
 8002826:	18fb      	adds	r3, r7, r3
 8002828:	781b      	ldrb	r3, [r3, #0]
}
 800282a:	0018      	movs	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	0008      	movs	r0, r1
 800283c:	0011      	movs	r1, r2
 800283e:	1cbb      	adds	r3, r7, #2
 8002840:	1c02      	adds	r2, r0, #0
 8002842:	801a      	strh	r2, [r3, #0]
 8002844:	1c7b      	adds	r3, r7, #1
 8002846:	1c0a      	adds	r2, r1, #0
 8002848:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800284a:	1c7b      	adds	r3, r7, #1
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002852:	1cbb      	adds	r3, r7, #2
 8002854:	881a      	ldrh	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800285a:	e003      	b.n	8002864 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800285c:	1cbb      	adds	r3, r7, #2
 800285e:	881a      	ldrh	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002864:	46c0      	nop			; (mov r8, r8)
 8002866:	46bd      	mov	sp, r7
 8002868:	b002      	add	sp, #8
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	0002      	movs	r2, r0
 8002874:	1dbb      	adds	r3, r7, #6
 8002876:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002878:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	1dba      	adds	r2, r7, #6
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	4013      	ands	r3, r2
 8002882:	d008      	beq.n	8002896 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002884:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002886:	1dba      	adds	r2, r7, #6
 8002888:	8812      	ldrh	r2, [r2, #0]
 800288a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800288c:	1dbb      	adds	r3, r7, #6
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	0018      	movs	r0, r3
 8002892:	f7fd fdab 	bl	80003ec <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	1dba      	adds	r2, r7, #6
 800289c:	8812      	ldrh	r2, [r2, #0]
 800289e:	4013      	ands	r3, r2
 80028a0:	d008      	beq.n	80028b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80028a4:	1dba      	adds	r2, r7, #6
 80028a6:	8812      	ldrh	r2, [r2, #0]
 80028a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80028aa:	1dbb      	adds	r3, r7, #6
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fd fdd2 	bl	8000458 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b002      	add	sp, #8
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021800 	.word	0x40021800

080028c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	000a      	movs	r2, r1
 80028ca:	1cfb      	adds	r3, r7, #3
 80028cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HAL_PWR_EnterSTOPMode+0x4c>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_PWR_EnterSTOPMode+0x4c>)
 80028d4:	2107      	movs	r1, #7
 80028d6:	438a      	bics	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_PWR_EnterSTOPMode+0x50>)
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	4b0c      	ldr	r3, [pc, #48]	; (8002910 <HAL_PWR_EnterSTOPMode+0x50>)
 80028e0:	2104      	movs	r1, #4
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80028e6:	1cfb      	adds	r3, r7, #3
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d101      	bne.n	80028f2 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80028ee:	bf30      	wfi
 80028f0:	e002      	b.n	80028f8 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80028f2:	bf40      	sev
    __WFE();
 80028f4:	bf20      	wfe
    __WFE();
 80028f6:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80028f8:	4b05      	ldr	r3, [pc, #20]	; (8002910 <HAL_PWR_EnterSTOPMode+0x50>)
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_PWR_EnterSTOPMode+0x50>)
 80028fe:	2104      	movs	r1, #4
 8002900:	438a      	bics	r2, r1
 8002902:	611a      	str	r2, [r3, #16]
}
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40007000 	.word	0x40007000
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e1d0      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2201      	movs	r2, #1
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCC_OscConfig+0x1e>
 8002930:	e069      	b.n	8002a06 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002932:	4bc8      	ldr	r3, [pc, #800]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2238      	movs	r2, #56	; 0x38
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b08      	cmp	r3, #8
 8002940:	d105      	bne.n	800294e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d15d      	bne.n	8002a06 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e1bc      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	025b      	lsls	r3, r3, #9
 8002956:	429a      	cmp	r2, r3
 8002958:	d107      	bne.n	800296a <HAL_RCC_OscConfig+0x56>
 800295a:	4bbe      	ldr	r3, [pc, #760]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4bbd      	ldr	r3, [pc, #756]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0249      	lsls	r1, r1, #9
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e020      	b.n	80029ac <HAL_RCC_OscConfig+0x98>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	23a0      	movs	r3, #160	; 0xa0
 8002970:	02db      	lsls	r3, r3, #11
 8002972:	429a      	cmp	r2, r3
 8002974:	d10e      	bne.n	8002994 <HAL_RCC_OscConfig+0x80>
 8002976:	4bb7      	ldr	r3, [pc, #732]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4bb6      	ldr	r3, [pc, #728]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 800297c:	2180      	movs	r1, #128	; 0x80
 800297e:	02c9      	lsls	r1, r1, #11
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	4bb3      	ldr	r3, [pc, #716]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4bb2      	ldr	r3, [pc, #712]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 800298a:	2180      	movs	r1, #128	; 0x80
 800298c:	0249      	lsls	r1, r1, #9
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x98>
 8002994:	4baf      	ldr	r3, [pc, #700]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	4bae      	ldr	r3, [pc, #696]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 800299a:	49af      	ldr	r1, [pc, #700]	; (8002c58 <HAL_RCC_OscConfig+0x344>)
 800299c:	400a      	ands	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4bac      	ldr	r3, [pc, #688]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4bab      	ldr	r3, [pc, #684]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 80029a6:	49ad      	ldr	r1, [pc, #692]	; (8002c5c <HAL_RCC_OscConfig+0x348>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d014      	beq.n	80029de <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fd6a 	bl	800148c <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80029be:	f7fe fd65 	bl	800148c <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	; 0x64
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e17b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029d0:	4ba0      	ldr	r3, [pc, #640]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	4013      	ands	r3, r2
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0xaa>
 80029dc:	e013      	b.n	8002a06 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029de:	f7fe fd55 	bl	800148c <HAL_GetTick>
 80029e2:	0003      	movs	r3, r0
 80029e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80029e8:	f7fe fd50 	bl	800148c <HAL_GetTick>
 80029ec:	0002      	movs	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b64      	cmp	r3, #100	; 0x64
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e166      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029fa:	4b96      	ldr	r3, [pc, #600]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	029b      	lsls	r3, r3, #10
 8002a02:	4013      	ands	r3, r2
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d100      	bne.n	8002a12 <HAL_RCC_OscConfig+0xfe>
 8002a10:	e086      	b.n	8002b20 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a12:	4b90      	ldr	r3, [pc, #576]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2238      	movs	r2, #56	; 0x38
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d12f      	bne.n	8002a82 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e14c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2e:	4b89      	ldr	r3, [pc, #548]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a8b      	ldr	r2, [pc, #556]	; (8002c60 <HAL_RCC_OscConfig+0x34c>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	021a      	lsls	r2, r3, #8
 8002a3e:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a40:	430a      	orrs	r2, r1
 8002a42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d112      	bne.n	8002a70 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a4a:	4b82      	ldr	r3, [pc, #520]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a85      	ldr	r2, [pc, #532]	; (8002c64 <HAL_RCC_OscConfig+0x350>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	0019      	movs	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	4b7e      	ldr	r3, [pc, #504]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002a5e:	4b7d      	ldr	r3, [pc, #500]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	0adb      	lsrs	r3, r3, #11
 8002a64:	2207      	movs	r2, #7
 8002a66:	4013      	ands	r3, r2
 8002a68:	4a7f      	ldr	r2, [pc, #508]	; (8002c68 <HAL_RCC_OscConfig+0x354>)
 8002a6a:	40da      	lsrs	r2, r3
 8002a6c:	4b7f      	ldr	r3, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x358>)
 8002a6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002a70:	4b7f      	ldr	r3, [pc, #508]	; (8002c70 <HAL_RCC_OscConfig+0x35c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0018      	movs	r0, r3
 8002a76:	f7fe fcad 	bl	80013d4 <HAL_InitTick>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d050      	beq.n	8002b20 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e122      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d030      	beq.n	8002aec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002a8a:	4b72      	ldr	r3, [pc, #456]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a75      	ldr	r2, [pc, #468]	; (8002c64 <HAL_RCC_OscConfig+0x350>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	0019      	movs	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691a      	ldr	r2, [r3, #16]
 8002a98:	4b6e      	ldr	r3, [pc, #440]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4b6c      	ldr	r3, [pc, #432]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002aa4:	2180      	movs	r1, #128	; 0x80
 8002aa6:	0049      	lsls	r1, r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fcee 	bl	800148c <HAL_GetTick>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002ab6:	f7fe fce9 	bl	800148c <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0ff      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac8:	4b62      	ldr	r3, [pc, #392]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d0f0      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad4:	4b5f      	ldr	r3, [pc, #380]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <HAL_RCC_OscConfig+0x34c>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e019      	b.n	8002b20 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002aec:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b58      	ldr	r3, [pc, #352]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002af2:	4960      	ldr	r1, [pc, #384]	; (8002c74 <HAL_RCC_OscConfig+0x360>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe fcc8 	bl	800148c <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002b02:	f7fe fcc3 	bl	800148c <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0d9      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b14:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2208      	movs	r2, #8
 8002b26:	4013      	ands	r3, r2
 8002b28:	d042      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002b2a:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2238      	movs	r2, #56	; 0x38
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b18      	cmp	r3, #24
 8002b34:	d105      	bne.n	8002b42 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d138      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e0c2      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d019      	beq.n	8002b7e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b42      	ldr	r3, [pc, #264]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b4c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	430a      	orrs	r2, r1
 8002b54:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b56:	f7fe fc99 	bl	800148c <HAL_GetTick>
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b60:	f7fe fc94 	bl	800148c <HAL_GetTick>
 8002b64:	0002      	movs	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e0aa      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b72:	4b38      	ldr	r3, [pc, #224]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	2202      	movs	r2, #2
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d0f1      	beq.n	8002b60 <HAL_RCC_OscConfig+0x24c>
 8002b7c:	e018      	b.n	8002bb0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002b7e:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b82:	4b34      	ldr	r3, [pc, #208]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002b84:	2101      	movs	r1, #1
 8002b86:	438a      	bics	r2, r1
 8002b88:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8a:	f7fe fc7f 	bl	800148c <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002b94:	f7fe fc7a 	bl	800148c <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e090      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002baa:	2202      	movs	r2, #2
 8002bac:	4013      	ands	r3, r2
 8002bae:	d1f1      	bne.n	8002b94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	d100      	bne.n	8002bbc <HAL_RCC_OscConfig+0x2a8>
 8002bba:	e084      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbc:	230f      	movs	r3, #15
 8002bbe:	18fb      	adds	r3, r7, r3
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2238      	movs	r2, #56	; 0x38
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b20      	cmp	r3, #32
 8002bce:	d106      	bne.n	8002bde <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d000      	beq.n	8002bda <HAL_RCC_OscConfig+0x2c6>
 8002bd8:	e075      	b.n	8002cc6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e074      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x2e0>
 8002be6:	4b1b      	ldr	r3, [pc, #108]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bea:	4b1a      	ldr	r3, [pc, #104]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002bec:	2101      	movs	r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bf2:	e01c      	b.n	8002c2e <HAL_RCC_OscConfig+0x31a>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x302>
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c00:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c02:	2104      	movs	r1, #4
 8002c04:	430a      	orrs	r2, r1
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	430a      	orrs	r2, r1
 8002c12:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c14:	e00b      	b.n	8002c2e <HAL_RCC_OscConfig+0x31a>
 8002c16:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c1c:	2101      	movs	r1, #1
 8002c1e:	438a      	bics	r2, r1
 8002c20:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c22:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_RCC_OscConfig+0x340>)
 8002c28:	2104      	movs	r1, #4
 8002c2a:	438a      	bics	r2, r1
 8002c2c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d028      	beq.n	8002c88 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7fe fc29 	bl	800148c <HAL_GetTick>
 8002c3a:	0003      	movs	r3, r0
 8002c3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c3e:	e01d      	b.n	8002c7c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fc24 	bl	800148c <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	4a0b      	ldr	r2, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x364>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d915      	bls.n	8002c7c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e039      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
 8002c54:	40021000 	.word	0x40021000
 8002c58:	fffeffff 	.word	0xfffeffff
 8002c5c:	fffbffff 	.word	0xfffbffff
 8002c60:	ffff80ff 	.word	0xffff80ff
 8002c64:	ffffc7ff 	.word	0xffffc7ff
 8002c68:	02dc6c00 	.word	0x02dc6c00
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004
 8002c74:	fffffeff 	.word	0xfffffeff
 8002c78:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_RCC_OscConfig+0x3bc>)
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d0dc      	beq.n	8002c40 <HAL_RCC_OscConfig+0x32c>
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fc00 	bl	800148c <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002c90:	e009      	b.n	8002ca6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7fe fbfb 	bl	800148c <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x3c0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e010      	b.n	8002cc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_OscConfig+0x3bc>)
 8002ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002caa:	2202      	movs	r2, #2
 8002cac:	4013      	ands	r3, r2
 8002cae:	d1f0      	bne.n	8002c92 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002cb0:	230f      	movs	r3, #15
 8002cb2:	18fb      	adds	r3, r7, r3
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <HAL_RCC_OscConfig+0x3bc>)
 8002cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cbe:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_OscConfig+0x3bc>)
 8002cc0:	4905      	ldr	r1, [pc, #20]	; (8002cd8 <HAL_RCC_OscConfig+0x3c4>)
 8002cc2:	400a      	ands	r2, r1
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b006      	add	sp, #24
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	00001388 	.word	0x00001388
 8002cd8:	efffffff 	.word	0xefffffff

08002cdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0e9      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d91e      	bls.n	8002d3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b73      	ldr	r3, [pc, #460]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2207      	movs	r2, #7
 8002d04:	4393      	bics	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d10:	f7fe fbbc 	bl	800148c <HAL_GetTick>
 8002d14:	0003      	movs	r3, r0
 8002d16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d18:	e009      	b.n	8002d2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1a:	f7fe fbb7 	bl	800148c <HAL_GetTick>
 8002d1e:	0002      	movs	r2, r0
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	4a6a      	ldr	r2, [pc, #424]	; (8002ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e0ca      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d2e:	4b67      	ldr	r3, [pc, #412]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2207      	movs	r2, #7
 8002d34:	4013      	ands	r3, r2
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d1ee      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2202      	movs	r2, #2
 8002d42:	4013      	ands	r3, r2
 8002d44:	d017      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	d008      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d50:	4b60      	ldr	r3, [pc, #384]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_RCC_ClockConfig+0x1fc>)
 8002d56:	401a      	ands	r2, r3
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d5a:	21b0      	movs	r1, #176	; 0xb0
 8002d5c:	0109      	lsls	r1, r1, #4
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	4a5d      	ldr	r2, [pc, #372]	; (8002edc <HAL_RCC_ClockConfig+0x200>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	4b58      	ldr	r3, [pc, #352]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d72:	430a      	orrs	r2, r1
 8002d74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d055      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002d80:	4b54      	ldr	r3, [pc, #336]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	221c      	movs	r2, #28
 8002d86:	4393      	bics	r3, r2
 8002d88:	0019      	movs	r1, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	2380      	movs	r3, #128	; 0x80
 8002da2:	029b      	lsls	r3, r3, #10
 8002da4:	4013      	ands	r3, r2
 8002da6:	d11f      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e08b      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d107      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002db4:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d113      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e07f      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d106      	bne.n	8002dda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002dcc:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d108      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e074      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dda:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dde:	2202      	movs	r2, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e06d      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002de8:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	2207      	movs	r2, #7
 8002dee:	4393      	bics	r3, r2
 8002df0:	0019      	movs	r1, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	4b37      	ldr	r3, [pc, #220]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dfc:	f7fe fb46 	bl	800148c <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e04:	e009      	b.n	8002e1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e06:	f7fe fb41 	bl	800148c <HAL_GetTick>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	4a2f      	ldr	r2, [pc, #188]	; (8002ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e054      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1a:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2238      	movs	r2, #56	; 0x38
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d1ec      	bne.n	8002e06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2207      	movs	r2, #7
 8002e32:	4013      	ands	r3, r2
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d21e      	bcs.n	8002e78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2207      	movs	r2, #7
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	4b21      	ldr	r3, [pc, #132]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e4c:	f7fe fb1e 	bl	800148c <HAL_GetTick>
 8002e50:	0003      	movs	r3, r0
 8002e52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e54:	e009      	b.n	8002e6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002e56:	f7fe fb19 	bl	800148c <HAL_GetTick>
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <HAL_RCC_ClockConfig+0x1f4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e02c      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e6a:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_ClockConfig+0x1f0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2207      	movs	r2, #7
 8002e70:	4013      	ands	r3, r2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ee      	bne.n	8002e56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e82:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	4a16      	ldr	r2, [pc, #88]	; (8002ee0 <HAL_RCC_ClockConfig+0x204>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e96:	f000 f82b 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8002e9a:	0001      	movs	r1, r0
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_ClockConfig+0x208>)
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	58d3      	ldr	r3, [r2, r3]
 8002eac:	221f      	movs	r2, #31
 8002eae:	4013      	ands	r3, r2
 8002eb0:	000a      	movs	r2, r1
 8002eb2:	40da      	lsrs	r2, r3
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <HAL_RCC_ClockConfig+0x20c>)
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCC_ClockConfig+0x210>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fe fa89 	bl	80013d4 <HAL_InitTick>
 8002ec2:	0003      	movs	r3, r0
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b004      	add	sp, #16
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40022000 	.word	0x40022000
 8002ed0:	00001388 	.word	0x00001388
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	ffff84ff 	.word	0xffff84ff
 8002edc:	fffff0ff 	.word	0xfffff0ff
 8002ee0:	ffff8fff 	.word	0xffff8fff
 8002ee4:	08005bec 	.word	0x08005bec
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000004 	.word	0x20000004

08002ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x78>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2238      	movs	r2, #56	; 0x38
 8002efc:	4013      	ands	r3, r2
 8002efe:	d10f      	bne.n	8002f20 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	0adb      	lsrs	r3, r3, #11
 8002f06:	2207      	movs	r2, #7
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	4815      	ldr	r0, [pc, #84]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f16:	f7fd f909 	bl	800012c <__udivsi3>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	e01e      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2238      	movs	r2, #56	; 0x38
 8002f26:	4013      	ands	r3, r2
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d102      	bne.n	8002f32 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f2c:	4b0f      	ldr	r3, [pc, #60]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002f2e:	607b      	str	r3, [r7, #4]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2238      	movs	r2, #56	; 0x38
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d103      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f3e:	2380      	movs	r3, #128	; 0x80
 8002f40:	021b      	lsls	r3, r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	e00b      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x78>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2238      	movs	r2, #56	; 0x38
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b18      	cmp	r3, #24
 8002f50:	d103      	bne.n	8002f5a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002f52:	23fa      	movs	r3, #250	; 0xfa
 8002f54:	01db      	lsls	r3, r3, #7
 8002f56:	607b      	str	r3, [r7, #4]
 8002f58:	e001      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002f5e:	687b      	ldr	r3, [r7, #4]
}
 8002f60:	0018      	movs	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	b002      	add	sp, #8
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	02dc6c00 	.word	0x02dc6c00

08002f70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	20000000 	.word	0x20000000

08002f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002f88:	f7ff fff2 	bl	8002f70 <HAL_RCC_GetHCLKFreq>
 8002f8c:	0001      	movs	r1, r0
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	0b1b      	lsrs	r3, r3, #12
 8002f94:	2207      	movs	r2, #7
 8002f96:	401a      	ands	r2, r3
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	58d3      	ldr	r3, [r2, r3]
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	40d9      	lsrs	r1, r3
 8002fa4:	000b      	movs	r3, r1
}
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	08005c2c 	.word	0x08005c2c

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002fbc:	2313      	movs	r3, #19
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	2380      	movs	r3, #128	; 0x80
 8002fd2:	029b      	lsls	r3, r3, #10
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d100      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002fd8:	e079      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fda:	2011      	movs	r0, #17
 8002fdc:	183b      	adds	r3, r7, r0
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fe2:	4b64      	ldr	r3, [pc, #400]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	055b      	lsls	r3, r3, #21
 8002fea:	4013      	ands	r3, r2
 8002fec:	d110      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ff4:	2180      	movs	r1, #128	; 0x80
 8002ff6:	0549      	lsls	r1, r1, #21
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ffc:	4b5d      	ldr	r3, [pc, #372]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ffe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	055b      	lsls	r3, r3, #21
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800300a:	183b      	adds	r3, r7, r0
 800300c:	2201      	movs	r2, #1
 800300e:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003010:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003014:	23c0      	movs	r3, #192	; 0xc0
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4013      	ands	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d019      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d014      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800302c:	4b51      	ldr	r3, [pc, #324]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	4a51      	ldr	r2, [pc, #324]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003032:	4013      	ands	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003036:	4b4f      	ldr	r3, [pc, #316]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800303a:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	0249      	lsls	r1, r1, #9
 8003040:	430a      	orrs	r2, r1
 8003042:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003048:	4b4a      	ldr	r3, [pc, #296]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800304a:	494c      	ldr	r1, [pc, #304]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800304c:	400a      	ands	r2, r1
 800304e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003050:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d016      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7fe fa15 	bl	800148c <HAL_GetTick>
 8003062:	0003      	movs	r3, r0
 8003064:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003066:	e00c      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fa10 	bl	800148c <HAL_GetTick>
 800306c:	0002      	movs	r2, r0
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	4a43      	ldr	r2, [pc, #268]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d904      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003078:	2313      	movs	r3, #19
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2203      	movs	r2, #3
 800307e:	701a      	strb	r2, [r3, #0]
          break;
 8003080:	e004      	b.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d0ed      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800308c:	2313      	movs	r3, #19
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309a:	4a37      	ldr	r2, [pc, #220]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800309c:	4013      	ands	r3, r2
 800309e:	0019      	movs	r1, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	699a      	ldr	r2, [r3, #24]
 80030a4:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030a6:	430a      	orrs	r2, r1
 80030a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030aa:	e005      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ac:	2312      	movs	r3, #18
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	2213      	movs	r2, #19
 80030b2:	18ba      	adds	r2, r7, r2
 80030b4:	7812      	ldrb	r2, [r2, #0]
 80030b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b8:	2311      	movs	r3, #17
 80030ba:	18fb      	adds	r3, r7, r3
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d105      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030c6:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030c8:	492e      	ldr	r1, [pc, #184]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	400a      	ands	r2, r1
 80030cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2201      	movs	r2, #1
 80030d4:	4013      	ands	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030dc:	2203      	movs	r2, #3
 80030de:	4393      	bics	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	4b23      	ldr	r3, [pc, #140]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030e8:	430a      	orrs	r2, r1
 80030ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	d009      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030f6:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003106:	430a      	orrs	r2, r1
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	01db      	lsls	r3, r3, #7
 8003112:	4013      	ands	r3, r2
 8003114:	d008      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003116:	4b17      	ldr	r3, [pc, #92]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	0899      	lsrs	r1, r3, #2
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003124:	430a      	orrs	r2, r1
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d009      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003144:	430a      	orrs	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	da09      	bge.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003150:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	22e0      	movs	r2, #224	; 0xe0
 8003156:	4393      	bics	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	4b05      	ldr	r3, [pc, #20]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003160:	430a      	orrs	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003164:	2312      	movs	r3, #18
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	781b      	ldrb	r3, [r3, #0]
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	40021000 	.word	0x40021000
 8003178:	fffffcff 	.word	0xfffffcff
 800317c:	fffeffff 	.word	0xfffeffff
 8003180:	00001388 	.word	0x00001388
 8003184:	efffffff 	.word	0xefffffff
 8003188:	ffffcfff 	.word	0xffffcfff
 800318c:	ffff3fff 	.word	0xffff3fff

08003190 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003190:	b5b0      	push	{r4, r5, r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003198:	230f      	movs	r3, #15
 800319a:	18fb      	adds	r3, r7, r3
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d100      	bne.n	80031a8 <HAL_RTC_Init+0x18>
 80031a6:	e088      	b.n	80032ba <HAL_RTC_Init+0x12a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2225      	movs	r2, #37	; 0x25
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fd ff54 	bl	800106c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2225      	movs	r2, #37	; 0x25
 80031c8:	2102      	movs	r1, #2
 80031ca:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2210      	movs	r2, #16
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d062      	beq.n	80032a0 <HAL_RTC_Init+0x110>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	22ca      	movs	r2, #202	; 0xca
 80031e0:	625a      	str	r2, [r3, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2253      	movs	r2, #83	; 0x53
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80031ea:	250f      	movs	r5, #15
 80031ec:	197c      	adds	r4, r7, r5
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 faed 	bl	80037d0 <RTC_EnterInitMode>
 80031f6:	0003      	movs	r3, r0
 80031f8:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80031fa:	0028      	movs	r0, r5
 80031fc:	183b      	adds	r3, r7, r0
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d12c      	bne.n	800325e <HAL_RTC_Init+0xce>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699a      	ldr	r2, [r3, #24]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	492e      	ldr	r1, [pc, #184]	; (80032c8 <HAL_RTC_Init+0x138>)
 8003210:	400a      	ands	r2, r1
 8003212:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6999      	ldr	r1, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68d2      	ldr	r2, [r2, #12]
 800323a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6919      	ldr	r1, [r3, #16]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	041a      	lsls	r2, r3, #16
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003250:	183c      	adds	r4, r7, r0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fb05 	bl	8003864 <RTC_ExitInitMode>
 800325a:	0003      	movs	r3, r0
 800325c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d116      	bne.n	8003296 <HAL_RTC_Init+0x106>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	00d2      	lsls	r2, r2, #3
 8003274:	08d2      	lsrs	r2, r2, #3
 8003276:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6999      	ldr	r1, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	431a      	orrs	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	619a      	str	r2, [r3, #24]
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
 800329e:	e003      	b.n	80032a8 <HAL_RTC_Init+0x118>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80032a0:	230f      	movs	r3, #15
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80032a8:	230f      	movs	r3, #15
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d103      	bne.n	80032ba <HAL_RTC_Init+0x12a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2225      	movs	r2, #37	; 0x25
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80032ba:	230f      	movs	r3, #15
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
}
 80032c0:	0018      	movs	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b004      	add	sp, #16
 80032c6:	bdb0      	pop	{r4, r5, r7, pc}
 80032c8:	ff8fffbf 	.word	0xff8fffbf

080032cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	5c9b      	ldrb	r3, [r3, r2]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_RTC_SetTime+0x1a>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e092      	b.n	800340c <HAL_RTC_SetTime+0x140>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2224      	movs	r2, #36	; 0x24
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2225      	movs	r2, #37	; 0x25
 80032f2:	2102      	movs	r1, #2
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	22ca      	movs	r2, #202	; 0xca
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2253      	movs	r2, #83	; 0x53
 8003304:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003306:	2513      	movs	r5, #19
 8003308:	197c      	adds	r4, r7, r5
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fa5f 	bl	80037d0 <RTC_EnterInitMode>
 8003312:	0003      	movs	r3, r0
 8003314:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003316:	197b      	adds	r3, r7, r5
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d162      	bne.n	80033e4 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d125      	bne.n	8003370 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	4013      	ands	r3, r2
 800332e:	d102      	bne.n	8003336 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2200      	movs	r2, #0
 8003334:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	0018      	movs	r0, r3
 800333c:	f000 fad6 	bl	80038ec <RTC_ByteToBcd2>
 8003340:	0003      	movs	r3, r0
 8003342:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	785b      	ldrb	r3, [r3, #1]
 8003348:	0018      	movs	r0, r3
 800334a:	f000 facf 	bl	80038ec <RTC_ByteToBcd2>
 800334e:	0003      	movs	r3, r0
 8003350:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003352:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	789b      	ldrb	r3, [r3, #2]
 8003358:	0018      	movs	r0, r3
 800335a:	f000 fac7 	bl	80038ec <RTC_ByteToBcd2>
 800335e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003360:	0022      	movs	r2, r4
 8003362:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	78db      	ldrb	r3, [r3, #3]
 8003368:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	e017      	b.n	80033a0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	4013      	ands	r3, r2
 800337a:	d102      	bne.n	8003382 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2200      	movs	r2, #0
 8003380:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800338e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003394:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	78db      	ldrb	r3, [r3, #3]
 800339a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	491b      	ldr	r1, [pc, #108]	; (8003414 <HAL_RTC_SetTime+0x148>)
 80033a8:	400a      	ands	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_RTC_SetTime+0x14c>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6999      	ldr	r1, [r3, #24]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033d4:	2313      	movs	r3, #19
 80033d6:	18fc      	adds	r4, r7, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 fa42 	bl	8003864 <RTC_ExitInitMode>
 80033e0:	0003      	movs	r3, r0
 80033e2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	22ff      	movs	r2, #255	; 0xff
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033ec:	2313      	movs	r3, #19
 80033ee:	18fb      	adds	r3, r7, r3
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2225      	movs	r2, #37	; 0x25
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2224      	movs	r2, #36	; 0x24
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]

  return status;
 8003406:	2313      	movs	r3, #19
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	781b      	ldrb	r3, [r3, #0]
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b006      	add	sp, #24
 8003412:	bdb0      	pop	{r4, r5, r7, pc}
 8003414:	007f7f7f 	.word	0x007f7f7f
 8003418:	fffbffff 	.word	0xfffbffff

0800341c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800341c:	b5b0      	push	{r4, r5, r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2224      	movs	r2, #36	; 0x24
 800342c:	5c9b      	ldrb	r3, [r3, r2]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_RTC_SetDate+0x1a>
 8003432:	2302      	movs	r3, #2
 8003434:	e07e      	b.n	8003534 <HAL_RTC_SetDate+0x118>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2224      	movs	r2, #36	; 0x24
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2225      	movs	r2, #37	; 0x25
 8003442:	2102      	movs	r1, #2
 8003444:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10e      	bne.n	800346a <HAL_RTC_SetDate+0x4e>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	001a      	movs	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	4013      	ands	r3, r2
 8003456:	d008      	beq.n	800346a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	785b      	ldrb	r3, [r3, #1]
 800345c:	2210      	movs	r2, #16
 800345e:	4393      	bics	r3, r2
 8003460:	b2db      	uxtb	r3, r3
 8003462:	330a      	adds	r3, #10
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11c      	bne.n	80034aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	78db      	ldrb	r3, [r3, #3]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fa39 	bl	80038ec <RTC_ByteToBcd2>
 800347a:	0003      	movs	r3, r0
 800347c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	0018      	movs	r0, r3
 8003484:	f000 fa32 	bl	80038ec <RTC_ByteToBcd2>
 8003488:	0003      	movs	r3, r0
 800348a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800348c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	789b      	ldrb	r3, [r3, #2]
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fa2a 	bl	80038ec <RTC_ByteToBcd2>
 8003498:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800349a:	0022      	movs	r2, r4
 800349c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	e00e      	b.n	80034c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	78db      	ldrb	r3, [r3, #3]
 80034ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034b6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80034bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	22ca      	movs	r2, #202	; 0xca
 80034ce:	625a      	str	r2, [r3, #36]	; 0x24
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2253      	movs	r2, #83	; 0x53
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034d8:	2513      	movs	r5, #19
 80034da:	197c      	adds	r4, r7, r5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f976 	bl	80037d0 <RTC_EnterInitMode>
 80034e4:	0003      	movs	r3, r0
 80034e6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80034e8:	0028      	movs	r0, r5
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10c      	bne.n	800350c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4910      	ldr	r1, [pc, #64]	; (800353c <HAL_RTC_SetDate+0x120>)
 80034fa:	400a      	ands	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034fe:	183c      	adds	r4, r7, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	0018      	movs	r0, r3
 8003504:	f000 f9ae 	bl	8003864 <RTC_ExitInitMode>
 8003508:	0003      	movs	r3, r0
 800350a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	22ff      	movs	r2, #255	; 0xff
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003514:	2313      	movs	r3, #19
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d103      	bne.n	8003526 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2225      	movs	r2, #37	; 0x25
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2224      	movs	r2, #36	; 0x24
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

  return status;
 800352e:	2313      	movs	r3, #19
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	781b      	ldrb	r3, [r3, #0]
}
 8003534:	0018      	movs	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	b006      	add	sp, #24
 800353a:	bdb0      	pop	{r4, r5, r7, pc}
 800353c:	00ffff3f 	.word	0x00ffff3f

08003540 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	b089      	sub	sp, #36	; 0x24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2224      	movs	r2, #36	; 0x24
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_RTC_SetAlarm_IT+0x1a>
 8003556:	2302      	movs	r3, #2
 8003558:	e0da      	b.n	8003710 <HAL_RTC_SetAlarm_IT+0x1d0>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2224      	movs	r2, #36	; 0x24
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2225      	movs	r2, #37	; 0x25
 8003566:	2102      	movs	r1, #2
 8003568:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d136      	bne.n	80035de <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2240      	movs	r2, #64	; 0x40
 8003578:	4013      	ands	r3, r2
 800357a:	d102      	bne.n	8003582 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f9b0 	bl	80038ec <RTC_ByteToBcd2>
 800358c:	0003      	movs	r3, r0
 800358e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	785b      	ldrb	r3, [r3, #1]
 8003594:	0018      	movs	r0, r3
 8003596:	f000 f9a9 	bl	80038ec <RTC_ByteToBcd2>
 800359a:	0003      	movs	r3, r0
 800359c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800359e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	789b      	ldrb	r3, [r3, #2]
 80035a4:	0018      	movs	r0, r3
 80035a6:	f000 f9a1 	bl	80038ec <RTC_ByteToBcd2>
 80035aa:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035ac:	0022      	movs	r2, r4
 80035ae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035b6:	431a      	orrs	r2, r3
 80035b8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2220      	movs	r2, #32
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f000 f993 	bl	80038ec <RTC_ByteToBcd2>
 80035c6:	0003      	movs	r3, r0
 80035c8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80035ca:	0022      	movs	r2, r4
 80035cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80035d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035d8:	4313      	orrs	r3, r2
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e022      	b.n	8003624 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	4013      	ands	r3, r2
 80035e8:	d102      	bne.n	80035f0 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2200      	movs	r2, #0
 80035ee:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80035fc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003602:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	78db      	ldrb	r3, [r3, #3]
 8003608:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800360a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2120      	movs	r1, #32
 8003610:	5c5b      	ldrb	r3, [r3, r1]
 8003612:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003614:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800361a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003620:	4313      	orrs	r3, r2
 8003622:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	22ca      	movs	r2, #202	; 0xca
 8003636:	625a      	str	r2, [r3, #36]	; 0x24
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2253      	movs	r2, #83	; 0x53
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	429a      	cmp	r2, r3
 800364a:	d14b      	bne.n	80036e4 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4930      	ldr	r1, [pc, #192]	; (8003718 <HAL_RTC_SetAlarm_IT+0x1d8>)
 8003658:	400a      	ands	r2, r1
 800365a:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	430a      	orrs	r2, r1
 800366a:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 800366c:	f7fd ff0e 	bl	800148c <HAL_GetTick>
 8003670:	0003      	movs	r3, r0
 8003672:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003674:	e016      	b.n	80036a4 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003676:	f7fd ff09 	bl	800148c <HAL_GetTick>
 800367a:	0002      	movs	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	23fa      	movs	r3, #250	; 0xfa
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d90d      	bls.n	80036a4 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ff      	movs	r2, #255	; 0xff
 800368e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2225      	movs	r2, #37	; 0x25
 8003694:	2103      	movs	r1, #3
 8003696:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2224      	movs	r2, #36	; 0x24
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e035      	b.n	8003710 <HAL_RTC_SetAlarm_IT+0x1d0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	4013      	ands	r3, r2
 80036ae:	d0e2      	beq.n	8003676 <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2180      	movs	r1, #128	; 0x80
 80036cc:	0049      	lsls	r1, r1, #1
 80036ce:	430a      	orrs	r2, r1
 80036d0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699a      	ldr	r2, [r3, #24]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2180      	movs	r1, #128	; 0x80
 80036de:	0149      	lsls	r1, r1, #5
 80036e0:	430a      	orrs	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80036e4:	4a0d      	ldr	r2, [pc, #52]	; (800371c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	58d3      	ldr	r3, [r2, r3]
 80036ea:	490c      	ldr	r1, [pc, #48]	; (800371c <HAL_RTC_SetAlarm_IT+0x1dc>)
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	0312      	lsls	r2, r2, #12
 80036f0:	4313      	orrs	r3, r2
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	22ff      	movs	r2, #255	; 0xff
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2225      	movs	r2, #37	; 0x25
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2224      	movs	r2, #36	; 0x24
 800370a:	2100      	movs	r1, #0
 800370c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	0018      	movs	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	b009      	add	sp, #36	; 0x24
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	fffffeff 	.word	0xfffffeff
 800371c:	40021800 	.word	0x40021800

08003720 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	2380      	movs	r3, #128	; 0x80
 8003730:	015b      	lsls	r3, r3, #5
 8003732:	4013      	ands	r3, r2
 8003734:	d011      	beq.n	800375a <HAL_RTC_AlarmIRQHandler+0x3a>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373c:	2201      	movs	r2, #1
 800373e:	4013      	ands	r3, r2
 8003740:	d00b      	beq.n	800375a <HAL_RTC_AlarmIRQHandler+0x3a>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2101      	movs	r1, #1
 800374e:	430a      	orrs	r2, r1
 8003750:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	0018      	movs	r0, r3
 8003756:	f7fc fead 	bl	80004b4 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2225      	movs	r2, #37	; 0x25
 800375e:	2101      	movs	r1, #1
 8003760:	5499      	strb	r1, [r3, r2]
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	21a0      	movs	r1, #160	; 0xa0
 800377e:	438a      	bics	r2, r1
 8003780:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003782:	f7fd fe83 	bl	800148c <HAL_GetTick>
 8003786:	0003      	movs	r3, r0
 8003788:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800378a:	e014      	b.n	80037b6 <HAL_RTC_WaitForSynchro+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800378c:	f7fd fe7e 	bl	800148c <HAL_GetTick>
 8003790:	0002      	movs	r2, r0
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	1ad2      	subs	r2, r2, r3
 8003796:	23fa      	movs	r3, #250	; 0xfa
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	429a      	cmp	r2, r3
 800379c:	d90b      	bls.n	80037b6 <HAL_RTC_WaitForSynchro+0x4c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2220      	movs	r2, #32
 80037a6:	4013      	ands	r3, r2
 80037a8:	d10c      	bne.n	80037c4 <HAL_RTC_WaitForSynchro+0x5a>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;  
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2225      	movs	r2, #37	; 0x25
 80037ae:	2103      	movs	r1, #3
 80037b0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e008      	b.n	80037c8 <HAL_RTC_WaitForSynchro+0x5e>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	4013      	ands	r3, r2
 80037c0:	d0e4      	beq.n	800378c <HAL_RTC_WaitForSynchro+0x22>
 80037c2:	e000      	b.n	80037c6 <HAL_RTC_WaitForSynchro+0x5c>
      }
      else
      {
        break;
 80037c4:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b004      	add	sp, #16
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037d8:	230f      	movs	r3, #15
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2240      	movs	r2, #64	; 0x40
 80037e8:	4013      	ands	r3, r2
 80037ea:	d134      	bne.n	8003856 <RTC_EnterInitMode+0x86>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2180      	movs	r1, #128	; 0x80
 80037f8:	430a      	orrs	r2, r1
 80037fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80037fc:	f7fd fe46 	bl	800148c <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003804:	e01a      	b.n	800383c <RTC_EnterInitMode+0x6c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003806:	f7fd fe41 	bl	800148c <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	1ad2      	subs	r2, r2, r3
 8003810:	200f      	movs	r0, #15
 8003812:	183b      	adds	r3, r7, r0
 8003814:	1839      	adds	r1, r7, r0
 8003816:	7809      	ldrb	r1, [r1, #0]
 8003818:	7019      	strb	r1, [r3, #0]
 800381a:	23fa      	movs	r3, #250	; 0xfa
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	429a      	cmp	r2, r3
 8003820:	d90c      	bls.n	800383c <RTC_EnterInitMode+0x6c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	4013      	ands	r3, r2
 800382c:	d112      	bne.n	8003854 <RTC_EnterInitMode+0x84>
        {
          status = HAL_TIMEOUT;
 800382e:	183b      	adds	r3, r7, r0
 8003830:	2203      	movs	r2, #3
 8003832:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2225      	movs	r2, #37	; 0x25
 8003838:	2103      	movs	r1, #3
 800383a:	5499      	strb	r1, [r3, r2]
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	4013      	ands	r3, r2
 8003846:	d106      	bne.n	8003856 <RTC_EnterInitMode+0x86>
 8003848:	230f      	movs	r3, #15
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b03      	cmp	r3, #3
 8003850:	d1d9      	bne.n	8003806 <RTC_EnterInitMode+0x36>
 8003852:	e000      	b.n	8003856 <RTC_EnterInitMode+0x86>
        }
        else
        {
          break;
 8003854:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return status;
 8003856:	230f      	movs	r3, #15
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	781b      	ldrb	r3, [r3, #0]
}
 800385c:	0018      	movs	r0, r3
 800385e:	46bd      	mov	sp, r7
 8003860:	b004      	add	sp, #16
 8003862:	bd80      	pop	{r7, pc}

08003864 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	240f      	movs	r4, #15
 800386e:	193b      	adds	r3, r7, r4
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003874:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <RTC_ExitInitMode+0x84>)
 8003876:	68da      	ldr	r2, [r3, #12]
 8003878:	4b1b      	ldr	r3, [pc, #108]	; (80038e8 <RTC_ExitInitMode+0x84>)
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	438a      	bics	r2, r1
 800387e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <RTC_ExitInitMode+0x84>)
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2220      	movs	r2, #32
 8003886:	4013      	ands	r3, r2
 8003888:	d10d      	bne.n	80038a6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f7ff ff6c 	bl	800376a <HAL_RTC_WaitForSynchro>
 8003892:	1e03      	subs	r3, r0, #0
 8003894:	d021      	beq.n	80038da <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2225      	movs	r2, #37	; 0x25
 800389a:	2103      	movs	r1, #3
 800389c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800389e:	193b      	adds	r3, r7, r4
 80038a0:	2203      	movs	r2, #3
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e019      	b.n	80038da <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <RTC_ExitInitMode+0x84>)
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <RTC_ExitInitMode+0x84>)
 80038ac:	2120      	movs	r1, #32
 80038ae:	438a      	bics	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ff58 	bl	800376a <HAL_RTC_WaitForSynchro>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d007      	beq.n	80038ce <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2225      	movs	r2, #37	; 0x25
 80038c2:	2103      	movs	r1, #3
 80038c4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80038c6:	230f      	movs	r3, #15
 80038c8:	18fb      	adds	r3, r7, r3
 80038ca:	2203      	movs	r2, #3
 80038cc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <RTC_ExitInitMode+0x84>)
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <RTC_ExitInitMode+0x84>)
 80038d4:	2120      	movs	r1, #32
 80038d6:	430a      	orrs	r2, r1
 80038d8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80038da:	230f      	movs	r3, #15
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	781b      	ldrb	r3, [r3, #0]
}
 80038e0:	0018      	movs	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	b005      	add	sp, #20
 80038e6:	bd90      	pop	{r4, r7, pc}
 80038e8:	40002800 	.word	0x40002800

080038ec <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	0002      	movs	r2, r0
 80038f4:	1dfb      	adds	r3, r7, #7
 80038f6:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80038fc:	230b      	movs	r3, #11
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	1dfa      	adds	r2, r7, #7
 8003902:	7812      	ldrb	r2, [r2, #0]
 8003904:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8003906:	e008      	b.n	800391a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800390e:	220b      	movs	r2, #11
 8003910:	18bb      	adds	r3, r7, r2
 8003912:	18ba      	adds	r2, r7, r2
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	3a0a      	subs	r2, #10
 8003918:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800391a:	210b      	movs	r1, #11
 800391c:	187b      	adds	r3, r7, r1
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d8f1      	bhi.n	8003908 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	b2da      	uxtb	r2, r3
 800392c:	187b      	adds	r3, r7, r1
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4313      	orrs	r3, r2
 8003932:	b2db      	uxtb	r3, r3
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	5c9b      	ldrb	r3, [r3, r2]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8003950:	2302      	movs	r3, #2
 8003952:	e035      	b.n	80039c0 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	2101      	movs	r1, #1
 800395a:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2225      	movs	r2, #37	; 0x25
 8003960:	2102      	movs	r1, #2
 8003962:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	22ca      	movs	r2, #202	; 0xca
 800396a:	625a      	str	r2, [r3, #36]	; 0x24
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2253      	movs	r2, #83	; 0x53
 8003972:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4912      	ldr	r1, [pc, #72]	; (80039c8 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8003980:	400a      	ands	r2, r1
 8003982:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6999      	ldr	r1, [r3, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	0409      	lsls	r1, r1, #16
 80039a2:	430a      	orrs	r2, r1
 80039a4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2225      	movs	r2, #37	; 0x25
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2224      	movs	r2, #36	; 0x24
 80039ba:	2100      	movs	r1, #0
 80039bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b002      	add	sp, #8
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	fff7ffff 	.word	0xfff7ffff

080039cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e04a      	b.n	8003a74 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	223d      	movs	r2, #61	; 0x3d
 80039e2:	5c9b      	ldrb	r3, [r3, r2]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	223c      	movs	r2, #60	; 0x3c
 80039ee:	2100      	movs	r1, #0
 80039f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fd fb7f 	bl	80010f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	223d      	movs	r2, #61	; 0x3d
 80039fe:	2102      	movs	r1, #2
 8003a00:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	0010      	movs	r0, r2
 8003a0e:	f000 fbbd 	bl	800418c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2248      	movs	r2, #72	; 0x48
 8003a16:	2101      	movs	r1, #1
 8003a18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	223e      	movs	r2, #62	; 0x3e
 8003a1e:	2101      	movs	r1, #1
 8003a20:	5499      	strb	r1, [r3, r2]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	223f      	movs	r2, #63	; 0x3f
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2240      	movs	r2, #64	; 0x40
 8003a2e:	2101      	movs	r1, #1
 8003a30:	5499      	strb	r1, [r3, r2]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2241      	movs	r2, #65	; 0x41
 8003a36:	2101      	movs	r1, #1
 8003a38:	5499      	strb	r1, [r3, r2]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2242      	movs	r2, #66	; 0x42
 8003a3e:	2101      	movs	r1, #1
 8003a40:	5499      	strb	r1, [r3, r2]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2243      	movs	r2, #67	; 0x43
 8003a46:	2101      	movs	r1, #1
 8003a48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2244      	movs	r2, #68	; 0x44
 8003a4e:	2101      	movs	r1, #1
 8003a50:	5499      	strb	r1, [r3, r2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2245      	movs	r2, #69	; 0x45
 8003a56:	2101      	movs	r1, #1
 8003a58:	5499      	strb	r1, [r3, r2]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2246      	movs	r2, #70	; 0x46
 8003a5e:	2101      	movs	r1, #1
 8003a60:	5499      	strb	r1, [r3, r2]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2247      	movs	r2, #71	; 0x47
 8003a66:	2101      	movs	r1, #1
 8003a68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	223d      	movs	r2, #61	; 0x3d
 8003a6e:	2101      	movs	r1, #1
 8003a70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	0018      	movs	r0, r3
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b002      	add	sp, #8
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d108      	bne.n	8003a9e <HAL_TIM_PWM_Start+0x22>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	223e      	movs	r2, #62	; 0x3e
 8003a90:	5c9b      	ldrb	r3, [r3, r2]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	1e5a      	subs	r2, r3, #1
 8003a98:	4193      	sbcs	r3, r2
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	e037      	b.n	8003b0e <HAL_TIM_PWM_Start+0x92>
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d108      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x3a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	223f      	movs	r2, #63	; 0x3f
 8003aa8:	5c9b      	ldrb	r3, [r3, r2]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	1e5a      	subs	r2, r3, #1
 8003ab0:	4193      	sbcs	r3, r2
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e02b      	b.n	8003b0e <HAL_TIM_PWM_Start+0x92>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d108      	bne.n	8003ace <HAL_TIM_PWM_Start+0x52>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2240      	movs	r2, #64	; 0x40
 8003ac0:	5c9b      	ldrb	r3, [r3, r2]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	1e5a      	subs	r2, r3, #1
 8003ac8:	4193      	sbcs	r3, r2
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e01f      	b.n	8003b0e <HAL_TIM_PWM_Start+0x92>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d108      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0x6a>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2241      	movs	r2, #65	; 0x41
 8003ad8:	5c9b      	ldrb	r3, [r3, r2]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	4193      	sbcs	r3, r2
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_PWM_Start+0x92>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b10      	cmp	r3, #16
 8003aea:	d108      	bne.n	8003afe <HAL_TIM_PWM_Start+0x82>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2242      	movs	r2, #66	; 0x42
 8003af0:	5c9b      	ldrb	r3, [r3, r2]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	4193      	sbcs	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	e007      	b.n	8003b0e <HAL_TIM_PWM_Start+0x92>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2243      	movs	r2, #67	; 0x43
 8003b02:	5c9b      	ldrb	r3, [r3, r2]
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	3b01      	subs	r3, #1
 8003b08:	1e5a      	subs	r2, r3, #1
 8003b0a:	4193      	sbcs	r3, r2
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e07b      	b.n	8003c0e <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_PWM_Start+0xaa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	223e      	movs	r2, #62	; 0x3e
 8003b20:	2102      	movs	r1, #2
 8003b22:	5499      	strb	r1, [r3, r2]
 8003b24:	e023      	b.n	8003b6e <HAL_TIM_PWM_Start+0xf2>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_PWM_Start+0xba>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	223f      	movs	r2, #63	; 0x3f
 8003b30:	2102      	movs	r1, #2
 8003b32:	5499      	strb	r1, [r3, r2]
 8003b34:	e01b      	b.n	8003b6e <HAL_TIM_PWM_Start+0xf2>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d104      	bne.n	8003b46 <HAL_TIM_PWM_Start+0xca>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2240      	movs	r2, #64	; 0x40
 8003b40:	2102      	movs	r1, #2
 8003b42:	5499      	strb	r1, [r3, r2]
 8003b44:	e013      	b.n	8003b6e <HAL_TIM_PWM_Start+0xf2>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b0c      	cmp	r3, #12
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_PWM_Start+0xda>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2241      	movs	r2, #65	; 0x41
 8003b50:	2102      	movs	r1, #2
 8003b52:	5499      	strb	r1, [r3, r2]
 8003b54:	e00b      	b.n	8003b6e <HAL_TIM_PWM_Start+0xf2>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b10      	cmp	r3, #16
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0xea>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2242      	movs	r2, #66	; 0x42
 8003b60:	2102      	movs	r1, #2
 8003b62:	5499      	strb	r1, [r3, r2]
 8003b64:	e003      	b.n	8003b6e <HAL_TIM_PWM_Start+0xf2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2243      	movs	r2, #67	; 0x43
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6839      	ldr	r1, [r7, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	0018      	movs	r0, r3
 8003b78:	f000 fe10 	bl	800479c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a25      	ldr	r2, [pc, #148]	; (8003c18 <HAL_TIM_PWM_Start+0x19c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x11e>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_TIM_PWM_Start+0x1a0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d004      	beq.n	8003b9a <HAL_TIM_PWM_Start+0x11e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a22      	ldr	r2, [pc, #136]	; (8003c20 <HAL_TIM_PWM_Start+0x1a4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_PWM_Start+0x122>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_TIM_PWM_Start+0x124>
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d008      	beq.n	8003bb6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	0209      	lsls	r1, r1, #8
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a17      	ldr	r2, [pc, #92]	; (8003c18 <HAL_TIM_PWM_Start+0x19c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_TIM_PWM_Start+0x14e>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a17      	ldr	r2, [pc, #92]	; (8003c24 <HAL_TIM_PWM_Start+0x1a8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d116      	bne.n	8003bf8 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <HAL_TIM_PWM_Start+0x1ac>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b06      	cmp	r3, #6
 8003bda:	d016      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x18e>
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	2380      	movs	r3, #128	; 0x80
 8003be0:	025b      	lsls	r3, r3, #9
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d011      	beq.n	8003c0a <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	e008      	b.n	8003c0a <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2101      	movs	r1, #1
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40014400 	.word	0x40014400
 8003c20:	40014800 	.word	0x40014800
 8003c24:	40000400 	.word	0x40000400
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6839      	ldr	r1, [r7, #0]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f000 fdac 	bl	800479c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a35      	ldr	r2, [pc, #212]	; (8003d20 <HAL_TIM_PWM_Stop+0xf4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d009      	beq.n	8003c62 <HAL_TIM_PWM_Stop+0x36>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a34      	ldr	r2, [pc, #208]	; (8003d24 <HAL_TIM_PWM_Stop+0xf8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d004      	beq.n	8003c62 <HAL_TIM_PWM_Stop+0x36>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a32      	ldr	r2, [pc, #200]	; (8003d28 <HAL_TIM_PWM_Stop+0xfc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d101      	bne.n	8003c66 <HAL_TIM_PWM_Stop+0x3a>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_TIM_PWM_Stop+0x3c>
 8003c66:	2300      	movs	r3, #0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4a2e      	ldr	r2, [pc, #184]	; (8003d2c <HAL_TIM_PWM_Stop+0x100>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	d10d      	bne.n	8003c94 <HAL_TIM_PWM_Stop+0x68>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	4a2c      	ldr	r2, [pc, #176]	; (8003d30 <HAL_TIM_PWM_Stop+0x104>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_PWM_Stop+0x68>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4929      	ldr	r1, [pc, #164]	; (8003d34 <HAL_TIM_PWM_Stop+0x108>)
 8003c90:	400a      	ands	r2, r1
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6a1b      	ldr	r3, [r3, #32]
 8003c9a:	4a24      	ldr	r2, [pc, #144]	; (8003d2c <HAL_TIM_PWM_Stop+0x100>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d10d      	bne.n	8003cbc <HAL_TIM_PWM_Stop+0x90>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <HAL_TIM_PWM_Stop+0x104>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d107      	bne.n	8003cbc <HAL_TIM_PWM_Stop+0x90>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_TIM_PWM_Stop+0xa0>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	223e      	movs	r2, #62	; 0x3e
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]
 8003cca:	e023      	b.n	8003d14 <HAL_TIM_PWM_Stop+0xe8>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d104      	bne.n	8003cdc <HAL_TIM_PWM_Stop+0xb0>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223f      	movs	r2, #63	; 0x3f
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	5499      	strb	r1, [r3, r2]
 8003cda:	e01b      	b.n	8003d14 <HAL_TIM_PWM_Stop+0xe8>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d104      	bne.n	8003cec <HAL_TIM_PWM_Stop+0xc0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2240      	movs	r2, #64	; 0x40
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	5499      	strb	r1, [r3, r2]
 8003cea:	e013      	b.n	8003d14 <HAL_TIM_PWM_Stop+0xe8>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d104      	bne.n	8003cfc <HAL_TIM_PWM_Stop+0xd0>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2241      	movs	r2, #65	; 0x41
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	5499      	strb	r1, [r3, r2]
 8003cfa:	e00b      	b.n	8003d14 <HAL_TIM_PWM_Stop+0xe8>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b10      	cmp	r3, #16
 8003d00:	d104      	bne.n	8003d0c <HAL_TIM_PWM_Stop+0xe0>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2242      	movs	r2, #66	; 0x42
 8003d06:	2101      	movs	r1, #1
 8003d08:	5499      	strb	r1, [r3, r2]
 8003d0a:	e003      	b.n	8003d14 <HAL_TIM_PWM_Stop+0xe8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2243      	movs	r2, #67	; 0x43
 8003d10:	2101      	movs	r1, #1
 8003d12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	40012c00 	.word	0x40012c00
 8003d24:	40014400 	.word	0x40014400
 8003d28:	40014800 	.word	0x40014800
 8003d2c:	00001111 	.word	0x00001111
 8003d30:	00000444 	.word	0x00000444
 8003d34:	ffff7fff 	.word	0xffff7fff

08003d38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2202      	movs	r2, #2
 8003d54:	4013      	ands	r3, r2
 8003d56:	d021      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	d01d      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2203      	movs	r2, #3
 8003d66:	4252      	negs	r2, r2
 8003d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2203      	movs	r2, #3
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	0018      	movs	r0, r3
 8003d80:	f000 f9ec 	bl	800415c <HAL_TIM_IC_CaptureCallback>
 8003d84:	e007      	b.n	8003d96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f000 f9df 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f9eb 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	d022      	beq.n	8003dea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2204      	movs	r2, #4
 8003da8:	4013      	ands	r3, r2
 8003daa:	d01e      	beq.n	8003dea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2205      	movs	r2, #5
 8003db2:	4252      	negs	r2, r2
 8003db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	23c0      	movs	r3, #192	; 0xc0
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d004      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 f9c5 	bl	800415c <HAL_TIM_IC_CaptureCallback>
 8003dd2:	e007      	b.n	8003de4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f000 f9b8 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	0018      	movs	r0, r3
 8003de0:	f000 f9c4 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	2208      	movs	r2, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d021      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2208      	movs	r2, #8
 8003df6:	4013      	ands	r3, r2
 8003df8:	d01d      	beq.n	8003e36 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2209      	movs	r2, #9
 8003e00:	4252      	negs	r2, r2
 8003e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2204      	movs	r2, #4
 8003e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	2203      	movs	r2, #3
 8003e12:	4013      	ands	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f99f 	bl	800415c <HAL_TIM_IC_CaptureCallback>
 8003e1e:	e007      	b.n	8003e30 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	0018      	movs	r0, r3
 8003e24:	f000 f992 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f000 f99e 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	d022      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2210      	movs	r2, #16
 8003e42:	4013      	ands	r3, r2
 8003e44:	d01e      	beq.n	8003e84 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2211      	movs	r2, #17
 8003e4c:	4252      	negs	r2, r2
 8003e4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2208      	movs	r2, #8
 8003e54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	23c0      	movs	r3, #192	; 0xc0
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4013      	ands	r3, r2
 8003e62:	d004      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 f978 	bl	800415c <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e007      	b.n	8003e7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f000 f96b 	bl	800414c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f000 f977 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4013      	ands	r3, r2
 8003e92:	d008      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2202      	movs	r2, #2
 8003e9a:	4252      	negs	r2, r2
 8003e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f000 f94b 	bl	800413c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d00c      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d008      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2281      	movs	r2, #129	; 0x81
 8003ebc:	4252      	negs	r2, r2
 8003ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f000 fcf8 	bl	80048b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d00b      	beq.n	8003eea <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2280      	movs	r2, #128	; 0x80
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d007      	beq.n	8003eea <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIM_IRQHandler+0x200>)
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f000 fcef 	bl	80048c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	2240      	movs	r2, #64	; 0x40
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d00c      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2240      	movs	r2, #64	; 0x40
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d008      	beq.n	8003f0c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2241      	movs	r2, #65	; 0x41
 8003f00:	4252      	negs	r2, r2
 8003f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	0018      	movs	r0, r3
 8003f08:	f000 f938 	bl	800417c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	4013      	ands	r3, r2
 8003f12:	d00c      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	4013      	ands	r3, r2
 8003f1a:	d008      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2221      	movs	r2, #33	; 0x21
 8003f22:	4252      	negs	r2, r2
 8003f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f000 fcbd 	bl	80048a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b004      	add	sp, #16
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	fffffeff 	.word	0xfffffeff

08003f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2317      	movs	r3, #23
 8003f4a:	18fb      	adds	r3, r7, r3
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	223c      	movs	r2, #60	; 0x3c
 8003f54:	5c9b      	ldrb	r3, [r3, r2]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e0e5      	b.n	800412a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	223c      	movs	r2, #60	; 0x3c
 8003f62:	2101      	movs	r1, #1
 8003f64:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b14      	cmp	r3, #20
 8003f6a:	d900      	bls.n	8003f6e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003f6c:	e0d1      	b.n	8004112 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	009a      	lsls	r2, r3, #2
 8003f72:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003f74:	18d3      	adds	r3, r2, r3
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f000 f96e 	bl	8004264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2108      	movs	r1, #8
 8003f94:	430a      	orrs	r2, r1
 8003f96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699a      	ldr	r2, [r3, #24]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2104      	movs	r1, #4
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6999      	ldr	r1, [r3, #24]
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	619a      	str	r2, [r3, #24]
      break;
 8003fba:	e0af      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	0011      	movs	r1, r2
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f000 f9cd 	bl	8004364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2180      	movs	r1, #128	; 0x80
 8003fd6:	0109      	lsls	r1, r1, #4
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699a      	ldr	r2, [r3, #24]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4954      	ldr	r1, [pc, #336]	; (8004138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003fe8:	400a      	ands	r2, r1
 8003fea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6999      	ldr	r1, [r3, #24]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	021a      	lsls	r2, r3, #8
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	619a      	str	r2, [r3, #24]
      break;
 8004000:	e08c      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	0011      	movs	r1, r2
 800400a:	0018      	movs	r0, r3
 800400c:	f000 fa28 	bl	8004460 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2108      	movs	r1, #8
 800401c:	430a      	orrs	r2, r1
 800401e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69da      	ldr	r2, [r3, #28]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2104      	movs	r1, #4
 800402c:	438a      	bics	r2, r1
 800402e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69d9      	ldr	r1, [r3, #28]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	61da      	str	r2, [r3, #28]
      break;
 8004042:	e06b      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	0011      	movs	r1, r2
 800404c:	0018      	movs	r0, r3
 800404e:	f000 fa89 	bl	8004564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69da      	ldr	r2, [r3, #28]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	0109      	lsls	r1, r1, #4
 8004060:	430a      	orrs	r2, r1
 8004062:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4932      	ldr	r1, [pc, #200]	; (8004138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004070:	400a      	ands	r2, r1
 8004072:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69d9      	ldr	r1, [r3, #28]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	021a      	lsls	r2, r3, #8
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	61da      	str	r2, [r3, #28]
      break;
 8004088:	e048      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0011      	movs	r1, r2
 8004092:	0018      	movs	r0, r3
 8004094:	f000 faca 	bl	800462c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2108      	movs	r1, #8
 80040a4:	430a      	orrs	r2, r1
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2104      	movs	r1, #4
 80040b4:	438a      	bics	r2, r1
 80040b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040ca:	e027      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	0011      	movs	r1, r2
 80040d4:	0018      	movs	r0, r3
 80040d6:	f000 fb03 	bl	80046e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2180      	movs	r1, #128	; 0x80
 80040e6:	0109      	lsls	r1, r1, #4
 80040e8:	430a      	orrs	r2, r1
 80040ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80040f8:	400a      	ands	r2, r1
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	021a      	lsls	r2, r3, #8
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004110:	e004      	b.n	800411c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004112:	2317      	movs	r3, #23
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	2201      	movs	r2, #1
 8004118:	701a      	strb	r2, [r3, #0]
      break;
 800411a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	223c      	movs	r2, #60	; 0x3c
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

  return status;
 8004124:	2317      	movs	r3, #23
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	0018      	movs	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	b006      	add	sp, #24
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	08005c4c 	.word	0x08005c4c
 8004138:	fffffbff 	.word	0xfffffbff

0800413c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	b002      	add	sp, #8
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004154:	46c0      	nop			; (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	b002      	add	sp, #8
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004164:	46c0      	nop			; (mov r8, r8)
 8004166:	46bd      	mov	sp, r7
 8004168:	b002      	add	sp, #8
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b002      	add	sp, #8
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a2b      	ldr	r2, [pc, #172]	; (800424c <TIM_Base_SetConfig+0xc0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d003      	beq.n	80041ac <TIM_Base_SetConfig+0x20>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <TIM_Base_SetConfig+0xc4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d108      	bne.n	80041be <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2270      	movs	r2, #112	; 0x70
 80041b0:	4393      	bics	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a22      	ldr	r2, [pc, #136]	; (800424c <TIM_Base_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00f      	beq.n	80041e6 <TIM_Base_SetConfig+0x5a>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a21      	ldr	r2, [pc, #132]	; (8004250 <TIM_Base_SetConfig+0xc4>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00b      	beq.n	80041e6 <TIM_Base_SetConfig+0x5a>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a20      	ldr	r2, [pc, #128]	; (8004254 <TIM_Base_SetConfig+0xc8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d007      	beq.n	80041e6 <TIM_Base_SetConfig+0x5a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a1f      	ldr	r2, [pc, #124]	; (8004258 <TIM_Base_SetConfig+0xcc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_Base_SetConfig+0x5a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a1e      	ldr	r2, [pc, #120]	; (800425c <TIM_Base_SetConfig+0xd0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d108      	bne.n	80041f8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <TIM_Base_SetConfig+0xd4>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	4393      	bics	r3, r2
 80041fe:	001a      	movs	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <TIM_Base_SetConfig+0xc0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d007      	beq.n	8004236 <TIM_Base_SetConfig+0xaa>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <TIM_Base_SetConfig+0xcc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d003      	beq.n	8004236 <TIM_Base_SetConfig+0xaa>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a0a      	ldr	r2, [pc, #40]	; (800425c <TIM_Base_SetConfig+0xd0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d103      	bne.n	800423e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	691a      	ldr	r2, [r3, #16]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	615a      	str	r2, [r3, #20]
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b004      	add	sp, #16
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40012c00 	.word	0x40012c00
 8004250:	40000400 	.word	0x40000400
 8004254:	40002000 	.word	0x40002000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	fffffcff 	.word	0xfffffcff

08004264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	2201      	movs	r2, #1
 800427a:	4393      	bics	r3, r2
 800427c:	001a      	movs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a2e      	ldr	r2, [pc, #184]	; (800434c <TIM_OC1_SetConfig+0xe8>)
 8004292:	4013      	ands	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2203      	movs	r2, #3
 800429a:	4393      	bics	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2202      	movs	r2, #2
 80042ac:	4393      	bics	r3, r2
 80042ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a24      	ldr	r2, [pc, #144]	; (8004350 <TIM_OC1_SetConfig+0xec>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d007      	beq.n	80042d2 <TIM_OC1_SetConfig+0x6e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a23      	ldr	r2, [pc, #140]	; (8004354 <TIM_OC1_SetConfig+0xf0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d003      	beq.n	80042d2 <TIM_OC1_SetConfig+0x6e>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a22      	ldr	r2, [pc, #136]	; (8004358 <TIM_OC1_SetConfig+0xf4>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d10c      	bne.n	80042ec <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2208      	movs	r2, #8
 80042d6:	4393      	bics	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2204      	movs	r2, #4
 80042e8:	4393      	bics	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a18      	ldr	r2, [pc, #96]	; (8004350 <TIM_OC1_SetConfig+0xec>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_OC1_SetConfig+0xa0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <TIM_OC1_SetConfig+0xf0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_OC1_SetConfig+0xa0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a16      	ldr	r2, [pc, #88]	; (8004358 <TIM_OC1_SetConfig+0xf4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d111      	bne.n	8004328 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	4a15      	ldr	r2, [pc, #84]	; (800435c <TIM_OC1_SetConfig+0xf8>)
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4a14      	ldr	r2, [pc, #80]	; (8004360 <TIM_OC1_SetConfig+0xfc>)
 8004310:	4013      	ands	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b006      	add	sp, #24
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			; (mov r8, r8)
 800434c:	fffeff8f 	.word	0xfffeff8f
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40014400 	.word	0x40014400
 8004358:	40014800 	.word	0x40014800
 800435c:	fffffeff 	.word	0xfffffeff
 8004360:	fffffdff 	.word	0xfffffdff

08004364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	2210      	movs	r2, #16
 800437a:	4393      	bics	r3, r2
 800437c:	001a      	movs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <TIM_OC2_SetConfig+0xe0>)
 8004392:	4013      	ands	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <TIM_OC2_SetConfig+0xe4>)
 800439a:	4013      	ands	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	021b      	lsls	r3, r3, #8
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2220      	movs	r2, #32
 80043ae:	4393      	bics	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a22      	ldr	r2, [pc, #136]	; (800444c <TIM_OC2_SetConfig+0xe8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10d      	bne.n	80043e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	4393      	bics	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2240      	movs	r2, #64	; 0x40
 80043de:	4393      	bics	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a19      	ldr	r2, [pc, #100]	; (800444c <TIM_OC2_SetConfig+0xe8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_OC2_SetConfig+0x96>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a18      	ldr	r2, [pc, #96]	; (8004450 <TIM_OC2_SetConfig+0xec>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_OC2_SetConfig+0x96>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a17      	ldr	r2, [pc, #92]	; (8004454 <TIM_OC2_SetConfig+0xf0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d113      	bne.n	8004422 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <TIM_OC2_SetConfig+0xf4>)
 80043fe:	4013      	ands	r3, r2
 8004400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	4a15      	ldr	r2, [pc, #84]	; (800445c <TIM_OC2_SetConfig+0xf8>)
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	621a      	str	r2, [r3, #32]
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b006      	add	sp, #24
 8004442:	bd80      	pop	{r7, pc}
 8004444:	feff8fff 	.word	0xfeff8fff
 8004448:	fffffcff 	.word	0xfffffcff
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40014400 	.word	0x40014400
 8004454:	40014800 	.word	0x40014800
 8004458:	fffffbff 	.word	0xfffffbff
 800445c:	fffff7ff 	.word	0xfffff7ff

08004460 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	4a31      	ldr	r2, [pc, #196]	; (800453c <TIM_OC3_SetConfig+0xdc>)
 8004476:	401a      	ands	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a2d      	ldr	r2, [pc, #180]	; (8004540 <TIM_OC3_SetConfig+0xe0>)
 800448c:	4013      	ands	r3, r2
 800448e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2203      	movs	r2, #3
 8004494:	4393      	bics	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	4313      	orrs	r3, r2
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	4a27      	ldr	r2, [pc, #156]	; (8004544 <TIM_OC3_SetConfig+0xe4>)
 80044a6:	4013      	ands	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a23      	ldr	r2, [pc, #140]	; (8004548 <TIM_OC3_SetConfig+0xe8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d10d      	bne.n	80044da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <TIM_OC3_SetConfig+0xec>)
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <TIM_OC3_SetConfig+0xf0>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <TIM_OC3_SetConfig+0xe8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d007      	beq.n	80044f2 <TIM_OC3_SetConfig+0x92>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a1b      	ldr	r2, [pc, #108]	; (8004554 <TIM_OC3_SetConfig+0xf4>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_OC3_SetConfig+0x92>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1a      	ldr	r2, [pc, #104]	; (8004558 <TIM_OC3_SetConfig+0xf8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d113      	bne.n	800451a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4a19      	ldr	r2, [pc, #100]	; (800455c <TIM_OC3_SetConfig+0xfc>)
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <TIM_OC3_SetConfig+0x100>)
 80044fe:	4013      	ands	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	011b      	lsls	r3, r3, #4
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685a      	ldr	r2, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	621a      	str	r2, [r3, #32]
}
 8004534:	46c0      	nop			; (mov r8, r8)
 8004536:	46bd      	mov	sp, r7
 8004538:	b006      	add	sp, #24
 800453a:	bd80      	pop	{r7, pc}
 800453c:	fffffeff 	.word	0xfffffeff
 8004540:	fffeff8f 	.word	0xfffeff8f
 8004544:	fffffdff 	.word	0xfffffdff
 8004548:	40012c00 	.word	0x40012c00
 800454c:	fffff7ff 	.word	0xfffff7ff
 8004550:	fffffbff 	.word	0xfffffbff
 8004554:	40014400 	.word	0x40014400
 8004558:	40014800 	.word	0x40014800
 800455c:	ffffefff 	.word	0xffffefff
 8004560:	ffffdfff 	.word	0xffffdfff

08004564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	4a24      	ldr	r2, [pc, #144]	; (800460c <TIM_OC4_SetConfig+0xa8>)
 800457a:	401a      	ands	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4a20      	ldr	r2, [pc, #128]	; (8004610 <TIM_OC4_SetConfig+0xac>)
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <TIM_OC4_SetConfig+0xb0>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <TIM_OC4_SetConfig+0xb4>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a17      	ldr	r2, [pc, #92]	; (800461c <TIM_OC4_SetConfig+0xb8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d007      	beq.n	80045d4 <TIM_OC4_SetConfig+0x70>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <TIM_OC4_SetConfig+0xbc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d003      	beq.n	80045d4 <TIM_OC4_SetConfig+0x70>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <TIM_OC4_SetConfig+0xc0>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d109      	bne.n	80045e8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	4a14      	ldr	r2, [pc, #80]	; (8004628 <TIM_OC4_SetConfig+0xc4>)
 80045d8:	4013      	ands	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	019b      	lsls	r3, r3, #6
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685a      	ldr	r2, [r3, #4]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	46bd      	mov	sp, r7
 8004606:	b006      	add	sp, #24
 8004608:	bd80      	pop	{r7, pc}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	ffffefff 	.word	0xffffefff
 8004610:	feff8fff 	.word	0xfeff8fff
 8004614:	fffffcff 	.word	0xfffffcff
 8004618:	ffffdfff 	.word	0xffffdfff
 800461c:	40012c00 	.word	0x40012c00
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800
 8004628:	ffffbfff 	.word	0xffffbfff

0800462c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b086      	sub	sp, #24
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <TIM_OC5_SetConfig+0x9c>)
 8004642:	401a      	ands	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4a1d      	ldr	r2, [pc, #116]	; (80046cc <TIM_OC5_SetConfig+0xa0>)
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	4a19      	ldr	r2, [pc, #100]	; (80046d0 <TIM_OC5_SetConfig+0xa4>)
 800466a:	4013      	ands	r3, r2
 800466c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <TIM_OC5_SetConfig+0xa8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_OC5_SetConfig+0x66>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <TIM_OC5_SetConfig+0xac>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_OC5_SetConfig+0x66>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <TIM_OC5_SetConfig+0xb0>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d109      	bne.n	80046a6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	4a0c      	ldr	r2, [pc, #48]	; (80046c8 <TIM_OC5_SetConfig+0x9c>)
 8004696:	4013      	ands	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b006      	add	sp, #24
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	fffeffff 	.word	0xfffeffff
 80046cc:	fffeff8f 	.word	0xfffeff8f
 80046d0:	fffdffff 	.word	0xfffdffff
 80046d4:	40012c00 	.word	0x40012c00
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <TIM_OC6_SetConfig+0xa0>)
 80046f6:	401a      	ands	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <TIM_OC6_SetConfig+0xa4>)
 800470c:	4013      	ands	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4a1a      	ldr	r2, [pc, #104]	; (8004788 <TIM_OC6_SetConfig+0xa8>)
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	051b      	lsls	r3, r3, #20
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a16      	ldr	r2, [pc, #88]	; (800478c <TIM_OC6_SetConfig+0xac>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d007      	beq.n	8004748 <TIM_OC6_SetConfig+0x68>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a15      	ldr	r2, [pc, #84]	; (8004790 <TIM_OC6_SetConfig+0xb0>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d003      	beq.n	8004748 <TIM_OC6_SetConfig+0x68>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a14      	ldr	r2, [pc, #80]	; (8004794 <TIM_OC6_SetConfig+0xb4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d109      	bne.n	800475c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <TIM_OC6_SetConfig+0xb8>)
 800474c:	4013      	ands	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	029b      	lsls	r3, r3, #10
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	46bd      	mov	sp, r7
 800477a:	b006      	add	sp, #24
 800477c:	bd80      	pop	{r7, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	ffefffff 	.word	0xffefffff
 8004784:	feff8fff 	.word	0xfeff8fff
 8004788:	ffdfffff 	.word	0xffdfffff
 800478c:	40012c00 	.word	0x40012c00
 8004790:	40014400 	.word	0x40014400
 8004794:	40014800 	.word	0x40014800
 8004798:	fffbffff 	.word	0xfffbffff

0800479c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	221f      	movs	r2, #31
 80047ac:	4013      	ands	r3, r2
 80047ae:	2201      	movs	r2, #1
 80047b0:	409a      	lsls	r2, r3
 80047b2:	0013      	movs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	43d2      	mvns	r2, r2
 80047be:	401a      	ands	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	211f      	movs	r1, #31
 80047cc:	400b      	ands	r3, r1
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4099      	lsls	r1, r3
 80047d2:	000b      	movs	r3, r1
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b006      	add	sp, #24
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	223c      	movs	r2, #60	; 0x3c
 80047f2:	5c9b      	ldrb	r3, [r3, r2]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047f8:	2302      	movs	r3, #2
 80047fa:	e04a      	b.n	8004892 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	223c      	movs	r2, #60	; 0x3c
 8004800:	2101      	movs	r1, #1
 8004802:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	223d      	movs	r2, #61	; 0x3d
 8004808:	2102      	movs	r1, #2
 800480a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1e      	ldr	r2, [pc, #120]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d108      	bne.n	8004838 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800482a:	4013      	ands	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2270      	movs	r2, #112	; 0x70
 800483c:	4393      	bics	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4313      	orrs	r3, r2
 8004848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a11      	ldr	r2, [pc, #68]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a10      	ldr	r2, [pc, #64]	; (80048a4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10c      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	4393      	bics	r3, r2
 800486c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4313      	orrs	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	223d      	movs	r2, #61	; 0x3d
 8004884:	2101      	movs	r1, #1
 8004886:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	223c      	movs	r2, #60	; 0x3c
 800488c:	2100      	movs	r1, #0
 800488e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b004      	add	sp, #16
 8004898:	bd80      	pop	{r7, pc}
 800489a:	46c0      	nop			; (mov r8, r8)
 800489c:	40012c00 	.word	0x40012c00
 80048a0:	ff0fffff 	.word	0xff0fffff
 80048a4:	40000400 	.word	0x40000400

080048a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b0:	46c0      	nop			; (mov r8, r8)
 80048b2:	46bd      	mov	sp, r7
 80048b4:	b002      	add	sp, #8
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	b002      	add	sp, #8
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e046      	b.n	8004978 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2288      	movs	r2, #136	; 0x88
 80048ee:	589b      	ldr	r3, [r3, r2]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d107      	bne.n	8004904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2284      	movs	r2, #132	; 0x84
 80048f8:	2100      	movs	r1, #0
 80048fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	0018      	movs	r0, r3
 8004900:	f7fc fc5e 	bl	80011c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2288      	movs	r2, #136	; 0x88
 8004908:	2124      	movs	r1, #36	; 0x24
 800490a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2101      	movs	r1, #1
 8004918:	438a      	bics	r2, r1
 800491a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fa4e 	bl	8004dc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f8cc 	bl	8004acc <UART_SetConfig>
 8004934:	0003      	movs	r3, r0
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e01c      	b.n	8004978 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	490d      	ldr	r1, [pc, #52]	; (8004980 <HAL_UART_Init+0xa8>)
 800494a:	400a      	ands	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	212a      	movs	r1, #42	; 0x2a
 800495a:	438a      	bics	r2, r1
 800495c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2101      	movs	r1, #1
 800496a:	430a      	orrs	r2, r1
 800496c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	0018      	movs	r0, r3
 8004972:	f000 fadd 	bl	8004f30 <UART_CheckIdleState>
 8004976:	0003      	movs	r3, r0
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	b002      	add	sp, #8
 800497e:	bd80      	pop	{r7, pc}
 8004980:	ffffb7ff 	.word	0xffffb7ff

08004984 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af02      	add	r7, sp, #8
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	1dbb      	adds	r3, r7, #6
 8004992:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2288      	movs	r2, #136	; 0x88
 8004998:	589b      	ldr	r3, [r3, r2]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d000      	beq.n	80049a0 <HAL_UART_Transmit+0x1c>
 800499e:	e090      	b.n	8004ac2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_UART_Transmit+0x2a>
 80049a6:	1dbb      	adds	r3, r7, #6
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e088      	b.n	8004ac4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d109      	bne.n	80049d2 <HAL_UART_Transmit+0x4e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	d001      	beq.n	80049d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e078      	b.n	8004ac4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2290      	movs	r2, #144	; 0x90
 80049d6:	2100      	movs	r1, #0
 80049d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2288      	movs	r2, #136	; 0x88
 80049de:	2121      	movs	r1, #33	; 0x21
 80049e0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049e2:	f7fc fd53 	bl	800148c <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1dba      	adds	r2, r7, #6
 80049ee:	2154      	movs	r1, #84	; 0x54
 80049f0:	8812      	ldrh	r2, [r2, #0]
 80049f2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	1dba      	adds	r2, r7, #6
 80049f8:	2156      	movs	r1, #86	; 0x56
 80049fa:	8812      	ldrh	r2, [r2, #0]
 80049fc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	015b      	lsls	r3, r3, #5
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d108      	bne.n	8004a1c <HAL_UART_Transmit+0x98>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d104      	bne.n	8004a1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e003      	b.n	8004a24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a24:	e030      	b.n	8004a88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	0013      	movs	r3, r2
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	f000 fb26 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004a38:	1e03      	subs	r3, r0, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2288      	movs	r2, #136	; 0x88
 8004a40:	2120      	movs	r1, #32
 8004a42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e03d      	b.n	8004ac4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10b      	bne.n	8004a66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	001a      	movs	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	05d2      	lsls	r2, r2, #23
 8004a5a:	0dd2      	lsrs	r2, r2, #23
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	3302      	adds	r3, #2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	e007      	b.n	8004a76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	781a      	ldrb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	3301      	adds	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2256      	movs	r2, #86	; 0x56
 8004a7a:	5a9b      	ldrh	r3, [r3, r2]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b299      	uxth	r1, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2256      	movs	r2, #86	; 0x56
 8004a86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2256      	movs	r2, #86	; 0x56
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1c8      	bne.n	8004a26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	0013      	movs	r3, r2
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	f000 faef 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004aa6:	1e03      	subs	r3, r0, #0
 8004aa8:	d005      	beq.n	8004ab6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2288      	movs	r2, #136	; 0x88
 8004aae:	2120      	movs	r1, #32
 8004ab0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e006      	b.n	8004ac4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2288      	movs	r2, #136	; 0x88
 8004aba:	2120      	movs	r1, #32
 8004abc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e000      	b.n	8004ac4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
  }
}
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b008      	add	sp, #32
 8004aca:	bd80      	pop	{r7, pc}

08004acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b088      	sub	sp, #32
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ad4:	231e      	movs	r3, #30
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	431a      	orrs	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4aab      	ldr	r2, [pc, #684]	; (8004da8 <UART_SetConfig+0x2dc>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	0019      	movs	r1, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	697a      	ldr	r2, [r7, #20]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4aa6      	ldr	r2, [pc, #664]	; (8004dac <UART_SetConfig+0x2e0>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	0019      	movs	r1, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a9d      	ldr	r2, [pc, #628]	; (8004db0 <UART_SetConfig+0x2e4>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	220f      	movs	r2, #15
 8004b50:	4393      	bics	r3, r2
 8004b52:	0019      	movs	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a93      	ldr	r2, [pc, #588]	; (8004db4 <UART_SetConfig+0x2e8>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d127      	bne.n	8004bba <UART_SetConfig+0xee>
 8004b6a:	4b93      	ldr	r3, [pc, #588]	; (8004db8 <UART_SetConfig+0x2ec>)
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4013      	ands	r3, r2
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	d017      	beq.n	8004ba6 <UART_SetConfig+0xda>
 8004b76:	d81b      	bhi.n	8004bb0 <UART_SetConfig+0xe4>
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d00a      	beq.n	8004b92 <UART_SetConfig+0xc6>
 8004b7c:	d818      	bhi.n	8004bb0 <UART_SetConfig+0xe4>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <UART_SetConfig+0xbc>
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d00a      	beq.n	8004b9c <UART_SetConfig+0xd0>
 8004b86:	e013      	b.n	8004bb0 <UART_SetConfig+0xe4>
 8004b88:	231f      	movs	r3, #31
 8004b8a:	18fb      	adds	r3, r7, r3
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e021      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004b92:	231f      	movs	r3, #31
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2202      	movs	r2, #2
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e01c      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004b9c:	231f      	movs	r3, #31
 8004b9e:	18fb      	adds	r3, r7, r3
 8004ba0:	2204      	movs	r2, #4
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e017      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004ba6:	231f      	movs	r3, #31
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e012      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004bb0:	231f      	movs	r3, #31
 8004bb2:	18fb      	adds	r3, r7, r3
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	701a      	strb	r2, [r3, #0]
 8004bb8:	e00d      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7f      	ldr	r2, [pc, #508]	; (8004dbc <UART_SetConfig+0x2f0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d104      	bne.n	8004bce <UART_SetConfig+0x102>
 8004bc4:	231f      	movs	r3, #31
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e003      	b.n	8004bd6 <UART_SetConfig+0x10a>
 8004bce:	231f      	movs	r3, #31
 8004bd0:	18fb      	adds	r3, r7, r3
 8004bd2:	2210      	movs	r2, #16
 8004bd4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	2380      	movs	r3, #128	; 0x80
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d000      	beq.n	8004be4 <UART_SetConfig+0x118>
 8004be2:	e06f      	b.n	8004cc4 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004be4:	231f      	movs	r3, #31
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b08      	cmp	r3, #8
 8004bec:	d01f      	beq.n	8004c2e <UART_SetConfig+0x162>
 8004bee:	dc22      	bgt.n	8004c36 <UART_SetConfig+0x16a>
 8004bf0:	2b04      	cmp	r3, #4
 8004bf2:	d017      	beq.n	8004c24 <UART_SetConfig+0x158>
 8004bf4:	dc1f      	bgt.n	8004c36 <UART_SetConfig+0x16a>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <UART_SetConfig+0x134>
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d005      	beq.n	8004c0a <UART_SetConfig+0x13e>
 8004bfe:	e01a      	b.n	8004c36 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c00:	f7fe f9c0 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004c04:	0003      	movs	r3, r0
 8004c06:	61bb      	str	r3, [r7, #24]
        break;
 8004c08:	e01c      	b.n	8004c44 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004c0a:	4b6b      	ldr	r3, [pc, #428]	; (8004db8 <UART_SetConfig+0x2ec>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2207      	movs	r2, #7
 8004c12:	4013      	ands	r3, r2
 8004c14:	3301      	adds	r3, #1
 8004c16:	0019      	movs	r1, r3
 8004c18:	4869      	ldr	r0, [pc, #420]	; (8004dc0 <UART_SetConfig+0x2f4>)
 8004c1a:	f7fb fa87 	bl	800012c <__udivsi3>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	61bb      	str	r3, [r7, #24]
        break;
 8004c22:	e00f      	b.n	8004c44 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c24:	f7fe f964 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8004c28:	0003      	movs	r3, r0
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e00a      	b.n	8004c44 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	61bb      	str	r3, [r7, #24]
        break;
 8004c34:	e006      	b.n	8004c44 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c3a:	231e      	movs	r3, #30
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
        break;
 8004c42:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d100      	bne.n	8004c4c <UART_SetConfig+0x180>
 8004c4a:	e097      	b.n	8004d7c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c50:	4b5c      	ldr	r3, [pc, #368]	; (8004dc4 <UART_SetConfig+0x2f8>)
 8004c52:	0052      	lsls	r2, r2, #1
 8004c54:	5ad3      	ldrh	r3, [r2, r3]
 8004c56:	0019      	movs	r1, r3
 8004c58:	69b8      	ldr	r0, [r7, #24]
 8004c5a:	f7fb fa67 	bl	800012c <__udivsi3>
 8004c5e:	0003      	movs	r3, r0
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	18d2      	adds	r2, r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0019      	movs	r1, r3
 8004c70:	0010      	movs	r0, r2
 8004c72:	f7fb fa5b 	bl	800012c <__udivsi3>
 8004c76:	0003      	movs	r3, r0
 8004c78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d91c      	bls.n	8004cba <UART_SetConfig+0x1ee>
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	2380      	movs	r3, #128	; 0x80
 8004c84:	025b      	lsls	r3, r3, #9
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d217      	bcs.n	8004cba <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	200e      	movs	r0, #14
 8004c90:	183b      	adds	r3, r7, r0
 8004c92:	210f      	movs	r1, #15
 8004c94:	438a      	bics	r2, r1
 8004c96:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	2207      	movs	r2, #7
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	b299      	uxth	r1, r3
 8004ca4:	183b      	adds	r3, r7, r0
 8004ca6:	183a      	adds	r2, r7, r0
 8004ca8:	8812      	ldrh	r2, [r2, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	183a      	adds	r2, r7, r0
 8004cb4:	8812      	ldrh	r2, [r2, #0]
 8004cb6:	60da      	str	r2, [r3, #12]
 8004cb8:	e060      	b.n	8004d7c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004cba:	231e      	movs	r3, #30
 8004cbc:	18fb      	adds	r3, r7, r3
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	e05b      	b.n	8004d7c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc4:	231f      	movs	r3, #31
 8004cc6:	18fb      	adds	r3, r7, r3
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d01f      	beq.n	8004d0e <UART_SetConfig+0x242>
 8004cce:	dc22      	bgt.n	8004d16 <UART_SetConfig+0x24a>
 8004cd0:	2b04      	cmp	r3, #4
 8004cd2:	d017      	beq.n	8004d04 <UART_SetConfig+0x238>
 8004cd4:	dc1f      	bgt.n	8004d16 <UART_SetConfig+0x24a>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <UART_SetConfig+0x214>
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d005      	beq.n	8004cea <UART_SetConfig+0x21e>
 8004cde:	e01a      	b.n	8004d16 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe f950 	bl	8002f84 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	61bb      	str	r3, [r7, #24]
        break;
 8004ce8:	e01c      	b.n	8004d24 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004cea:	4b33      	ldr	r3, [pc, #204]	; (8004db8 <UART_SetConfig+0x2ec>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2207      	movs	r2, #7
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	0019      	movs	r1, r3
 8004cf8:	4831      	ldr	r0, [pc, #196]	; (8004dc0 <UART_SetConfig+0x2f4>)
 8004cfa:	f7fb fa17 	bl	800012c <__udivsi3>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	61bb      	str	r3, [r7, #24]
        break;
 8004d02:	e00f      	b.n	8004d24 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d04:	f7fe f8f4 	bl	8002ef0 <HAL_RCC_GetSysClockFreq>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	61bb      	str	r3, [r7, #24]
        break;
 8004d0c:	e00a      	b.n	8004d24 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	2380      	movs	r3, #128	; 0x80
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e006      	b.n	8004d24 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d1a:	231e      	movs	r3, #30
 8004d1c:	18fb      	adds	r3, r7, r3
 8004d1e:	2201      	movs	r2, #1
 8004d20:	701a      	strb	r2, [r3, #0]
        break;
 8004d22:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d028      	beq.n	8004d7c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d2e:	4b25      	ldr	r3, [pc, #148]	; (8004dc4 <UART_SetConfig+0x2f8>)
 8004d30:	0052      	lsls	r2, r2, #1
 8004d32:	5ad3      	ldrh	r3, [r2, r3]
 8004d34:	0019      	movs	r1, r3
 8004d36:	69b8      	ldr	r0, [r7, #24]
 8004d38:	f7fb f9f8 	bl	800012c <__udivsi3>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	001a      	movs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	085b      	lsrs	r3, r3, #1
 8004d46:	18d2      	adds	r2, r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	0019      	movs	r1, r3
 8004d4e:	0010      	movs	r0, r2
 8004d50:	f7fb f9ec 	bl	800012c <__udivsi3>
 8004d54:	0003      	movs	r3, r0
 8004d56:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d90a      	bls.n	8004d74 <UART_SetConfig+0x2a8>
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	025b      	lsls	r3, r3, #9
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d205      	bcs.n	8004d74 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	e003      	b.n	8004d7c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004d74:	231e      	movs	r3, #30
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	226a      	movs	r2, #106	; 0x6a
 8004d80:	2101      	movs	r1, #1
 8004d82:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2268      	movs	r2, #104	; 0x68
 8004d88:	2101      	movs	r1, #1
 8004d8a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004d98:	231e      	movs	r3, #30
 8004d9a:	18fb      	adds	r3, r7, r3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
}
 8004d9e:	0018      	movs	r0, r3
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b008      	add	sp, #32
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	cfff69f3 	.word	0xcfff69f3
 8004dac:	ffffcfff 	.word	0xffffcfff
 8004db0:	11fff4ff 	.word	0x11fff4ff
 8004db4:	40013800 	.word	0x40013800
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	40004400 	.word	0x40004400
 8004dc0:	02dc6c00 	.word	0x02dc6c00
 8004dc4:	08005ca0 	.word	0x08005ca0

08004dc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	2208      	movs	r2, #8
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d00b      	beq.n	8004df2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a4a      	ldr	r2, [pc, #296]	; (8004f0c <UART_AdvFeatureConfig+0x144>)
 8004de2:	4013      	ands	r3, r2
 8004de4:	0019      	movs	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2201      	movs	r2, #1
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a43      	ldr	r2, [pc, #268]	; (8004f10 <UART_AdvFeatureConfig+0x148>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	0019      	movs	r1, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	430a      	orrs	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	2202      	movs	r2, #2
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d00b      	beq.n	8004e36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4a3b      	ldr	r2, [pc, #236]	; (8004f14 <UART_AdvFeatureConfig+0x14c>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	0019      	movs	r1, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	4a34      	ldr	r2, [pc, #208]	; (8004f18 <UART_AdvFeatureConfig+0x150>)
 8004e48:	4013      	ands	r3, r2
 8004e4a:	0019      	movs	r1, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	2210      	movs	r2, #16
 8004e5e:	4013      	ands	r3, r2
 8004e60:	d00b      	beq.n	8004e7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	; (8004f1c <UART_AdvFeatureConfig+0x154>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	2220      	movs	r2, #32
 8004e80:	4013      	ands	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <UART_AdvFeatureConfig+0x158>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	0019      	movs	r1, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea0:	2240      	movs	r2, #64	; 0x40
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d01d      	beq.n	8004ee2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	4a1d      	ldr	r2, [pc, #116]	; (8004f24 <UART_AdvFeatureConfig+0x15c>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	035b      	lsls	r3, r3, #13
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d10b      	bne.n	8004ee2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <UART_AdvFeatureConfig+0x160>)
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	0019      	movs	r1, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	2280      	movs	r2, #128	; 0x80
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d00b      	beq.n	8004f04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <UART_AdvFeatureConfig+0x164>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	0019      	movs	r1, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	605a      	str	r2, [r3, #4]
  }
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	ffff7fff 	.word	0xffff7fff
 8004f10:	fffdffff 	.word	0xfffdffff
 8004f14:	fffeffff 	.word	0xfffeffff
 8004f18:	fffbffff 	.word	0xfffbffff
 8004f1c:	ffffefff 	.word	0xffffefff
 8004f20:	ffffdfff 	.word	0xffffdfff
 8004f24:	ffefffff 	.word	0xffefffff
 8004f28:	ff9fffff 	.word	0xff9fffff
 8004f2c:	fff7ffff 	.word	0xfff7ffff

08004f30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b092      	sub	sp, #72	; 0x48
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2290      	movs	r2, #144	; 0x90
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f40:	f7fc faa4 	bl	800148c <HAL_GetTick>
 8004f44:	0003      	movs	r3, r0
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2208      	movs	r2, #8
 8004f50:	4013      	ands	r3, r2
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d12d      	bne.n	8004fb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	0391      	lsls	r1, r2, #14
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4a47      	ldr	r2, [pc, #284]	; (800507c <UART_CheckIdleState+0x14c>)
 8004f60:	9200      	str	r2, [sp, #0]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f000 f88e 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d022      	beq.n	8004fb2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f74:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f76:	2301      	movs	r3, #1
 8004f78:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f383 8810 	msr	PRIMASK, r3
}
 8004f80:	46c0      	nop			; (mov r8, r8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2180      	movs	r1, #128	; 0x80
 8004f8e:	438a      	bics	r2, r1
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	f383 8810 	msr	PRIMASK, r3
}
 8004f9c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2288      	movs	r2, #136	; 0x88
 8004fa2:	2120      	movs	r1, #32
 8004fa4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2284      	movs	r2, #132	; 0x84
 8004faa:	2100      	movs	r1, #0
 8004fac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e060      	b.n	8005074 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d146      	bne.n	800504e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	2280      	movs	r2, #128	; 0x80
 8004fc4:	03d1      	lsls	r1, r2, #15
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	4a2c      	ldr	r2, [pc, #176]	; (800507c <UART_CheckIdleState+0x14c>)
 8004fca:	9200      	str	r2, [sp, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f000 f859 	bl	8005084 <UART_WaitOnFlagUntilTimeout>
 8004fd2:	1e03      	subs	r3, r0, #0
 8004fd4:	d03b      	beq.n	800504e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fda:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	f383 8810 	msr	PRIMASK, r3
}
 8004fea:	46c0      	nop			; (mov r8, r8)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4922      	ldr	r1, [pc, #136]	; (8005080 <UART_CheckIdleState+0x150>)
 8004ff8:	400a      	ands	r2, r1
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f383 8810 	msr	PRIMASK, r3
}
 8005006:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	61bb      	str	r3, [r7, #24]
  return(result);
 800500e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005010:	633b      	str	r3, [r7, #48]	; 0x30
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2101      	movs	r1, #1
 800502a:	438a      	bics	r2, r1
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	228c      	movs	r2, #140	; 0x8c
 800503e:	2120      	movs	r1, #32
 8005040:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2284      	movs	r2, #132	; 0x84
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e012      	b.n	8005074 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2288      	movs	r2, #136	; 0x88
 8005052:	2120      	movs	r1, #32
 8005054:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	228c      	movs	r2, #140	; 0x8c
 800505a:	2120      	movs	r1, #32
 800505c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2284      	movs	r2, #132	; 0x84
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b010      	add	sp, #64	; 0x40
 800507a:	bd80      	pop	{r7, pc}
 800507c:	01ffffff 	.word	0x01ffffff
 8005080:	fffffedf 	.word	0xfffffedf

08005084 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	603b      	str	r3, [r7, #0]
 8005090:	1dfb      	adds	r3, r7, #7
 8005092:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005094:	e04b      	b.n	800512e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	3301      	adds	r3, #1
 800509a:	d048      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509c:	f7fc f9f6 	bl	800148c <HAL_GetTick>
 80050a0:	0002      	movs	r2, r0
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d302      	bcc.n	80050b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e04b      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2204      	movs	r2, #4
 80050be:	4013      	ands	r3, r2
 80050c0:	d035      	beq.n	800512e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	2208      	movs	r2, #8
 80050ca:	4013      	ands	r3, r2
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d111      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2208      	movs	r2, #8
 80050d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	0018      	movs	r0, r3
 80050dc:	f000 f83c 	bl	8005158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2290      	movs	r2, #144	; 0x90
 80050e4:	2108      	movs	r1, #8
 80050e6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2284      	movs	r2, #132	; 0x84
 80050ec:	2100      	movs	r1, #0
 80050ee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e02c      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	69da      	ldr	r2, [r3, #28]
 80050fa:	2380      	movs	r3, #128	; 0x80
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	401a      	ands	r2, r3
 8005100:	2380      	movs	r3, #128	; 0x80
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	429a      	cmp	r2, r3
 8005106:	d112      	bne.n	800512e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2280      	movs	r2, #128	; 0x80
 800510e:	0112      	lsls	r2, r2, #4
 8005110:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	0018      	movs	r0, r3
 8005116:	f000 f81f 	bl	8005158 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2290      	movs	r2, #144	; 0x90
 800511e:	2120      	movs	r1, #32
 8005120:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2284      	movs	r2, #132	; 0x84
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e00f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	4013      	ands	r3, r2
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	425a      	negs	r2, r3
 800513e:	4153      	adcs	r3, r2
 8005140:	b2db      	uxtb	r3, r3
 8005142:	001a      	movs	r2, r3
 8005144:	1dfb      	adds	r3, r7, #7
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	429a      	cmp	r2, r3
 800514a:	d0a4      	beq.n	8005096 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	0018      	movs	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	b004      	add	sp, #16
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08e      	sub	sp, #56	; 0x38
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005160:	f3ef 8310 	mrs	r3, PRIMASK
 8005164:	617b      	str	r3, [r7, #20]
  return(result);
 8005166:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005168:	637b      	str	r3, [r7, #52]	; 0x34
 800516a:	2301      	movs	r3, #1
 800516c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4926      	ldr	r1, [pc, #152]	; (800521c <UART_EndRxTransfer+0xc4>)
 8005182:	400a      	ands	r2, r1
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f383 8810 	msr	PRIMASK, r3
}
 8005190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005192:	f3ef 8310 	mrs	r3, PRIMASK
 8005196:	623b      	str	r3, [r7, #32]
  return(result);
 8005198:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
 800519c:	2301      	movs	r3, #1
 800519e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	491b      	ldr	r1, [pc, #108]	; (8005220 <UART_EndRxTransfer+0xc8>)
 80051b4:	400a      	ands	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	f383 8810 	msr	PRIMASK, r3
}
 80051c2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d118      	bne.n	80051fe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051d2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051d6:	2301      	movs	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2110      	movs	r1, #16
 80051ee:	438a      	bics	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	228c      	movs	r2, #140	; 0x8c
 8005202:	2120      	movs	r1, #32
 8005204:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	46bd      	mov	sp, r7
 8005216:	b00e      	add	sp, #56	; 0x38
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	fffffedf 	.word	0xfffffedf
 8005220:	effffffe 	.word	0xeffffffe

08005224 <siprintf>:
 8005224:	b40e      	push	{r1, r2, r3}
 8005226:	b500      	push	{lr}
 8005228:	490b      	ldr	r1, [pc, #44]	; (8005258 <siprintf+0x34>)
 800522a:	b09c      	sub	sp, #112	; 0x70
 800522c:	ab1d      	add	r3, sp, #116	; 0x74
 800522e:	9002      	str	r0, [sp, #8]
 8005230:	9006      	str	r0, [sp, #24]
 8005232:	9107      	str	r1, [sp, #28]
 8005234:	9104      	str	r1, [sp, #16]
 8005236:	4809      	ldr	r0, [pc, #36]	; (800525c <siprintf+0x38>)
 8005238:	4909      	ldr	r1, [pc, #36]	; (8005260 <siprintf+0x3c>)
 800523a:	cb04      	ldmia	r3!, {r2}
 800523c:	9105      	str	r1, [sp, #20]
 800523e:	6800      	ldr	r0, [r0, #0]
 8005240:	a902      	add	r1, sp, #8
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f000 f9a2 	bl	800558c <_svfiprintf_r>
 8005248:	2200      	movs	r2, #0
 800524a:	9b02      	ldr	r3, [sp, #8]
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	b01c      	add	sp, #112	; 0x70
 8005250:	bc08      	pop	{r3}
 8005252:	b003      	add	sp, #12
 8005254:	4718      	bx	r3
 8005256:	46c0      	nop			; (mov r8, r8)
 8005258:	7fffffff 	.word	0x7fffffff
 800525c:	20000058 	.word	0x20000058
 8005260:	ffff0208 	.word	0xffff0208

08005264 <memset>:
 8005264:	0003      	movs	r3, r0
 8005266:	1882      	adds	r2, r0, r2
 8005268:	4293      	cmp	r3, r2
 800526a:	d100      	bne.n	800526e <memset+0xa>
 800526c:	4770      	bx	lr
 800526e:	7019      	strb	r1, [r3, #0]
 8005270:	3301      	adds	r3, #1
 8005272:	e7f9      	b.n	8005268 <memset+0x4>

08005274 <__errno>:
 8005274:	4b01      	ldr	r3, [pc, #4]	; (800527c <__errno+0x8>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	4770      	bx	lr
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	20000058 	.word	0x20000058

08005280 <__libc_init_array>:
 8005280:	b570      	push	{r4, r5, r6, lr}
 8005282:	2600      	movs	r6, #0
 8005284:	4c0c      	ldr	r4, [pc, #48]	; (80052b8 <__libc_init_array+0x38>)
 8005286:	4d0d      	ldr	r5, [pc, #52]	; (80052bc <__libc_init_array+0x3c>)
 8005288:	1b64      	subs	r4, r4, r5
 800528a:	10a4      	asrs	r4, r4, #2
 800528c:	42a6      	cmp	r6, r4
 800528e:	d109      	bne.n	80052a4 <__libc_init_array+0x24>
 8005290:	2600      	movs	r6, #0
 8005292:	f000 fc6d 	bl	8005b70 <_init>
 8005296:	4c0a      	ldr	r4, [pc, #40]	; (80052c0 <__libc_init_array+0x40>)
 8005298:	4d0a      	ldr	r5, [pc, #40]	; (80052c4 <__libc_init_array+0x44>)
 800529a:	1b64      	subs	r4, r4, r5
 800529c:	10a4      	asrs	r4, r4, #2
 800529e:	42a6      	cmp	r6, r4
 80052a0:	d105      	bne.n	80052ae <__libc_init_array+0x2e>
 80052a2:	bd70      	pop	{r4, r5, r6, pc}
 80052a4:	00b3      	lsls	r3, r6, #2
 80052a6:	58eb      	ldr	r3, [r5, r3]
 80052a8:	4798      	blx	r3
 80052aa:	3601      	adds	r6, #1
 80052ac:	e7ee      	b.n	800528c <__libc_init_array+0xc>
 80052ae:	00b3      	lsls	r3, r6, #2
 80052b0:	58eb      	ldr	r3, [r5, r3]
 80052b2:	4798      	blx	r3
 80052b4:	3601      	adds	r6, #1
 80052b6:	e7f2      	b.n	800529e <__libc_init_array+0x1e>
 80052b8:	08005cec 	.word	0x08005cec
 80052bc:	08005cec 	.word	0x08005cec
 80052c0:	08005cf0 	.word	0x08005cf0
 80052c4:	08005cec 	.word	0x08005cec

080052c8 <__retarget_lock_acquire_recursive>:
 80052c8:	4770      	bx	lr

080052ca <__retarget_lock_release_recursive>:
 80052ca:	4770      	bx	lr

080052cc <_free_r>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	0005      	movs	r5, r0
 80052d0:	2900      	cmp	r1, #0
 80052d2:	d010      	beq.n	80052f6 <_free_r+0x2a>
 80052d4:	1f0c      	subs	r4, r1, #4
 80052d6:	6823      	ldr	r3, [r4, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	da00      	bge.n	80052de <_free_r+0x12>
 80052dc:	18e4      	adds	r4, r4, r3
 80052de:	0028      	movs	r0, r5
 80052e0:	f000 f8e2 	bl	80054a8 <__malloc_lock>
 80052e4:	4a1d      	ldr	r2, [pc, #116]	; (800535c <_free_r+0x90>)
 80052e6:	6813      	ldr	r3, [r2, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d105      	bne.n	80052f8 <_free_r+0x2c>
 80052ec:	6063      	str	r3, [r4, #4]
 80052ee:	6014      	str	r4, [r2, #0]
 80052f0:	0028      	movs	r0, r5
 80052f2:	f000 f8e1 	bl	80054b8 <__malloc_unlock>
 80052f6:	bd70      	pop	{r4, r5, r6, pc}
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d908      	bls.n	800530e <_free_r+0x42>
 80052fc:	6820      	ldr	r0, [r4, #0]
 80052fe:	1821      	adds	r1, r4, r0
 8005300:	428b      	cmp	r3, r1
 8005302:	d1f3      	bne.n	80052ec <_free_r+0x20>
 8005304:	6819      	ldr	r1, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	1809      	adds	r1, r1, r0
 800530a:	6021      	str	r1, [r4, #0]
 800530c:	e7ee      	b.n	80052ec <_free_r+0x20>
 800530e:	001a      	movs	r2, r3
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <_free_r+0x4e>
 8005316:	42a3      	cmp	r3, r4
 8005318:	d9f9      	bls.n	800530e <_free_r+0x42>
 800531a:	6811      	ldr	r1, [r2, #0]
 800531c:	1850      	adds	r0, r2, r1
 800531e:	42a0      	cmp	r0, r4
 8005320:	d10b      	bne.n	800533a <_free_r+0x6e>
 8005322:	6820      	ldr	r0, [r4, #0]
 8005324:	1809      	adds	r1, r1, r0
 8005326:	1850      	adds	r0, r2, r1
 8005328:	6011      	str	r1, [r2, #0]
 800532a:	4283      	cmp	r3, r0
 800532c:	d1e0      	bne.n	80052f0 <_free_r+0x24>
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	1841      	adds	r1, r0, r1
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	6053      	str	r3, [r2, #4]
 8005338:	e7da      	b.n	80052f0 <_free_r+0x24>
 800533a:	42a0      	cmp	r0, r4
 800533c:	d902      	bls.n	8005344 <_free_r+0x78>
 800533e:	230c      	movs	r3, #12
 8005340:	602b      	str	r3, [r5, #0]
 8005342:	e7d5      	b.n	80052f0 <_free_r+0x24>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	1821      	adds	r1, r4, r0
 8005348:	428b      	cmp	r3, r1
 800534a:	d103      	bne.n	8005354 <_free_r+0x88>
 800534c:	6819      	ldr	r1, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	1809      	adds	r1, r1, r0
 8005352:	6021      	str	r1, [r4, #0]
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	6054      	str	r4, [r2, #4]
 8005358:	e7ca      	b.n	80052f0 <_free_r+0x24>
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	20000370 	.word	0x20000370

08005360 <sbrk_aligned>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4e0f      	ldr	r6, [pc, #60]	; (80053a0 <sbrk_aligned+0x40>)
 8005364:	000d      	movs	r5, r1
 8005366:	6831      	ldr	r1, [r6, #0]
 8005368:	0004      	movs	r4, r0
 800536a:	2900      	cmp	r1, #0
 800536c:	d102      	bne.n	8005374 <sbrk_aligned+0x14>
 800536e:	f000 fba1 	bl	8005ab4 <_sbrk_r>
 8005372:	6030      	str	r0, [r6, #0]
 8005374:	0029      	movs	r1, r5
 8005376:	0020      	movs	r0, r4
 8005378:	f000 fb9c 	bl	8005ab4 <_sbrk_r>
 800537c:	1c43      	adds	r3, r0, #1
 800537e:	d00a      	beq.n	8005396 <sbrk_aligned+0x36>
 8005380:	2303      	movs	r3, #3
 8005382:	1cc5      	adds	r5, r0, #3
 8005384:	439d      	bics	r5, r3
 8005386:	42a8      	cmp	r0, r5
 8005388:	d007      	beq.n	800539a <sbrk_aligned+0x3a>
 800538a:	1a29      	subs	r1, r5, r0
 800538c:	0020      	movs	r0, r4
 800538e:	f000 fb91 	bl	8005ab4 <_sbrk_r>
 8005392:	3001      	adds	r0, #1
 8005394:	d101      	bne.n	800539a <sbrk_aligned+0x3a>
 8005396:	2501      	movs	r5, #1
 8005398:	426d      	negs	r5, r5
 800539a:	0028      	movs	r0, r5
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	20000374 	.word	0x20000374

080053a4 <_malloc_r>:
 80053a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a6:	2203      	movs	r2, #3
 80053a8:	1ccb      	adds	r3, r1, #3
 80053aa:	4393      	bics	r3, r2
 80053ac:	3308      	adds	r3, #8
 80053ae:	0006      	movs	r6, r0
 80053b0:	001f      	movs	r7, r3
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d238      	bcs.n	8005428 <_malloc_r+0x84>
 80053b6:	270c      	movs	r7, #12
 80053b8:	42b9      	cmp	r1, r7
 80053ba:	d837      	bhi.n	800542c <_malloc_r+0x88>
 80053bc:	0030      	movs	r0, r6
 80053be:	f000 f873 	bl	80054a8 <__malloc_lock>
 80053c2:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <_malloc_r+0x100>)
 80053c4:	9300      	str	r3, [sp, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	001c      	movs	r4, r3
 80053ca:	2c00      	cmp	r4, #0
 80053cc:	d133      	bne.n	8005436 <_malloc_r+0x92>
 80053ce:	0039      	movs	r1, r7
 80053d0:	0030      	movs	r0, r6
 80053d2:	f7ff ffc5 	bl	8005360 <sbrk_aligned>
 80053d6:	0004      	movs	r4, r0
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d15e      	bne.n	800549a <_malloc_r+0xf6>
 80053dc:	9b00      	ldr	r3, [sp, #0]
 80053de:	681c      	ldr	r4, [r3, #0]
 80053e0:	0025      	movs	r5, r4
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	d14e      	bne.n	8005484 <_malloc_r+0xe0>
 80053e6:	2c00      	cmp	r4, #0
 80053e8:	d051      	beq.n	800548e <_malloc_r+0xea>
 80053ea:	6823      	ldr	r3, [r4, #0]
 80053ec:	0029      	movs	r1, r5
 80053ee:	18e3      	adds	r3, r4, r3
 80053f0:	0030      	movs	r0, r6
 80053f2:	9301      	str	r3, [sp, #4]
 80053f4:	f000 fb5e 	bl	8005ab4 <_sbrk_r>
 80053f8:	9b01      	ldr	r3, [sp, #4]
 80053fa:	4283      	cmp	r3, r0
 80053fc:	d147      	bne.n	800548e <_malloc_r+0xea>
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	0030      	movs	r0, r6
 8005402:	1aff      	subs	r7, r7, r3
 8005404:	0039      	movs	r1, r7
 8005406:	f7ff ffab 	bl	8005360 <sbrk_aligned>
 800540a:	3001      	adds	r0, #1
 800540c:	d03f      	beq.n	800548e <_malloc_r+0xea>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	19db      	adds	r3, r3, r7
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	9b00      	ldr	r3, [sp, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d040      	beq.n	800549e <_malloc_r+0xfa>
 800541c:	685a      	ldr	r2, [r3, #4]
 800541e:	42a2      	cmp	r2, r4
 8005420:	d133      	bne.n	800548a <_malloc_r+0xe6>
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	e014      	b.n	8005452 <_malloc_r+0xae>
 8005428:	2b00      	cmp	r3, #0
 800542a:	dac5      	bge.n	80053b8 <_malloc_r+0x14>
 800542c:	230c      	movs	r3, #12
 800542e:	2500      	movs	r5, #0
 8005430:	6033      	str	r3, [r6, #0]
 8005432:	0028      	movs	r0, r5
 8005434:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005436:	6821      	ldr	r1, [r4, #0]
 8005438:	1bc9      	subs	r1, r1, r7
 800543a:	d420      	bmi.n	800547e <_malloc_r+0xda>
 800543c:	290b      	cmp	r1, #11
 800543e:	d918      	bls.n	8005472 <_malloc_r+0xce>
 8005440:	19e2      	adds	r2, r4, r7
 8005442:	6027      	str	r7, [r4, #0]
 8005444:	42a3      	cmp	r3, r4
 8005446:	d112      	bne.n	800546e <_malloc_r+0xca>
 8005448:	9b00      	ldr	r3, [sp, #0]
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	6011      	str	r1, [r2, #0]
 8005450:	6053      	str	r3, [r2, #4]
 8005452:	0030      	movs	r0, r6
 8005454:	0025      	movs	r5, r4
 8005456:	f000 f82f 	bl	80054b8 <__malloc_unlock>
 800545a:	2207      	movs	r2, #7
 800545c:	350b      	adds	r5, #11
 800545e:	1d23      	adds	r3, r4, #4
 8005460:	4395      	bics	r5, r2
 8005462:	1aea      	subs	r2, r5, r3
 8005464:	429d      	cmp	r5, r3
 8005466:	d0e4      	beq.n	8005432 <_malloc_r+0x8e>
 8005468:	1b5b      	subs	r3, r3, r5
 800546a:	50a3      	str	r3, [r4, r2]
 800546c:	e7e1      	b.n	8005432 <_malloc_r+0x8e>
 800546e:	605a      	str	r2, [r3, #4]
 8005470:	e7ec      	b.n	800544c <_malloc_r+0xa8>
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	42a3      	cmp	r3, r4
 8005476:	d1d5      	bne.n	8005424 <_malloc_r+0x80>
 8005478:	9b00      	ldr	r3, [sp, #0]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e7e9      	b.n	8005452 <_malloc_r+0xae>
 800547e:	0023      	movs	r3, r4
 8005480:	6864      	ldr	r4, [r4, #4]
 8005482:	e7a2      	b.n	80053ca <_malloc_r+0x26>
 8005484:	002c      	movs	r4, r5
 8005486:	686d      	ldr	r5, [r5, #4]
 8005488:	e7ab      	b.n	80053e2 <_malloc_r+0x3e>
 800548a:	0013      	movs	r3, r2
 800548c:	e7c4      	b.n	8005418 <_malloc_r+0x74>
 800548e:	230c      	movs	r3, #12
 8005490:	0030      	movs	r0, r6
 8005492:	6033      	str	r3, [r6, #0]
 8005494:	f000 f810 	bl	80054b8 <__malloc_unlock>
 8005498:	e7cb      	b.n	8005432 <_malloc_r+0x8e>
 800549a:	6027      	str	r7, [r4, #0]
 800549c:	e7d9      	b.n	8005452 <_malloc_r+0xae>
 800549e:	605b      	str	r3, [r3, #4]
 80054a0:	deff      	udf	#255	; 0xff
 80054a2:	46c0      	nop			; (mov r8, r8)
 80054a4:	20000370 	.word	0x20000370

080054a8 <__malloc_lock>:
 80054a8:	b510      	push	{r4, lr}
 80054aa:	4802      	ldr	r0, [pc, #8]	; (80054b4 <__malloc_lock+0xc>)
 80054ac:	f7ff ff0c 	bl	80052c8 <__retarget_lock_acquire_recursive>
 80054b0:	bd10      	pop	{r4, pc}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	2000036c 	.word	0x2000036c

080054b8 <__malloc_unlock>:
 80054b8:	b510      	push	{r4, lr}
 80054ba:	4802      	ldr	r0, [pc, #8]	; (80054c4 <__malloc_unlock+0xc>)
 80054bc:	f7ff ff05 	bl	80052ca <__retarget_lock_release_recursive>
 80054c0:	bd10      	pop	{r4, pc}
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	2000036c 	.word	0x2000036c

080054c8 <__ssputs_r>:
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ca:	b085      	sub	sp, #20
 80054cc:	9301      	str	r3, [sp, #4]
 80054ce:	9203      	str	r2, [sp, #12]
 80054d0:	688e      	ldr	r6, [r1, #8]
 80054d2:	9a01      	ldr	r2, [sp, #4]
 80054d4:	0007      	movs	r7, r0
 80054d6:	000c      	movs	r4, r1
 80054d8:	680b      	ldr	r3, [r1, #0]
 80054da:	4296      	cmp	r6, r2
 80054dc:	d831      	bhi.n	8005542 <__ssputs_r+0x7a>
 80054de:	898a      	ldrh	r2, [r1, #12]
 80054e0:	2190      	movs	r1, #144	; 0x90
 80054e2:	00c9      	lsls	r1, r1, #3
 80054e4:	420a      	tst	r2, r1
 80054e6:	d029      	beq.n	800553c <__ssputs_r+0x74>
 80054e8:	2003      	movs	r0, #3
 80054ea:	6921      	ldr	r1, [r4, #16]
 80054ec:	1a5b      	subs	r3, r3, r1
 80054ee:	9302      	str	r3, [sp, #8]
 80054f0:	6963      	ldr	r3, [r4, #20]
 80054f2:	4343      	muls	r3, r0
 80054f4:	0fdd      	lsrs	r5, r3, #31
 80054f6:	18ed      	adds	r5, r5, r3
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	9802      	ldr	r0, [sp, #8]
 80054fc:	3301      	adds	r3, #1
 80054fe:	181b      	adds	r3, r3, r0
 8005500:	106d      	asrs	r5, r5, #1
 8005502:	42ab      	cmp	r3, r5
 8005504:	d900      	bls.n	8005508 <__ssputs_r+0x40>
 8005506:	001d      	movs	r5, r3
 8005508:	0552      	lsls	r2, r2, #21
 800550a:	d529      	bpl.n	8005560 <__ssputs_r+0x98>
 800550c:	0029      	movs	r1, r5
 800550e:	0038      	movs	r0, r7
 8005510:	f7ff ff48 	bl	80053a4 <_malloc_r>
 8005514:	1e06      	subs	r6, r0, #0
 8005516:	d02d      	beq.n	8005574 <__ssputs_r+0xac>
 8005518:	9a02      	ldr	r2, [sp, #8]
 800551a:	6921      	ldr	r1, [r4, #16]
 800551c:	f000 fae7 	bl	8005aee <memcpy>
 8005520:	89a2      	ldrh	r2, [r4, #12]
 8005522:	4b19      	ldr	r3, [pc, #100]	; (8005588 <__ssputs_r+0xc0>)
 8005524:	401a      	ands	r2, r3
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	4313      	orrs	r3, r2
 800552a:	81a3      	strh	r3, [r4, #12]
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	6126      	str	r6, [r4, #16]
 8005530:	18f6      	adds	r6, r6, r3
 8005532:	6026      	str	r6, [r4, #0]
 8005534:	6165      	str	r5, [r4, #20]
 8005536:	9e01      	ldr	r6, [sp, #4]
 8005538:	1aed      	subs	r5, r5, r3
 800553a:	60a5      	str	r5, [r4, #8]
 800553c:	9b01      	ldr	r3, [sp, #4]
 800553e:	429e      	cmp	r6, r3
 8005540:	d900      	bls.n	8005544 <__ssputs_r+0x7c>
 8005542:	9e01      	ldr	r6, [sp, #4]
 8005544:	0032      	movs	r2, r6
 8005546:	9903      	ldr	r1, [sp, #12]
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	f000 fa9f 	bl	8005a8c <memmove>
 800554e:	2000      	movs	r0, #0
 8005550:	68a3      	ldr	r3, [r4, #8]
 8005552:	1b9b      	subs	r3, r3, r6
 8005554:	60a3      	str	r3, [r4, #8]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	199b      	adds	r3, r3, r6
 800555a:	6023      	str	r3, [r4, #0]
 800555c:	b005      	add	sp, #20
 800555e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005560:	002a      	movs	r2, r5
 8005562:	0038      	movs	r0, r7
 8005564:	f000 facc 	bl	8005b00 <_realloc_r>
 8005568:	1e06      	subs	r6, r0, #0
 800556a:	d1df      	bne.n	800552c <__ssputs_r+0x64>
 800556c:	0038      	movs	r0, r7
 800556e:	6921      	ldr	r1, [r4, #16]
 8005570:	f7ff feac 	bl	80052cc <_free_r>
 8005574:	230c      	movs	r3, #12
 8005576:	2001      	movs	r0, #1
 8005578:	603b      	str	r3, [r7, #0]
 800557a:	89a2      	ldrh	r2, [r4, #12]
 800557c:	3334      	adds	r3, #52	; 0x34
 800557e:	4313      	orrs	r3, r2
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	4240      	negs	r0, r0
 8005584:	e7ea      	b.n	800555c <__ssputs_r+0x94>
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	fffffb7f 	.word	0xfffffb7f

0800558c <_svfiprintf_r>:
 800558c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800558e:	b0a1      	sub	sp, #132	; 0x84
 8005590:	9003      	str	r0, [sp, #12]
 8005592:	001d      	movs	r5, r3
 8005594:	898b      	ldrh	r3, [r1, #12]
 8005596:	000f      	movs	r7, r1
 8005598:	0016      	movs	r6, r2
 800559a:	061b      	lsls	r3, r3, #24
 800559c:	d511      	bpl.n	80055c2 <_svfiprintf_r+0x36>
 800559e:	690b      	ldr	r3, [r1, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d10e      	bne.n	80055c2 <_svfiprintf_r+0x36>
 80055a4:	2140      	movs	r1, #64	; 0x40
 80055a6:	f7ff fefd 	bl	80053a4 <_malloc_r>
 80055aa:	6038      	str	r0, [r7, #0]
 80055ac:	6138      	str	r0, [r7, #16]
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d105      	bne.n	80055be <_svfiprintf_r+0x32>
 80055b2:	230c      	movs	r3, #12
 80055b4:	9a03      	ldr	r2, [sp, #12]
 80055b6:	3801      	subs	r0, #1
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	b021      	add	sp, #132	; 0x84
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055be:	2340      	movs	r3, #64	; 0x40
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	2300      	movs	r3, #0
 80055c4:	ac08      	add	r4, sp, #32
 80055c6:	6163      	str	r3, [r4, #20]
 80055c8:	3320      	adds	r3, #32
 80055ca:	7663      	strb	r3, [r4, #25]
 80055cc:	3310      	adds	r3, #16
 80055ce:	76a3      	strb	r3, [r4, #26]
 80055d0:	9507      	str	r5, [sp, #28]
 80055d2:	0035      	movs	r5, r6
 80055d4:	782b      	ldrb	r3, [r5, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <_svfiprintf_r+0x52>
 80055da:	2b25      	cmp	r3, #37	; 0x25
 80055dc:	d148      	bne.n	8005670 <_svfiprintf_r+0xe4>
 80055de:	1bab      	subs	r3, r5, r6
 80055e0:	9305      	str	r3, [sp, #20]
 80055e2:	42b5      	cmp	r5, r6
 80055e4:	d00b      	beq.n	80055fe <_svfiprintf_r+0x72>
 80055e6:	0032      	movs	r2, r6
 80055e8:	0039      	movs	r1, r7
 80055ea:	9803      	ldr	r0, [sp, #12]
 80055ec:	f7ff ff6c 	bl	80054c8 <__ssputs_r>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d100      	bne.n	80055f6 <_svfiprintf_r+0x6a>
 80055f4:	e0af      	b.n	8005756 <_svfiprintf_r+0x1ca>
 80055f6:	6963      	ldr	r3, [r4, #20]
 80055f8:	9a05      	ldr	r2, [sp, #20]
 80055fa:	189b      	adds	r3, r3, r2
 80055fc:	6163      	str	r3, [r4, #20]
 80055fe:	782b      	ldrb	r3, [r5, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d100      	bne.n	8005606 <_svfiprintf_r+0x7a>
 8005604:	e0a7      	b.n	8005756 <_svfiprintf_r+0x1ca>
 8005606:	2201      	movs	r2, #1
 8005608:	2300      	movs	r3, #0
 800560a:	4252      	negs	r2, r2
 800560c:	6062      	str	r2, [r4, #4]
 800560e:	a904      	add	r1, sp, #16
 8005610:	3254      	adds	r2, #84	; 0x54
 8005612:	1852      	adds	r2, r2, r1
 8005614:	1c6e      	adds	r6, r5, #1
 8005616:	6023      	str	r3, [r4, #0]
 8005618:	60e3      	str	r3, [r4, #12]
 800561a:	60a3      	str	r3, [r4, #8]
 800561c:	7013      	strb	r3, [r2, #0]
 800561e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005620:	4b55      	ldr	r3, [pc, #340]	; (8005778 <_svfiprintf_r+0x1ec>)
 8005622:	2205      	movs	r2, #5
 8005624:	0018      	movs	r0, r3
 8005626:	7831      	ldrb	r1, [r6, #0]
 8005628:	9305      	str	r3, [sp, #20]
 800562a:	f000 fa55 	bl	8005ad8 <memchr>
 800562e:	1c75      	adds	r5, r6, #1
 8005630:	2800      	cmp	r0, #0
 8005632:	d11f      	bne.n	8005674 <_svfiprintf_r+0xe8>
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	06d3      	lsls	r3, r2, #27
 8005638:	d504      	bpl.n	8005644 <_svfiprintf_r+0xb8>
 800563a:	2353      	movs	r3, #83	; 0x53
 800563c:	a904      	add	r1, sp, #16
 800563e:	185b      	adds	r3, r3, r1
 8005640:	2120      	movs	r1, #32
 8005642:	7019      	strb	r1, [r3, #0]
 8005644:	0713      	lsls	r3, r2, #28
 8005646:	d504      	bpl.n	8005652 <_svfiprintf_r+0xc6>
 8005648:	2353      	movs	r3, #83	; 0x53
 800564a:	a904      	add	r1, sp, #16
 800564c:	185b      	adds	r3, r3, r1
 800564e:	212b      	movs	r1, #43	; 0x2b
 8005650:	7019      	strb	r1, [r3, #0]
 8005652:	7833      	ldrb	r3, [r6, #0]
 8005654:	2b2a      	cmp	r3, #42	; 0x2a
 8005656:	d016      	beq.n	8005686 <_svfiprintf_r+0xfa>
 8005658:	0035      	movs	r5, r6
 800565a:	2100      	movs	r1, #0
 800565c:	200a      	movs	r0, #10
 800565e:	68e3      	ldr	r3, [r4, #12]
 8005660:	782a      	ldrb	r2, [r5, #0]
 8005662:	1c6e      	adds	r6, r5, #1
 8005664:	3a30      	subs	r2, #48	; 0x30
 8005666:	2a09      	cmp	r2, #9
 8005668:	d94e      	bls.n	8005708 <_svfiprintf_r+0x17c>
 800566a:	2900      	cmp	r1, #0
 800566c:	d111      	bne.n	8005692 <_svfiprintf_r+0x106>
 800566e:	e017      	b.n	80056a0 <_svfiprintf_r+0x114>
 8005670:	3501      	adds	r5, #1
 8005672:	e7af      	b.n	80055d4 <_svfiprintf_r+0x48>
 8005674:	9b05      	ldr	r3, [sp, #20]
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	1ac0      	subs	r0, r0, r3
 800567a:	2301      	movs	r3, #1
 800567c:	4083      	lsls	r3, r0
 800567e:	4313      	orrs	r3, r2
 8005680:	002e      	movs	r6, r5
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	e7cc      	b.n	8005620 <_svfiprintf_r+0x94>
 8005686:	9b07      	ldr	r3, [sp, #28]
 8005688:	1d19      	adds	r1, r3, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	9107      	str	r1, [sp, #28]
 800568e:	2b00      	cmp	r3, #0
 8005690:	db01      	blt.n	8005696 <_svfiprintf_r+0x10a>
 8005692:	930b      	str	r3, [sp, #44]	; 0x2c
 8005694:	e004      	b.n	80056a0 <_svfiprintf_r+0x114>
 8005696:	425b      	negs	r3, r3
 8005698:	60e3      	str	r3, [r4, #12]
 800569a:	2302      	movs	r3, #2
 800569c:	4313      	orrs	r3, r2
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	782b      	ldrb	r3, [r5, #0]
 80056a2:	2b2e      	cmp	r3, #46	; 0x2e
 80056a4:	d10a      	bne.n	80056bc <_svfiprintf_r+0x130>
 80056a6:	786b      	ldrb	r3, [r5, #1]
 80056a8:	2b2a      	cmp	r3, #42	; 0x2a
 80056aa:	d135      	bne.n	8005718 <_svfiprintf_r+0x18c>
 80056ac:	9b07      	ldr	r3, [sp, #28]
 80056ae:	3502      	adds	r5, #2
 80056b0:	1d1a      	adds	r2, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	9207      	str	r2, [sp, #28]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	db2b      	blt.n	8005712 <_svfiprintf_r+0x186>
 80056ba:	9309      	str	r3, [sp, #36]	; 0x24
 80056bc:	4e2f      	ldr	r6, [pc, #188]	; (800577c <_svfiprintf_r+0x1f0>)
 80056be:	2203      	movs	r2, #3
 80056c0:	0030      	movs	r0, r6
 80056c2:	7829      	ldrb	r1, [r5, #0]
 80056c4:	f000 fa08 	bl	8005ad8 <memchr>
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d006      	beq.n	80056da <_svfiprintf_r+0x14e>
 80056cc:	2340      	movs	r3, #64	; 0x40
 80056ce:	1b80      	subs	r0, r0, r6
 80056d0:	4083      	lsls	r3, r0
 80056d2:	6822      	ldr	r2, [r4, #0]
 80056d4:	3501      	adds	r5, #1
 80056d6:	4313      	orrs	r3, r2
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	7829      	ldrb	r1, [r5, #0]
 80056dc:	2206      	movs	r2, #6
 80056de:	4828      	ldr	r0, [pc, #160]	; (8005780 <_svfiprintf_r+0x1f4>)
 80056e0:	1c6e      	adds	r6, r5, #1
 80056e2:	7621      	strb	r1, [r4, #24]
 80056e4:	f000 f9f8 	bl	8005ad8 <memchr>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d03c      	beq.n	8005766 <_svfiprintf_r+0x1da>
 80056ec:	4b25      	ldr	r3, [pc, #148]	; (8005784 <_svfiprintf_r+0x1f8>)
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d125      	bne.n	800573e <_svfiprintf_r+0x1b2>
 80056f2:	2207      	movs	r2, #7
 80056f4:	9b07      	ldr	r3, [sp, #28]
 80056f6:	3307      	adds	r3, #7
 80056f8:	4393      	bics	r3, r2
 80056fa:	3308      	adds	r3, #8
 80056fc:	9307      	str	r3, [sp, #28]
 80056fe:	6963      	ldr	r3, [r4, #20]
 8005700:	9a04      	ldr	r2, [sp, #16]
 8005702:	189b      	adds	r3, r3, r2
 8005704:	6163      	str	r3, [r4, #20]
 8005706:	e764      	b.n	80055d2 <_svfiprintf_r+0x46>
 8005708:	4343      	muls	r3, r0
 800570a:	0035      	movs	r5, r6
 800570c:	2101      	movs	r1, #1
 800570e:	189b      	adds	r3, r3, r2
 8005710:	e7a6      	b.n	8005660 <_svfiprintf_r+0xd4>
 8005712:	2301      	movs	r3, #1
 8005714:	425b      	negs	r3, r3
 8005716:	e7d0      	b.n	80056ba <_svfiprintf_r+0x12e>
 8005718:	2300      	movs	r3, #0
 800571a:	200a      	movs	r0, #10
 800571c:	001a      	movs	r2, r3
 800571e:	3501      	adds	r5, #1
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	7829      	ldrb	r1, [r5, #0]
 8005724:	1c6e      	adds	r6, r5, #1
 8005726:	3930      	subs	r1, #48	; 0x30
 8005728:	2909      	cmp	r1, #9
 800572a:	d903      	bls.n	8005734 <_svfiprintf_r+0x1a8>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0c5      	beq.n	80056bc <_svfiprintf_r+0x130>
 8005730:	9209      	str	r2, [sp, #36]	; 0x24
 8005732:	e7c3      	b.n	80056bc <_svfiprintf_r+0x130>
 8005734:	4342      	muls	r2, r0
 8005736:	0035      	movs	r5, r6
 8005738:	2301      	movs	r3, #1
 800573a:	1852      	adds	r2, r2, r1
 800573c:	e7f1      	b.n	8005722 <_svfiprintf_r+0x196>
 800573e:	aa07      	add	r2, sp, #28
 8005740:	9200      	str	r2, [sp, #0]
 8005742:	0021      	movs	r1, r4
 8005744:	003a      	movs	r2, r7
 8005746:	4b10      	ldr	r3, [pc, #64]	; (8005788 <_svfiprintf_r+0x1fc>)
 8005748:	9803      	ldr	r0, [sp, #12]
 800574a:	e000      	b.n	800574e <_svfiprintf_r+0x1c2>
 800574c:	bf00      	nop
 800574e:	9004      	str	r0, [sp, #16]
 8005750:	9b04      	ldr	r3, [sp, #16]
 8005752:	3301      	adds	r3, #1
 8005754:	d1d3      	bne.n	80056fe <_svfiprintf_r+0x172>
 8005756:	89bb      	ldrh	r3, [r7, #12]
 8005758:	980d      	ldr	r0, [sp, #52]	; 0x34
 800575a:	065b      	lsls	r3, r3, #25
 800575c:	d400      	bmi.n	8005760 <_svfiprintf_r+0x1d4>
 800575e:	e72c      	b.n	80055ba <_svfiprintf_r+0x2e>
 8005760:	2001      	movs	r0, #1
 8005762:	4240      	negs	r0, r0
 8005764:	e729      	b.n	80055ba <_svfiprintf_r+0x2e>
 8005766:	aa07      	add	r2, sp, #28
 8005768:	9200      	str	r2, [sp, #0]
 800576a:	0021      	movs	r1, r4
 800576c:	003a      	movs	r2, r7
 800576e:	4b06      	ldr	r3, [pc, #24]	; (8005788 <_svfiprintf_r+0x1fc>)
 8005770:	9803      	ldr	r0, [sp, #12]
 8005772:	f000 f87b 	bl	800586c <_printf_i>
 8005776:	e7ea      	b.n	800574e <_svfiprintf_r+0x1c2>
 8005778:	08005cb8 	.word	0x08005cb8
 800577c:	08005cbe 	.word	0x08005cbe
 8005780:	08005cc2 	.word	0x08005cc2
 8005784:	00000000 	.word	0x00000000
 8005788:	080054c9 	.word	0x080054c9

0800578c <_printf_common>:
 800578c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800578e:	0016      	movs	r6, r2
 8005790:	9301      	str	r3, [sp, #4]
 8005792:	688a      	ldr	r2, [r1, #8]
 8005794:	690b      	ldr	r3, [r1, #16]
 8005796:	000c      	movs	r4, r1
 8005798:	9000      	str	r0, [sp, #0]
 800579a:	4293      	cmp	r3, r2
 800579c:	da00      	bge.n	80057a0 <_printf_common+0x14>
 800579e:	0013      	movs	r3, r2
 80057a0:	0022      	movs	r2, r4
 80057a2:	6033      	str	r3, [r6, #0]
 80057a4:	3243      	adds	r2, #67	; 0x43
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	2a00      	cmp	r2, #0
 80057aa:	d001      	beq.n	80057b0 <_printf_common+0x24>
 80057ac:	3301      	adds	r3, #1
 80057ae:	6033      	str	r3, [r6, #0]
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	d502      	bpl.n	80057bc <_printf_common+0x30>
 80057b6:	6833      	ldr	r3, [r6, #0]
 80057b8:	3302      	adds	r3, #2
 80057ba:	6033      	str	r3, [r6, #0]
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	2306      	movs	r3, #6
 80057c0:	0015      	movs	r5, r2
 80057c2:	401d      	ands	r5, r3
 80057c4:	421a      	tst	r2, r3
 80057c6:	d027      	beq.n	8005818 <_printf_common+0x8c>
 80057c8:	0023      	movs	r3, r4
 80057ca:	3343      	adds	r3, #67	; 0x43
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	1e5a      	subs	r2, r3, #1
 80057d0:	4193      	sbcs	r3, r2
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	0692      	lsls	r2, r2, #26
 80057d6:	d430      	bmi.n	800583a <_printf_common+0xae>
 80057d8:	0022      	movs	r2, r4
 80057da:	9901      	ldr	r1, [sp, #4]
 80057dc:	9800      	ldr	r0, [sp, #0]
 80057de:	9d08      	ldr	r5, [sp, #32]
 80057e0:	3243      	adds	r2, #67	; 0x43
 80057e2:	47a8      	blx	r5
 80057e4:	3001      	adds	r0, #1
 80057e6:	d025      	beq.n	8005834 <_printf_common+0xa8>
 80057e8:	2206      	movs	r2, #6
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	2500      	movs	r5, #0
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d105      	bne.n	8005800 <_printf_common+0x74>
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	68e5      	ldr	r5, [r4, #12]
 80057f8:	1aed      	subs	r5, r5, r3
 80057fa:	43eb      	mvns	r3, r5
 80057fc:	17db      	asrs	r3, r3, #31
 80057fe:	401d      	ands	r5, r3
 8005800:	68a3      	ldr	r3, [r4, #8]
 8005802:	6922      	ldr	r2, [r4, #16]
 8005804:	4293      	cmp	r3, r2
 8005806:	dd01      	ble.n	800580c <_printf_common+0x80>
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	18ed      	adds	r5, r5, r3
 800580c:	2600      	movs	r6, #0
 800580e:	42b5      	cmp	r5, r6
 8005810:	d120      	bne.n	8005854 <_printf_common+0xc8>
 8005812:	2000      	movs	r0, #0
 8005814:	e010      	b.n	8005838 <_printf_common+0xac>
 8005816:	3501      	adds	r5, #1
 8005818:	68e3      	ldr	r3, [r4, #12]
 800581a:	6832      	ldr	r2, [r6, #0]
 800581c:	1a9b      	subs	r3, r3, r2
 800581e:	42ab      	cmp	r3, r5
 8005820:	ddd2      	ble.n	80057c8 <_printf_common+0x3c>
 8005822:	0022      	movs	r2, r4
 8005824:	2301      	movs	r3, #1
 8005826:	9901      	ldr	r1, [sp, #4]
 8005828:	9800      	ldr	r0, [sp, #0]
 800582a:	9f08      	ldr	r7, [sp, #32]
 800582c:	3219      	adds	r2, #25
 800582e:	47b8      	blx	r7
 8005830:	3001      	adds	r0, #1
 8005832:	d1f0      	bne.n	8005816 <_printf_common+0x8a>
 8005834:	2001      	movs	r0, #1
 8005836:	4240      	negs	r0, r0
 8005838:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800583a:	2030      	movs	r0, #48	; 0x30
 800583c:	18e1      	adds	r1, r4, r3
 800583e:	3143      	adds	r1, #67	; 0x43
 8005840:	7008      	strb	r0, [r1, #0]
 8005842:	0021      	movs	r1, r4
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	3145      	adds	r1, #69	; 0x45
 8005848:	7809      	ldrb	r1, [r1, #0]
 800584a:	18a2      	adds	r2, r4, r2
 800584c:	3243      	adds	r2, #67	; 0x43
 800584e:	3302      	adds	r3, #2
 8005850:	7011      	strb	r1, [r2, #0]
 8005852:	e7c1      	b.n	80057d8 <_printf_common+0x4c>
 8005854:	0022      	movs	r2, r4
 8005856:	2301      	movs	r3, #1
 8005858:	9901      	ldr	r1, [sp, #4]
 800585a:	9800      	ldr	r0, [sp, #0]
 800585c:	9f08      	ldr	r7, [sp, #32]
 800585e:	321a      	adds	r2, #26
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	d0e6      	beq.n	8005834 <_printf_common+0xa8>
 8005866:	3601      	adds	r6, #1
 8005868:	e7d1      	b.n	800580e <_printf_common+0x82>
	...

0800586c <_printf_i>:
 800586c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586e:	b08b      	sub	sp, #44	; 0x2c
 8005870:	9206      	str	r2, [sp, #24]
 8005872:	000a      	movs	r2, r1
 8005874:	3243      	adds	r2, #67	; 0x43
 8005876:	9307      	str	r3, [sp, #28]
 8005878:	9005      	str	r0, [sp, #20]
 800587a:	9204      	str	r2, [sp, #16]
 800587c:	7e0a      	ldrb	r2, [r1, #24]
 800587e:	000c      	movs	r4, r1
 8005880:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005882:	2a78      	cmp	r2, #120	; 0x78
 8005884:	d809      	bhi.n	800589a <_printf_i+0x2e>
 8005886:	2a62      	cmp	r2, #98	; 0x62
 8005888:	d80b      	bhi.n	80058a2 <_printf_i+0x36>
 800588a:	2a00      	cmp	r2, #0
 800588c:	d100      	bne.n	8005890 <_printf_i+0x24>
 800588e:	e0be      	b.n	8005a0e <_printf_i+0x1a2>
 8005890:	497c      	ldr	r1, [pc, #496]	; (8005a84 <_printf_i+0x218>)
 8005892:	9103      	str	r1, [sp, #12]
 8005894:	2a58      	cmp	r2, #88	; 0x58
 8005896:	d100      	bne.n	800589a <_printf_i+0x2e>
 8005898:	e093      	b.n	80059c2 <_printf_i+0x156>
 800589a:	0026      	movs	r6, r4
 800589c:	3642      	adds	r6, #66	; 0x42
 800589e:	7032      	strb	r2, [r6, #0]
 80058a0:	e022      	b.n	80058e8 <_printf_i+0x7c>
 80058a2:	0010      	movs	r0, r2
 80058a4:	3863      	subs	r0, #99	; 0x63
 80058a6:	2815      	cmp	r0, #21
 80058a8:	d8f7      	bhi.n	800589a <_printf_i+0x2e>
 80058aa:	f7fa fc35 	bl	8000118 <__gnu_thumb1_case_shi>
 80058ae:	0016      	.short	0x0016
 80058b0:	fff6001f 	.word	0xfff6001f
 80058b4:	fff6fff6 	.word	0xfff6fff6
 80058b8:	001ffff6 	.word	0x001ffff6
 80058bc:	fff6fff6 	.word	0xfff6fff6
 80058c0:	fff6fff6 	.word	0xfff6fff6
 80058c4:	003600a3 	.word	0x003600a3
 80058c8:	fff60083 	.word	0xfff60083
 80058cc:	00b4fff6 	.word	0x00b4fff6
 80058d0:	0036fff6 	.word	0x0036fff6
 80058d4:	fff6fff6 	.word	0xfff6fff6
 80058d8:	0087      	.short	0x0087
 80058da:	0026      	movs	r6, r4
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	3642      	adds	r6, #66	; 0x42
 80058e0:	1d11      	adds	r1, r2, #4
 80058e2:	6019      	str	r1, [r3, #0]
 80058e4:	6813      	ldr	r3, [r2, #0]
 80058e6:	7033      	strb	r3, [r6, #0]
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0a2      	b.n	8005a32 <_printf_i+0x1c6>
 80058ec:	6818      	ldr	r0, [r3, #0]
 80058ee:	6809      	ldr	r1, [r1, #0]
 80058f0:	1d02      	adds	r2, r0, #4
 80058f2:	060d      	lsls	r5, r1, #24
 80058f4:	d50b      	bpl.n	800590e <_printf_i+0xa2>
 80058f6:	6805      	ldr	r5, [r0, #0]
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	2d00      	cmp	r5, #0
 80058fc:	da03      	bge.n	8005906 <_printf_i+0x9a>
 80058fe:	232d      	movs	r3, #45	; 0x2d
 8005900:	9a04      	ldr	r2, [sp, #16]
 8005902:	426d      	negs	r5, r5
 8005904:	7013      	strb	r3, [r2, #0]
 8005906:	4b5f      	ldr	r3, [pc, #380]	; (8005a84 <_printf_i+0x218>)
 8005908:	270a      	movs	r7, #10
 800590a:	9303      	str	r3, [sp, #12]
 800590c:	e01b      	b.n	8005946 <_printf_i+0xda>
 800590e:	6805      	ldr	r5, [r0, #0]
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	0649      	lsls	r1, r1, #25
 8005914:	d5f1      	bpl.n	80058fa <_printf_i+0x8e>
 8005916:	b22d      	sxth	r5, r5
 8005918:	e7ef      	b.n	80058fa <_printf_i+0x8e>
 800591a:	680d      	ldr	r5, [r1, #0]
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	1d08      	adds	r0, r1, #4
 8005920:	6018      	str	r0, [r3, #0]
 8005922:	062e      	lsls	r6, r5, #24
 8005924:	d501      	bpl.n	800592a <_printf_i+0xbe>
 8005926:	680d      	ldr	r5, [r1, #0]
 8005928:	e003      	b.n	8005932 <_printf_i+0xc6>
 800592a:	066d      	lsls	r5, r5, #25
 800592c:	d5fb      	bpl.n	8005926 <_printf_i+0xba>
 800592e:	680d      	ldr	r5, [r1, #0]
 8005930:	b2ad      	uxth	r5, r5
 8005932:	4b54      	ldr	r3, [pc, #336]	; (8005a84 <_printf_i+0x218>)
 8005934:	2708      	movs	r7, #8
 8005936:	9303      	str	r3, [sp, #12]
 8005938:	2a6f      	cmp	r2, #111	; 0x6f
 800593a:	d000      	beq.n	800593e <_printf_i+0xd2>
 800593c:	3702      	adds	r7, #2
 800593e:	0023      	movs	r3, r4
 8005940:	2200      	movs	r2, #0
 8005942:	3343      	adds	r3, #67	; 0x43
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	db03      	blt.n	8005956 <_printf_i+0xea>
 800594e:	2104      	movs	r1, #4
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	438a      	bics	r2, r1
 8005954:	6022      	str	r2, [r4, #0]
 8005956:	2d00      	cmp	r5, #0
 8005958:	d102      	bne.n	8005960 <_printf_i+0xf4>
 800595a:	9e04      	ldr	r6, [sp, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00c      	beq.n	800597a <_printf_i+0x10e>
 8005960:	9e04      	ldr	r6, [sp, #16]
 8005962:	0028      	movs	r0, r5
 8005964:	0039      	movs	r1, r7
 8005966:	f7fa fc67 	bl	8000238 <__aeabi_uidivmod>
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	3e01      	subs	r6, #1
 800596e:	5c5b      	ldrb	r3, [r3, r1]
 8005970:	7033      	strb	r3, [r6, #0]
 8005972:	002b      	movs	r3, r5
 8005974:	0005      	movs	r5, r0
 8005976:	429f      	cmp	r7, r3
 8005978:	d9f3      	bls.n	8005962 <_printf_i+0xf6>
 800597a:	2f08      	cmp	r7, #8
 800597c:	d109      	bne.n	8005992 <_printf_i+0x126>
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	07db      	lsls	r3, r3, #31
 8005982:	d506      	bpl.n	8005992 <_printf_i+0x126>
 8005984:	6862      	ldr	r2, [r4, #4]
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	429a      	cmp	r2, r3
 800598a:	dc02      	bgt.n	8005992 <_printf_i+0x126>
 800598c:	2330      	movs	r3, #48	; 0x30
 800598e:	3e01      	subs	r6, #1
 8005990:	7033      	strb	r3, [r6, #0]
 8005992:	9b04      	ldr	r3, [sp, #16]
 8005994:	1b9b      	subs	r3, r3, r6
 8005996:	6123      	str	r3, [r4, #16]
 8005998:	9b07      	ldr	r3, [sp, #28]
 800599a:	0021      	movs	r1, r4
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	9805      	ldr	r0, [sp, #20]
 80059a0:	9b06      	ldr	r3, [sp, #24]
 80059a2:	aa09      	add	r2, sp, #36	; 0x24
 80059a4:	f7ff fef2 	bl	800578c <_printf_common>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d147      	bne.n	8005a3c <_printf_i+0x1d0>
 80059ac:	2001      	movs	r0, #1
 80059ae:	4240      	negs	r0, r0
 80059b0:	b00b      	add	sp, #44	; 0x2c
 80059b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b4:	2220      	movs	r2, #32
 80059b6:	6809      	ldr	r1, [r1, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	6022      	str	r2, [r4, #0]
 80059bc:	2278      	movs	r2, #120	; 0x78
 80059be:	4932      	ldr	r1, [pc, #200]	; (8005a88 <_printf_i+0x21c>)
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	0021      	movs	r1, r4
 80059c4:	3145      	adds	r1, #69	; 0x45
 80059c6:	700a      	strb	r2, [r1, #0]
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	6822      	ldr	r2, [r4, #0]
 80059cc:	c920      	ldmia	r1!, {r5}
 80059ce:	0610      	lsls	r0, r2, #24
 80059d0:	d402      	bmi.n	80059d8 <_printf_i+0x16c>
 80059d2:	0650      	lsls	r0, r2, #25
 80059d4:	d500      	bpl.n	80059d8 <_printf_i+0x16c>
 80059d6:	b2ad      	uxth	r5, r5
 80059d8:	6019      	str	r1, [r3, #0]
 80059da:	07d3      	lsls	r3, r2, #31
 80059dc:	d502      	bpl.n	80059e4 <_printf_i+0x178>
 80059de:	2320      	movs	r3, #32
 80059e0:	4313      	orrs	r3, r2
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	2710      	movs	r7, #16
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	d1a9      	bne.n	800593e <_printf_i+0xd2>
 80059ea:	2220      	movs	r2, #32
 80059ec:	6823      	ldr	r3, [r4, #0]
 80059ee:	4393      	bics	r3, r2
 80059f0:	6023      	str	r3, [r4, #0]
 80059f2:	e7a4      	b.n	800593e <_printf_i+0xd2>
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	680d      	ldr	r5, [r1, #0]
 80059f8:	1d10      	adds	r0, r2, #4
 80059fa:	6949      	ldr	r1, [r1, #20]
 80059fc:	6018      	str	r0, [r3, #0]
 80059fe:	6813      	ldr	r3, [r2, #0]
 8005a00:	062e      	lsls	r6, r5, #24
 8005a02:	d501      	bpl.n	8005a08 <_printf_i+0x19c>
 8005a04:	6019      	str	r1, [r3, #0]
 8005a06:	e002      	b.n	8005a0e <_printf_i+0x1a2>
 8005a08:	066d      	lsls	r5, r5, #25
 8005a0a:	d5fb      	bpl.n	8005a04 <_printf_i+0x198>
 8005a0c:	8019      	strh	r1, [r3, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	9e04      	ldr	r6, [sp, #16]
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	e7c0      	b.n	8005998 <_printf_i+0x12c>
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	1d11      	adds	r1, r2, #4
 8005a1a:	6019      	str	r1, [r3, #0]
 8005a1c:	6816      	ldr	r6, [r2, #0]
 8005a1e:	2100      	movs	r1, #0
 8005a20:	0030      	movs	r0, r6
 8005a22:	6862      	ldr	r2, [r4, #4]
 8005a24:	f000 f858 	bl	8005ad8 <memchr>
 8005a28:	2800      	cmp	r0, #0
 8005a2a:	d001      	beq.n	8005a30 <_printf_i+0x1c4>
 8005a2c:	1b80      	subs	r0, r0, r6
 8005a2e:	6060      	str	r0, [r4, #4]
 8005a30:	6863      	ldr	r3, [r4, #4]
 8005a32:	6123      	str	r3, [r4, #16]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9a04      	ldr	r2, [sp, #16]
 8005a38:	7013      	strb	r3, [r2, #0]
 8005a3a:	e7ad      	b.n	8005998 <_printf_i+0x12c>
 8005a3c:	0032      	movs	r2, r6
 8005a3e:	6923      	ldr	r3, [r4, #16]
 8005a40:	9906      	ldr	r1, [sp, #24]
 8005a42:	9805      	ldr	r0, [sp, #20]
 8005a44:	9d07      	ldr	r5, [sp, #28]
 8005a46:	47a8      	blx	r5
 8005a48:	3001      	adds	r0, #1
 8005a4a:	d0af      	beq.n	80059ac <_printf_i+0x140>
 8005a4c:	6823      	ldr	r3, [r4, #0]
 8005a4e:	079b      	lsls	r3, r3, #30
 8005a50:	d415      	bmi.n	8005a7e <_printf_i+0x212>
 8005a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a54:	68e0      	ldr	r0, [r4, #12]
 8005a56:	4298      	cmp	r0, r3
 8005a58:	daaa      	bge.n	80059b0 <_printf_i+0x144>
 8005a5a:	0018      	movs	r0, r3
 8005a5c:	e7a8      	b.n	80059b0 <_printf_i+0x144>
 8005a5e:	0022      	movs	r2, r4
 8005a60:	2301      	movs	r3, #1
 8005a62:	9906      	ldr	r1, [sp, #24]
 8005a64:	9805      	ldr	r0, [sp, #20]
 8005a66:	9e07      	ldr	r6, [sp, #28]
 8005a68:	3219      	adds	r2, #25
 8005a6a:	47b0      	blx	r6
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d09d      	beq.n	80059ac <_printf_i+0x140>
 8005a70:	3501      	adds	r5, #1
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dcf0      	bgt.n	8005a5e <_printf_i+0x1f2>
 8005a7c:	e7e9      	b.n	8005a52 <_printf_i+0x1e6>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	e7f7      	b.n	8005a72 <_printf_i+0x206>
 8005a82:	46c0      	nop			; (mov r8, r8)
 8005a84:	08005cc9 	.word	0x08005cc9
 8005a88:	08005cda 	.word	0x08005cda

08005a8c <memmove>:
 8005a8c:	b510      	push	{r4, lr}
 8005a8e:	4288      	cmp	r0, r1
 8005a90:	d902      	bls.n	8005a98 <memmove+0xc>
 8005a92:	188b      	adds	r3, r1, r2
 8005a94:	4298      	cmp	r0, r3
 8005a96:	d303      	bcc.n	8005aa0 <memmove+0x14>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e007      	b.n	8005aac <memmove+0x20>
 8005a9c:	5c8b      	ldrb	r3, [r1, r2]
 8005a9e:	5483      	strb	r3, [r0, r2]
 8005aa0:	3a01      	subs	r2, #1
 8005aa2:	d2fb      	bcs.n	8005a9c <memmove+0x10>
 8005aa4:	bd10      	pop	{r4, pc}
 8005aa6:	5ccc      	ldrb	r4, [r1, r3]
 8005aa8:	54c4      	strb	r4, [r0, r3]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d1fa      	bne.n	8005aa6 <memmove+0x1a>
 8005ab0:	e7f8      	b.n	8005aa4 <memmove+0x18>
	...

08005ab4 <_sbrk_r>:
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	b570      	push	{r4, r5, r6, lr}
 8005ab8:	4d06      	ldr	r5, [pc, #24]	; (8005ad4 <_sbrk_r+0x20>)
 8005aba:	0004      	movs	r4, r0
 8005abc:	0008      	movs	r0, r1
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fb fc06 	bl	80012d0 <_sbrk>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_sbrk_r+0x1c>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d000      	beq.n	8005ad0 <_sbrk_r+0x1c>
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	20000368 	.word	0x20000368

08005ad8 <memchr>:
 8005ad8:	b2c9      	uxtb	r1, r1
 8005ada:	1882      	adds	r2, r0, r2
 8005adc:	4290      	cmp	r0, r2
 8005ade:	d101      	bne.n	8005ae4 <memchr+0xc>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	4770      	bx	lr
 8005ae4:	7803      	ldrb	r3, [r0, #0]
 8005ae6:	428b      	cmp	r3, r1
 8005ae8:	d0fb      	beq.n	8005ae2 <memchr+0xa>
 8005aea:	3001      	adds	r0, #1
 8005aec:	e7f6      	b.n	8005adc <memchr+0x4>

08005aee <memcpy>:
 8005aee:	2300      	movs	r3, #0
 8005af0:	b510      	push	{r4, lr}
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d100      	bne.n	8005af8 <memcpy+0xa>
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	5ccc      	ldrb	r4, [r1, r3]
 8005afa:	54c4      	strb	r4, [r0, r3]
 8005afc:	3301      	adds	r3, #1
 8005afe:	e7f8      	b.n	8005af2 <memcpy+0x4>

08005b00 <_realloc_r>:
 8005b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b02:	0007      	movs	r7, r0
 8005b04:	000e      	movs	r6, r1
 8005b06:	0014      	movs	r4, r2
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d105      	bne.n	8005b18 <_realloc_r+0x18>
 8005b0c:	0011      	movs	r1, r2
 8005b0e:	f7ff fc49 	bl	80053a4 <_malloc_r>
 8005b12:	0005      	movs	r5, r0
 8005b14:	0028      	movs	r0, r5
 8005b16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b18:	2a00      	cmp	r2, #0
 8005b1a:	d103      	bne.n	8005b24 <_realloc_r+0x24>
 8005b1c:	f7ff fbd6 	bl	80052cc <_free_r>
 8005b20:	0025      	movs	r5, r4
 8005b22:	e7f7      	b.n	8005b14 <_realloc_r+0x14>
 8005b24:	f000 f81b 	bl	8005b5e <_malloc_usable_size_r>
 8005b28:	9001      	str	r0, [sp, #4]
 8005b2a:	4284      	cmp	r4, r0
 8005b2c:	d803      	bhi.n	8005b36 <_realloc_r+0x36>
 8005b2e:	0035      	movs	r5, r6
 8005b30:	0843      	lsrs	r3, r0, #1
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	d3ee      	bcc.n	8005b14 <_realloc_r+0x14>
 8005b36:	0021      	movs	r1, r4
 8005b38:	0038      	movs	r0, r7
 8005b3a:	f7ff fc33 	bl	80053a4 <_malloc_r>
 8005b3e:	1e05      	subs	r5, r0, #0
 8005b40:	d0e8      	beq.n	8005b14 <_realloc_r+0x14>
 8005b42:	9b01      	ldr	r3, [sp, #4]
 8005b44:	0022      	movs	r2, r4
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d900      	bls.n	8005b4c <_realloc_r+0x4c>
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	0031      	movs	r1, r6
 8005b4e:	0028      	movs	r0, r5
 8005b50:	f7ff ffcd 	bl	8005aee <memcpy>
 8005b54:	0031      	movs	r1, r6
 8005b56:	0038      	movs	r0, r7
 8005b58:	f7ff fbb8 	bl	80052cc <_free_r>
 8005b5c:	e7da      	b.n	8005b14 <_realloc_r+0x14>

08005b5e <_malloc_usable_size_r>:
 8005b5e:	1f0b      	subs	r3, r1, #4
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1f18      	subs	r0, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	da01      	bge.n	8005b6c <_malloc_usable_size_r+0xe>
 8005b68:	580b      	ldr	r3, [r1, r0]
 8005b6a:	18c0      	adds	r0, r0, r3
 8005b6c:	4770      	bx	lr
	...

08005b70 <_init>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b76:	bc08      	pop	{r3}
 8005b78:	469e      	mov	lr, r3
 8005b7a:	4770      	bx	lr

08005b7c <_fini>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr
