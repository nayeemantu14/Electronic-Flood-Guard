
EFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005130  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  080051f0  080051f0  000151f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005354  08005354  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005354  08005354  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005354  08005354  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800535c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000005c  080053b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080053b8  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011568  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002398  00000000  00000000  0003162f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f40  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf4  00000000  00000000  00034908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015748  00000000  00000000  000354fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001200c  00000000  00000000  0004ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1e8  00000000  00000000  0005cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c24  00000000  00000000  000e6e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000eaa5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051d8 	.word	0x080051d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080051d8 	.word	0x080051d8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <app_main>:
void batteryled(void);						// Function prototype for activating battery LED
void console(char *log);              		// Function prototype for transmitting messages via UART

// Main application function
void app_main()
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
	// Initialize message buffer with default message
	strcpy(message, "EFloodGuard\r\n");
 800024a:	4b62      	ldr	r3, [pc, #392]	; (80003d4 <app_main+0x190>)
 800024c:	4a62      	ldr	r2, [pc, #392]	; (80003d8 <app_main+0x194>)
 800024e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000250:	c313      	stmia	r3!, {r0, r1, r4}
 8000252:	8812      	ldrh	r2, [r2, #0]
 8000254:	801a      	strh	r2, [r3, #0]
	// Send initialization message
	console(message);
 8000256:	4b5f      	ldr	r3, [pc, #380]	; (80003d4 <app_main+0x190>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 faa3 	bl	80007a4 <console>

	// Check if the flood flag is set
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 800025e:	4b5f      	ldr	r3, [pc, #380]	; (80003dc <app_main+0x198>)
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	0018      	movs	r0, r3
 8000264:	f002 f980 	bl	8002568 <HAL_GPIO_ReadPin>
 8000268:	0003      	movs	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d108      	bne.n	8000280 <app_main+0x3c>
	{
		floodFlag = 0;
 800026e:	4b5c      	ldr	r3, [pc, #368]	; (80003e0 <app_main+0x19c>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000274:	2064      	movs	r0, #100	; 0x64
 8000276:	f000 ffcb 	bl	8001210 <HAL_Delay>
		openValve();
 800027a:	f000 f923 	bl	80004c4 <openValve>
 800027e:	e007      	b.n	8000290 <app_main+0x4c>
	}
	else
	{
		floodFlag = 1;
 8000280:	4b57      	ldr	r3, [pc, #348]	; (80003e0 <app_main+0x19c>)
 8000282:	2201      	movs	r2, #1
 8000284:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000286:	2064      	movs	r0, #100	; 0x64
 8000288:	f000 ffc2 	bl	8001210 <HAL_Delay>
		closeValve();
 800028c:	f000 f964 	bl	8000558 <closeValve>
	}
	HAL_Delay(500);
 8000290:	23fa      	movs	r3, #250	; 0xfa
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	0018      	movs	r0, r3
 8000296:	f000 ffbb 	bl	8001210 <HAL_Delay>
	alert();
 800029a:	f000 fa5b 	bl	8000754 <alert>
	// Main loop
	while(1)
	{
		// Get current time
		uint32_t now;
		now = HAL_GetTick();
 800029e:	f000 ffad 	bl	80011fc <HAL_GetTick>
 80002a2:	0003      	movs	r3, r0
 80002a4:	607b      	str	r3, [r7, #4]

		// Check button hold duration
		if (now - holdTime >= 2000 && buttonState == 1)
 80002a6:	4b4f      	ldr	r3, [pc, #316]	; (80003e4 <app_main+0x1a0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	1ad2      	subs	r2, r2, r3
 80002ae:	23fa      	movs	r3, #250	; 0xfa
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d330      	bcc.n	8000318 <app_main+0xd4>
 80002b6:	4b4c      	ldr	r3, [pc, #304]	; (80003e8 <app_main+0x1a4>)
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d12b      	bne.n	8000318 <app_main+0xd4>
		{
			buttonState = 0;        // Reset the button state
 80002c0:	4b49      	ldr	r3, [pc, #292]	; (80003e8 <app_main+0x1a4>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	701a      	strb	r2, [r3, #0]
			// Check if the button is pressed and the valve is open
			if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 80002c6:	2380      	movs	r3, #128	; 0x80
 80002c8:	021a      	lsls	r2, r3, #8
 80002ca:	23a0      	movs	r3, #160	; 0xa0
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 f949 	bl	8002568 <HAL_GPIO_ReadPin>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d11b      	bne.n	8000312 <app_main+0xce>
 80002da:	4b40      	ldr	r3, [pc, #256]	; (80003dc <app_main+0x198>)
 80002dc:	2140      	movs	r1, #64	; 0x40
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 f942 	bl	8002568 <HAL_GPIO_ReadPin>
 80002e4:	0003      	movs	r3, r0
 80002e6:	2b01      	cmp	r3, #1
 80002e8:	d113      	bne.n	8000312 <app_main+0xce>
			{
				if(valve_open == 0)
 80002ea:	4b40      	ldr	r3, [pc, #256]	; (80003ec <app_main+0x1a8>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d101      	bne.n	80002f8 <app_main+0xb4>
				{
					openValve();            // Open the valve
 80002f4:	f000 f8e6 	bl	80004c4 <openValve>
				}
				strcpy(message, "valve open\r\n");
 80002f8:	4b36      	ldr	r3, [pc, #216]	; (80003d4 <app_main+0x190>)
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <app_main+0x1ac>)
 80002fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002fe:	c313      	stmia	r3!, {r0, r1, r4}
 8000300:	7812      	ldrb	r2, [r2, #0]
 8000302:	701a      	strb	r2, [r3, #0]
				console(message);
 8000304:	4b33      	ldr	r3, [pc, #204]	; (80003d4 <app_main+0x190>)
 8000306:	0018      	movs	r0, r3
 8000308:	f000 fa4c 	bl	80007a4 <console>
				floodFlag = 0;          	// Clear the flood flag
 800030c:	4b34      	ldr	r3, [pc, #208]	; (80003e0 <app_main+0x19c>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]
			}
			holdTime = 0;               	// Reset the hold time
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <app_main+0x1a0>)
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
		}

		// Close the valve if the flood flag is set
		if (floodFlag)
 8000318:	4b31      	ldr	r3, [pc, #196]	; (80003e0 <app_main+0x19c>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	b2db      	uxtb	r3, r3
 800031e:	2b00      	cmp	r3, #0
 8000320:	d026      	beq.n	8000370 <app_main+0x12c>
		{
			if(now - alert_time > 5000)
 8000322:	4b34      	ldr	r3, [pc, #208]	; (80003f4 <app_main+0x1b0>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	687a      	ldr	r2, [r7, #4]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	4a33      	ldr	r2, [pc, #204]	; (80003f8 <app_main+0x1b4>)
 800032c:	4293      	cmp	r3, r2
 800032e:	d90c      	bls.n	800034a <app_main+0x106>
			{
				strcpy(message, "Flood\r\n");
 8000330:	4b28      	ldr	r3, [pc, #160]	; (80003d4 <app_main+0x190>)
 8000332:	4a32      	ldr	r2, [pc, #200]	; (80003fc <app_main+0x1b8>)
 8000334:	ca03      	ldmia	r2!, {r0, r1}
 8000336:	c303      	stmia	r3!, {r0, r1}
				console(message);
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <app_main+0x190>)
 800033a:	0018      	movs	r0, r3
 800033c:	f000 fa32 	bl	80007a4 <console>
				alert();
 8000340:	f000 fa08 	bl	8000754 <alert>
				alert_time = now;
 8000344:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <app_main+0x1b0>)
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
			}
			if(valve_open == 1)
 800034a:	4b28      	ldr	r3, [pc, #160]	; (80003ec <app_main+0x1a8>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10d      	bne.n	8000370 <app_main+0x12c>
			{
				closeValve();
 8000354:	f000 f900 	bl	8000558 <closeValve>
				strcpy(message, "valve closed\r\n");
 8000358:	4b1e      	ldr	r3, [pc, #120]	; (80003d4 <app_main+0x190>)
 800035a:	4a29      	ldr	r2, [pc, #164]	; (8000400 <app_main+0x1bc>)
 800035c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800035e:	c313      	stmia	r3!, {r0, r1, r4}
 8000360:	8811      	ldrh	r1, [r2, #0]
 8000362:	8019      	strh	r1, [r3, #0]
 8000364:	7892      	ldrb	r2, [r2, #2]
 8000366:	709a      	strb	r2, [r3, #2]
				console(message);
 8000368:	4b1a      	ldr	r3, [pc, #104]	; (80003d4 <app_main+0x190>)
 800036a:	0018      	movs	r0, r3
 800036c:	f000 fa1a 	bl	80007a4 <console>
			}
		}

		if(wupFlag == 1)
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <app_main+0x1c0>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d106      	bne.n	8000386 <app_main+0x142>
		{
			wupFlag = 0;
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <app_main+0x1c0>)
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
			statusled();
 800037e:	f000 f9a1 	bl	80006c4 <statusled>
			monitorBattery();
 8000382:	f000 f97b 	bl	800067c <monitorBattery>
		{
			monitorBattery();
			last_batt_time = now;                          			// Update last battery reading time
		}*/
		// Enter sleep mode after a specific period if no flood is detected
		if(now - sleep_time >= 10000 && !floodFlag)
 8000386:	4b20      	ldr	r3, [pc, #128]	; (8000408 <app_main+0x1c4>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	1ad3      	subs	r3, r2, r3
 800038e:	4a1f      	ldr	r2, [pc, #124]	; (800040c <app_main+0x1c8>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d984      	bls.n	800029e <app_main+0x5a>
 8000394:	4b12      	ldr	r3, [pc, #72]	; (80003e0 <app_main+0x19c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	2b00      	cmp	r3, #0
 800039c:	d000      	beq.n	80003a0 <app_main+0x15c>
 800039e:	e77e      	b.n	800029e <app_main+0x5a>
		{
			strcpy(message, "Entering Sleep\r\n");
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <app_main+0x190>)
 80003a2:	4a1b      	ldr	r2, [pc, #108]	; (8000410 <app_main+0x1cc>)
 80003a4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003a6:	c313      	stmia	r3!, {r0, r1, r4}
 80003a8:	6811      	ldr	r1, [r2, #0]
 80003aa:	6019      	str	r1, [r3, #0]
 80003ac:	7912      	ldrb	r2, [r2, #4]
 80003ae:	711a      	strb	r2, [r3, #4]
			console(message);
 80003b0:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <app_main+0x190>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 f9f6 	bl	80007a4 <console>
			wupFlag = 0;
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <app_main+0x1c0>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim16);
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <app_main+0x1d0>)
 80003c0:	0018      	movs	r0, r3
 80003c2:	f002 fdf1 	bl	8002fa8 <HAL_TIM_Base_Start_IT>
			HAL_SuspendTick();
 80003c6:	f000 ff47 	bl	8001258 <HAL_SuspendTick>
			//HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);   // Enable sleep mode
			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON ,PWR_SLEEPENTRY_WFI);
 80003ca:	2101      	movs	r1, #1
 80003cc:	2000      	movs	r0, #0
 80003ce:	f002 f939 	bl	8002644 <HAL_PWR_EnterSLEEPMode>
	{
 80003d2:	e764      	b.n	800029e <app_main+0x5a>
 80003d4:	20000078 	.word	0x20000078
 80003d8:	080051f0 	.word	0x080051f0
 80003dc:	50000400 	.word	0x50000400
 80003e0:	200000a3 	.word	0x200000a3
 80003e4:	200000a8 	.word	0x200000a8
 80003e8:	200000a4 	.word	0x200000a4
 80003ec:	200000a2 	.word	0x200000a2
 80003f0:	08005200 	.word	0x08005200
 80003f4:	200000b0 	.word	0x200000b0
 80003f8:	00001388 	.word	0x00001388
 80003fc:	08005210 	.word	0x08005210
 8000400:	08005218 	.word	0x08005218
 8000404:	200000a0 	.word	0x200000a0
 8000408:	200000ac 	.word	0x200000ac
 800040c:	0000270f 	.word	0x0000270f
 8000410:	08005228 	.word	0x08005228
 8000414:	20000164 	.word	0x20000164

08000418 <HAL_GPIO_EXTI_Falling_Callback>:
	}
}

// GPIO EXTI interrupt callback
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	HAL_ResumeTick();
 8000424:	f000 ff26 	bl	8001274 <HAL_ResumeTick>
	sleep_time = HAL_GetTick();         // Update sleep time
 8000428:	f000 fee8 	bl	80011fc <HAL_GetTick>
 800042c:	0002      	movs	r2, r0
 800042e:	4b15      	ldr	r3, [pc, #84]	; (8000484 <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 8000430:	601a      	str	r2, [r3, #0]

	// Handle button press
	if(GPIO_Pin == GPIO_PIN_15)
 8000432:	1dbb      	adds	r3, r7, #6
 8000434:	881a      	ldrh	r2, [r3, #0]
 8000436:	2380      	movs	r3, #128	; 0x80
 8000438:	021b      	lsls	r3, r3, #8
 800043a:	429a      	cmp	r2, r3
 800043c:	d116      	bne.n	800046c <HAL_GPIO_EXTI_Falling_Callback+0x54>
	{
		buttonState++;      			// Increment button state
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	3301      	adds	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 800044a:	701a      	strb	r2, [r3, #0]
		holdTime = HAL_GetTick(); 		// Record button hold time
 800044c:	f000 fed6 	bl	80011fc <HAL_GetTick>
 8000450:	0002      	movs	r2, r0
 8000452:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 8000454:	601a      	str	r2, [r3, #0]
		if(buttonState>1)
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	2b01      	cmp	r3, #1
 800045e:	d902      	bls.n	8000466 <HAL_GPIO_EXTI_Falling_Callback+0x4e>
		{
			buttonState = 0;
 8000460:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 8000462:	2200      	movs	r2, #0
 8000464:	701a      	strb	r2, [r3, #0]
		}
		wupFlag = 1;
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
	}
	// Handle flood flag
	if(GPIO_Pin == GPIO_PIN_6)
 800046c:	1dbb      	adds	r3, r7, #6
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	2b40      	cmp	r3, #64	; 0x40
 8000472:	d102      	bne.n	800047a <HAL_GPIO_EXTI_Falling_Callback+0x62>
	{
		floodFlag = 1; // Set flood flag
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	200000ac 	.word	0x200000ac
 8000488:	200000a4 	.word	0x200000a4
 800048c:	200000a8 	.word	0x200000a8
 8000490:	200000a0 	.word	0x200000a0
 8000494:	200000a3 	.word	0x200000a3

08000498 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
	if(htim == &htim16)
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4b06      	ldr	r3, [pc, #24]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004a4:	429a      	cmp	r2, r3
 80004a6:	d104      	bne.n	80004b2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_ResumeTick();
 80004a8:	f000 fee4 	bl	8001274 <HAL_ResumeTick>
		wupFlag = 1;
 80004ac:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	701a      	strb	r2, [r3, #0]
	}
}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b002      	add	sp, #8
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	20000164 	.word	0x20000164
 80004c0:	200000a0 	.word	0x200000a0

080004c4 <openValve>:

// Function to open the valve
void openValve()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	0099      	lsls	r1, r3, #2
 80004ce:	23a0      	movs	r3, #160	; 0xa0
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	2201      	movs	r2, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f002 f864 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <openValve+0x8c>)
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f002 fe08 	bl	80030f4 <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 80004e4:	2032      	movs	r0, #50	; 0x32
 80004e6:	f000 fe93 	bl	8001210 <HAL_Delay>
	for(uint16_t i = 1800; i >= 900; i-=50)
 80004ea:	1dbb      	adds	r3, r7, #6
 80004ec:	22e1      	movs	r2, #225	; 0xe1
 80004ee:	00d2      	lsls	r2, r2, #3
 80004f0:	801a      	strh	r2, [r3, #0]
 80004f2:	e00c      	b.n	800050e <openValve+0x4a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);   	// Set PWM duty cycle for valve opening
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <openValve+0x8c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	1dba      	adds	r2, r7, #6
 80004fa:	8812      	ldrh	r2, [r2, #0]
 80004fc:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(30);
 80004fe:	201e      	movs	r0, #30
 8000500:	f000 fe86 	bl	8001210 <HAL_Delay>
	for(uint16_t i = 1800; i >= 900; i-=50)
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1dba      	adds	r2, r7, #6
 8000508:	8812      	ldrh	r2, [r2, #0]
 800050a:	3a32      	subs	r2, #50	; 0x32
 800050c:	801a      	strh	r2, [r3, #0]
 800050e:	1dbb      	adds	r3, r7, #6
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	23e1      	movs	r3, #225	; 0xe1
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	429a      	cmp	r2, r3
 8000518:	d2ec      	bcs.n	80004f4 <openValve+0x30>
	}

	HAL_Delay(50);
 800051a:	2032      	movs	r0, #50	; 0x32
 800051c:	f000 fe78 	bl	8001210 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <openValve+0x8c>)
 8000522:	2100      	movs	r1, #0
 8000524:	0018      	movs	r0, r3
 8000526:	f002 febd 	bl	80032a4 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 800052a:	2032      	movs	r0, #50	; 0x32
 800052c:	f000 fe70 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	0099      	lsls	r1, r3, #2
 8000534:	23a0      	movs	r3, #160	; 0xa0
 8000536:	05db      	lsls	r3, r3, #23
 8000538:	2200      	movs	r2, #0
 800053a:	0018      	movs	r0, r3
 800053c:	f002 f831 	bl	80025a2 <HAL_GPIO_WritePin>
	valve_open = 1;
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <openValve+0x90>)
 8000542:	2201      	movs	r2, #1
 8000544:	701a      	strb	r2, [r3, #0]
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b002      	add	sp, #8
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000118 	.word	0x20000118
 8000554:	200000a2 	.word	0x200000a2

08000558 <closeValve>:

// Function to close the valve
void closeValve()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	0099      	lsls	r1, r3, #2
 8000562:	23a0      	movs	r3, #160	; 0xa0
 8000564:	05db      	lsls	r3, r3, #23
 8000566:	2201      	movs	r2, #1
 8000568:	0018      	movs	r0, r3
 800056a:	f002 f81a 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 800056e:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <closeValve+0x8c>)
 8000570:	2100      	movs	r1, #0
 8000572:	0018      	movs	r0, r3
 8000574:	f002 fdbe 	bl	80030f4 <HAL_TIM_PWM_Start>
	HAL_Delay(50);
 8000578:	2032      	movs	r0, #50	; 0x32
 800057a:	f000 fe49 	bl	8001210 <HAL_Delay>
	for(uint16_t i = 900; i <= 1800; i+=50)
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	22e1      	movs	r2, #225	; 0xe1
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	801a      	strh	r2, [r3, #0]
 8000586:	e00c      	b.n	80005a2 <closeValve+0x4a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, i);   	// Set PWM duty cycle for valve Closing
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <closeValve+0x8c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	1dba      	adds	r2, r7, #6
 800058e:	8812      	ldrh	r2, [r2, #0]
 8000590:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(30);
 8000592:	201e      	movs	r0, #30
 8000594:	f000 fe3c 	bl	8001210 <HAL_Delay>
	for(uint16_t i = 900; i <= 1800; i+=50)
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	1dba      	adds	r2, r7, #6
 800059c:	8812      	ldrh	r2, [r2, #0]
 800059e:	3232      	adds	r2, #50	; 0x32
 80005a0:	801a      	strh	r2, [r3, #0]
 80005a2:	1dbb      	adds	r3, r7, #6
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	23e1      	movs	r3, #225	; 0xe1
 80005a8:	00db      	lsls	r3, r3, #3
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d9ec      	bls.n	8000588 <closeValve+0x30>
	}
	HAL_Delay(50);
 80005ae:	2032      	movs	r0, #50	; 0x32
 80005b0:	f000 fe2e 	bl	8001210 <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 80005b4:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <closeValve+0x8c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fe73 	bl	80032a4 <HAL_TIM_PWM_Stop>
	HAL_Delay(50);
 80005be:	2032      	movs	r0, #50	; 0x32
 80005c0:	f000 fe26 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 80005c4:	2380      	movs	r3, #128	; 0x80
 80005c6:	0099      	lsls	r1, r3, #2
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 ffe7 	bl	80025a2 <HAL_GPIO_WritePin>
	valve_open = 0;
 80005d4:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <closeValve+0x90>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	20000118 	.word	0x20000118
 80005e8:	200000a2 	.word	0x200000a2

080005ec <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);           	// Enable battery voltage measurement
 80005f2:	2380      	movs	r3, #128	; 0x80
 80005f4:	021b      	lsls	r3, r3, #8
 80005f6:	481d      	ldr	r0, [pc, #116]	; (800066c <measureBattery+0x80>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	0019      	movs	r1, r3
 80005fc:	f001 ffd1 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_ADC_Start(&hadc1);                                	// Start ADC conversion
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <measureBattery+0x84>)
 8000602:	0018      	movs	r0, r3
 8000604:	f001 f954 	bl	80018b0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);              	// Wait for ADC conversion to complete
 8000608:	23fa      	movs	r3, #250	; 0xfa
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <measureBattery+0x84>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f001 f9d7 	bl	80019c4 <HAL_ADC_PollForConversion>
	volatile uint16_t analogbatt = HAL_ADC_GetValue(&hadc1);       	// Read ADC value
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <measureBattery+0x84>)
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fa61 	bl	8001ae0 <HAL_ADC_GetValue>
 800061e:	0003      	movs	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	1dbb      	adds	r3, r7, #6
 8000624:	801a      	strh	r2, [r3, #0]
	HAL_Delay(5);
 8000626:	2005      	movs	r0, #5
 8000628:	f000 fdf2 	bl	8001210 <HAL_Delay>
	HAL_ADC_Stop(&hadc1);                                 	// Stop ADC conversion
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <measureBattery+0x84>)
 800062e:	0018      	movs	r0, r3
 8000630:	f001 f98c 	bl	800194c <HAL_ADC_Stop>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);         	// Disable battery voltage measurement
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	021b      	lsls	r3, r3, #8
 8000638:	480c      	ldr	r0, [pc, #48]	; (800066c <measureBattery+0x80>)
 800063a:	2200      	movs	r2, #0
 800063c:	0019      	movs	r1, r3
 800063e:	f001 ffb0 	bl	80025a2 <HAL_GPIO_WritePin>

	// Check battery voltage threshold
	if(analogbatt < 2950)
 8000642:	1dbb      	adds	r3, r7, #6
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <measureBattery+0x88>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d803      	bhi.n	8000656 <measureBattery+0x6a>
	{
		Low_battery = 1;			// Set low battery flag if voltage is below threshold
 800064e:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <measureBattery+0x8c>)
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
 8000654:	e002      	b.n	800065c <measureBattery+0x70>
	}
	else
	{
		Low_battery = 0;			// Reset low battery flag if voltage is above threshold
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <measureBattery+0x8c>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	}
	return analogbatt;  // Return battery voltage reading
 800065c:	1dbb      	adds	r3, r7, #6
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
}
 8000662:	0018      	movs	r0, r3
 8000664:	46bd      	mov	sp, r7
 8000666:	b002      	add	sp, #8
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	50000400 	.word	0x50000400
 8000670:	200000b4 	.word	0x200000b4
 8000674:	00000b85 	.word	0x00000b85
 8000678:	200000a1 	.word	0x200000a1

0800067c <monitorBattery>:

void monitorBattery(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
	uint16_t vBatt = measureBattery();            			// Measure battery voltage
 8000682:	1dbc      	adds	r4, r7, #6
 8000684:	f7ff ffb2 	bl	80005ec <measureBattery>
 8000688:	0003      	movs	r3, r0
 800068a:	8023      	strh	r3, [r4, #0]
	if(Low_battery)
 800068c:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <monitorBattery+0x3c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <monitorBattery+0x1c>
	{
		batteryled();
 8000694:	f000 f83a 	bl	800070c <batteryled>
	}
	sprintf(message, "Battery Voltage: %d\r\n", vBatt); 	// Format battery voltage message
 8000698:	1dbb      	adds	r3, r7, #6
 800069a:	881a      	ldrh	r2, [r3, #0]
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <monitorBattery+0x40>)
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <monitorBattery+0x44>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f004 f8f3 	bl	800488c <siprintf>
	console(message);                             			// Send battery voltage message via UART
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <monitorBattery+0x44>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f87b 	bl	80007a4 <console>
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b003      	add	sp, #12
 80006b4:	bd90      	pop	{r4, r7, pc}
 80006b6:	46c0      	nop			; (mov r8, r8)
 80006b8:	200000a1 	.word	0x200000a1
 80006bc:	0800523c 	.word	0x0800523c
 80006c0:	20000078 	.word	0x20000078

080006c4 <statusled>:
void statusled(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <statusled+0x44>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	2180      	movs	r1, #128	; 0x80
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 ff67 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <statusled+0x44>)
 80006da:	2201      	movs	r2, #1
 80006dc:	0019      	movs	r1, r3
 80006de:	f001 ff60 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006e2:	2064      	movs	r0, #100	; 0x64
 80006e4:	f000 fd94 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <statusled+0x44>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2180      	movs	r1, #128	; 0x80
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 ff57 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4803      	ldr	r0, [pc, #12]	; (8000708 <statusled+0x44>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	0019      	movs	r1, r3
 80006fe:	f001 ff50 	bl	80025a2 <HAL_GPIO_WritePin>
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	50000400 	.word	0x50000400

0800070c <batteryled>:
// Function to activate battery LED
void batteryled(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);		// Activate battery LED
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <batteryled+0x44>)
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0018      	movs	r0, r3
 8000718:	f001 ff43 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	480b      	ldr	r0, [pc, #44]	; (8000750 <batteryled+0x44>)
 8000722:	2201      	movs	r2, #1
 8000724:	0019      	movs	r1, r3
 8000726:	f001 ff3c 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(200);											// Delay for LED indication
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f000 fd70 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <batteryled+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	0019      	movs	r1, r3
 800073a:	f001 ff32 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// Deactivate battery LED
 800073e:	4b04      	ldr	r3, [pc, #16]	; (8000750 <batteryled+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	0018      	movs	r0, r3
 8000746:	f001 ff2c 	bl	80025a2 <HAL_GPIO_WritePin>
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	50000400 	.word	0x50000400

08000754 <alert>:

// Function to activate buzzer and warning LED
void alert(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);		// Activate buzzer
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	005b      	lsls	r3, r3, #1
 800075c:	4810      	ldr	r0, [pc, #64]	; (80007a0 <alert+0x4c>)
 800075e:	2201      	movs	r2, #1
 8000760:	0019      	movs	r1, r3
 8000762:	f001 ff1e 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);		// Activate warning LED
 8000766:	2380      	movs	r3, #128	; 0x80
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <alert+0x4c>)
 800076c:	2201      	movs	r2, #1
 800076e:	0019      	movs	r1, r3
 8000770:	f001 ff17 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_Delay(1000);										// Delay for alert indication
 8000774:	23fa      	movs	r3, #250	; 0xfa
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	0018      	movs	r0, r3
 800077a:	f000 fd49 	bl	8001210 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);	// Deactivate buzzer
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	4807      	ldr	r0, [pc, #28]	; (80007a0 <alert+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	0019      	movs	r1, r3
 8000788:	f001 ff0b 	bl	80025a2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);	// Deactivate warning LED
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <alert+0x4c>)
 8000792:	2200      	movs	r2, #0
 8000794:	0019      	movs	r1, r3
 8000796:	f001 ff04 	bl	80025a2 <HAL_GPIO_WritePin>
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	50000400 	.word	0x50000400

080007a4 <console>:

// Function to transmit messages via UART
void console(char *log)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);  // Transmit message via UART
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff fcaa 	bl	8000108 <strlen>
 80007b4:	0003      	movs	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	2301      	movs	r3, #1
 80007ba:	425b      	negs	r3, r3
 80007bc:	6879      	ldr	r1, [r7, #4]
 80007be:	480a      	ldr	r0, [pc, #40]	; (80007e8 <console+0x44>)
 80007c0:	f003 fc14 	bl	8003fec <HAL_UART_Transmit>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fd23 	bl	8001210 <HAL_Delay>
	memset(log, '\0', strlen(log));  // Clear message buffer
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff fc9b 	bl	8000108 <strlen>
 80007d2:	0002      	movs	r2, r0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f004 f877 	bl	80048cc <memset>
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	200001b0 	.word	0x200001b0

080007ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f0:	f000 fc91 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f4:	f000 f80d 	bl	8000812 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f8:	f000 f9d8 	bl	8000bac <MX_GPIO_Init>
  MX_TIM3_Init();
 80007fc:	f000 f916 	bl	8000a2c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000800:	f000 f84c 	bl	800089c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000804:	f000 f99e 	bl	8000b44 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000808:	f000 f972 	bl	8000af0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800080c:	f7ff fd1a 	bl	8000244 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000810:	e7fe      	b.n	8000810 <main+0x24>

08000812 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000812:	b590      	push	{r4, r7, lr}
 8000814:	b08d      	sub	sp, #52	; 0x34
 8000816:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000818:	2414      	movs	r4, #20
 800081a:	193b      	adds	r3, r7, r4
 800081c:	0018      	movs	r0, r3
 800081e:	231c      	movs	r3, #28
 8000820:	001a      	movs	r2, r3
 8000822:	2100      	movs	r1, #0
 8000824:	f004 f852 	bl	80048cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	003b      	movs	r3, r7
 800082a:	0018      	movs	r0, r3
 800082c:	2314      	movs	r3, #20
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 f84b 	bl	80048cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2202      	movs	r2, #2
 800083a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	2280      	movs	r2, #128	; 0x80
 8000840:	0052      	lsls	r2, r2, #1
 8000842:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 8000844:	193b      	adds	r3, r7, r4
 8000846:	2280      	movs	r2, #128	; 0x80
 8000848:	0152      	lsls	r2, r2, #5
 800084a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2240      	movs	r2, #64	; 0x40
 8000850:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	193b      	adds	r3, r7, r4
 8000854:	0018      	movs	r0, r3
 8000856:	f001 ff11 	bl	800267c <HAL_RCC_OscConfig>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800085e:	f000 fa51 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	003b      	movs	r3, r7
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000868:	003b      	movs	r3, r7
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	003b      	movs	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000880:	003b      	movs	r3, r7
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f002 f8dd 	bl	8002a44 <HAL_RCC_ClockConfig>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800088e:	f000 fa39 	bl	8000d04 <Error_Handler>
  }
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b00d      	add	sp, #52	; 0x34
 8000898:	bd90      	pop	{r4, r7, pc}
	...

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	0018      	movs	r0, r3
 80008a6:	230c      	movs	r3, #12
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f004 f80e 	bl	80048cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b0:	4b5b      	ldr	r3, [pc, #364]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008b2:	4a5c      	ldr	r2, [pc, #368]	; (8000a24 <MX_ADC1_Init+0x188>)
 80008b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008b8:	22c0      	movs	r2, #192	; 0xc0
 80008ba:	0612      	lsls	r2, r2, #24
 80008bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008be:	4b58      	ldr	r3, [pc, #352]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b56      	ldr	r3, [pc, #344]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ca:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0392      	lsls	r2, r2, #14
 80008d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008d8:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008de:	4b50      	ldr	r3, [pc, #320]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 8;
 80008ea:	4b4d      	ldr	r3, [pc, #308]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008ec:	2208      	movs	r2, #8
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b49      	ldr	r3, [pc, #292]	; (8000a20 <MX_ADC1_Init+0x184>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000906:	222c      	movs	r2, #44	; 0x2c
 8000908:	2100      	movs	r1, #0
 800090a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <MX_ADC1_Init+0x184>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000912:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000914:	2207      	movs	r2, #7
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000918:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <MX_ADC1_Init+0x184>)
 800091a:	2207      	movs	r2, #7
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000920:	223c      	movs	r2, #60	; 0x3c
 8000922:	2100      	movs	r1, #0
 8000924:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000928:	2200      	movs	r2, #0
 800092a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <MX_ADC1_Init+0x184>)
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fe18 	bl	8001564 <HAL_ADC_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000938:	f000 f9e4 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4a3a      	ldr	r2, [pc, #232]	; (8000a28 <MX_ADC1_Init+0x18c>)
 8000940:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f001 f8cf 	bl	8001af8 <HAL_ADC_ConfigChannel>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800095e:	f000 f9d1 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2204      	movs	r2, #4
 8000966:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000968:	1d3a      	adds	r2, r7, #4
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_ADC1_Init+0x184>)
 800096c:	0011      	movs	r1, r2
 800096e:	0018      	movs	r0, r3
 8000970:	f001 f8c2 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000978:	f000 f9c4 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2208      	movs	r2, #8
 8000980:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000982:	1d3a      	adds	r2, r7, #4
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f001 f8b5 	bl	8001af8 <HAL_ADC_ConfigChannel>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000992:	f000 f9b7 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	220c      	movs	r2, #12
 800099a:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC1_Init+0x184>)
 80009a0:	0011      	movs	r1, r2
 80009a2:	0018      	movs	r0, r3
 80009a4:	f001 f8a8 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80009a8:	1e03      	subs	r3, r0, #0
 80009aa:	d001      	beq.n	80009b0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80009ac:	f000 f9aa 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2210      	movs	r2, #16
 80009b4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b6:	1d3a      	adds	r2, r7, #4
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_ADC1_Init+0x184>)
 80009ba:	0011      	movs	r1, r2
 80009bc:	0018      	movs	r0, r3
 80009be:	f001 f89b 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80009c2:	1e03      	subs	r3, r0, #0
 80009c4:	d001      	beq.n	80009ca <MX_ADC1_Init+0x12e>
  {
    Error_Handler();
 80009c6:	f000 f99d 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2214      	movs	r2, #20
 80009ce:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	1d3a      	adds	r2, r7, #4
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ADC1_Init+0x184>)
 80009d4:	0011      	movs	r1, r2
 80009d6:	0018      	movs	r0, r3
 80009d8:	f001 f88e 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x148>
  {
    Error_Handler();
 80009e0:	f000 f990 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	2218      	movs	r2, #24
 80009e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	1d3a      	adds	r2, r7, #4
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_ADC1_Init+0x184>)
 80009ee:	0011      	movs	r1, r2
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 f881 	bl	8001af8 <HAL_ADC_ConfigChannel>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0x162>
  {
    Error_Handler();
 80009fa:	f000 f983 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	221c      	movs	r2, #28
 8000a02:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	1d3a      	adds	r2, r7, #4
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_ADC1_Init+0x184>)
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f874 	bl	8001af8 <HAL_ADC_ConfigChannel>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8000a14:	f000 f976 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b004      	add	sp, #16
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200000b4 	.word	0x200000b4
 8000a24:	40012400 	.word	0x40012400
 8000a28:	30001000 	.word	0x30001000

08000a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	231c      	movs	r3, #28
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	230c      	movs	r3, #12
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f003 ff45 	bl	80048cc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	231c      	movs	r3, #28
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f003 ff3e 	bl	80048cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a52:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <MX_TIM3_Init+0xbc>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a58:	220c      	movs	r2, #12
 8000a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <MX_TIM3_Init+0xc0>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 fae4 	bl	8003044 <HAL_TIM_PWM_Init>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a80:	f000 f940 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a84:	211c      	movs	r1, #28
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a92:	187a      	adds	r2, r7, r1
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f003 f9d7 	bl	8003e4c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9e:	1e03      	subs	r3, r0, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000aa2:	f000 f92f 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa6:	003b      	movs	r3, r7
 8000aa8:	2260      	movs	r2, #96	; 0x60
 8000aaa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aac:	003b      	movs	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	003b      	movs	r3, r7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab8:	003b      	movs	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000abe:	0039      	movs	r1, r7
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 fd75 	bl	80035b4 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8000ace:	f000 f919 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <MX_TIM3_Init+0xb8>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f000 f9e9 	bl	8000eac <HAL_TIM_MspPostInit>

}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b00a      	add	sp, #40	; 0x28
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	20000118 	.word	0x20000118
 8000ae8:	40000400 	.word	0x40000400
 8000aec:	00000834 	.word	0x00000834

08000af0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <MX_TIM16_Init+0x48>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 10991;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000afc:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <MX_TIM16_Init+0x4c>)
 8000afe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65501;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b08:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <MX_TIM16_Init+0x50>)
 8000b0a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000b12:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b1a:	2280      	movs	r2, #128	; 0x80
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000b1e:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <MX_TIM16_Init+0x44>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f002 f9e9 	bl	8002ef8 <HAL_TIM_Base_Init>
 8000b26:	1e03      	subs	r3, r0, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000b2a:	f000 f8eb 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000164 	.word	0x20000164
 8000b38:	40014400 	.word	0x40014400
 8000b3c:	00002aef 	.word	0x00002aef
 8000b40:	0000ffdd 	.word	0x0000ffdd

08000b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b4a:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <MX_USART2_UART_Init+0x64>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b50:	22e1      	movs	r2, #225	; 0xe1
 8000b52:	0252      	lsls	r2, r2, #9
 8000b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x60>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f003 f9d6 	bl	8003f40 <HAL_UART_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f000 f8b4 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	200001b0 	.word	0x200001b0
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	240c      	movs	r4, #12
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2314      	movs	r3, #20
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f003 fe85 	bl	80048cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b4a      	ldr	r3, [pc, #296]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bc8:	2104      	movs	r1, #4
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2201      	movs	r2, #1
 8000bec:	4013      	ands	r3, r2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfe:	4b3c      	ldr	r3, [pc, #240]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2202      	movs	r2, #2
 8000c04:	4013      	ands	r3, r2
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c0a:	2388      	movs	r3, #136	; 0x88
 8000c0c:	0099      	lsls	r1, r3, #2
 8000c0e:	23a0      	movs	r3, #160	; 0xa0
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2200      	movs	r2, #0
 8000c14:	0018      	movs	r0, r3
 8000c16:	f001 fcc4 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000c1a:	4936      	ldr	r1, [pc, #216]	; (8000cf4 <MX_GPIO_Init+0x148>)
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fcbe 	bl	80025a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c26:	193b      	adds	r3, r7, r4
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0192      	lsls	r2, r2, #6
 8000c2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	4a32      	ldr	r2, [pc, #200]	; (8000cfc <MX_GPIO_Init+0x150>)
 8000c32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2201      	movs	r2, #1
 8000c38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <MX_GPIO_Init+0x154>)
 8000c3e:	0019      	movs	r1, r3
 8000c40:	0010      	movs	r0, r2
 8000c42:	f001 fb1f 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8000c46:	0021      	movs	r1, r4
 8000c48:	187b      	adds	r3, r7, r1
 8000c4a:	2288      	movs	r2, #136	; 0x88
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	000c      	movs	r4, r1
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2201      	movs	r2, #1
 8000c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	193b      	adds	r3, r7, r4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	193b      	adds	r3, r7, r4
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	193a      	adds	r2, r7, r4
 8000c66:	23a0      	movs	r3, #160	; 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 fb09 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <MX_GPIO_Init+0x148>)
 8000c76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	4a1a      	ldr	r2, [pc, #104]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000c8e:	0019      	movs	r1, r3
 8000c90:	0010      	movs	r0, r2
 8000c92:	f001 faf7 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	0212      	lsls	r2, r2, #8
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	4a16      	ldr	r2, [pc, #88]	; (8000cfc <MX_GPIO_Init+0x150>)
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	193a      	adds	r2, r7, r4
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fae6 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2240      	movs	r2, #64	; 0x40
 8000cbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <MX_GPIO_Init+0x150>)
 8000cc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <MX_GPIO_Init+0x14c>)
 8000cce:	0019      	movs	r1, r3
 8000cd0:	0010      	movs	r0, r2
 8000cd2:	f001 fad7 	bl	8002284 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2007      	movs	r0, #7
 8000cdc:	f001 faa0 	bl	8002220 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ce0:	2007      	movs	r0, #7
 8000ce2:	f001 fab2 	bl	800224a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b009      	add	sp, #36	; 0x24
 8000cec:	bd90      	pop	{r4, r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	00008380 	.word	0x00008380
 8000cf8:	50000400 	.word	0x50000400
 8000cfc:	10210000 	.word	0x10210000
 8000d00:	50000800 	.word	0x50000800

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	430a      	orrs	r2, r1
 8000d20:	641a      	str	r2, [r3, #64]	; 0x40
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	2201      	movs	r2, #1
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0549      	lsls	r1, r1, #21
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	055b      	lsls	r3, r3, #21
 8000d44:	4013      	ands	r3, r2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b002      	add	sp, #8
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b091      	sub	sp, #68	; 0x44
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	232c      	movs	r3, #44	; 0x2c
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	0018      	movs	r0, r3
 8000d66:	2314      	movs	r3, #20
 8000d68:	001a      	movs	r2, r3
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	f003 fdae 	bl	80048cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	2410      	movs	r4, #16
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	0018      	movs	r0, r3
 8000d76:	231c      	movs	r3, #28
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f003 fda6 	bl	80048cc <memset>
  if(hadc->Instance==ADC1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a20      	ldr	r2, [pc, #128]	; (8000e08 <HAL_ADC_MspInit+0xb0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d13a      	bne.n	8000e00 <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	01d2      	lsls	r2, r2, #7
 8000d90:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f001 ffbe 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	1e03      	subs	r3, r0, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000da4:	f7ff ffae 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dac:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0349      	lsls	r1, r1, #13
 8000db2:	430a      	orrs	r2, r1
 8000db4:	641a      	str	r2, [r3, #64]	; 0x40
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	035b      	lsls	r3, r3, #13
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dc8:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
 8000dd0:	4b0e      	ldr	r3, [pc, #56]	; (8000e0c <HAL_ADC_MspInit+0xb4>)
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ddc:	212c      	movs	r1, #44	; 0x2c
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0152      	lsls	r2, r2, #5
 8000de4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	2203      	movs	r2, #3
 8000dea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	187a      	adds	r2, r7, r1
 8000df4:	23a0      	movs	r3, #160	; 0xa0
 8000df6:	05db      	lsls	r3, r3, #23
 8000df8:	0011      	movs	r1, r2
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f001 fa42 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e00:	46c0      	nop			; (mov r8, r8)
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b011      	add	sp, #68	; 0x44
 8000e06:	bd90      	pop	{r4, r7, pc}
 8000e08:	40012400 	.word	0x40012400
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_TIM_PWM_MspInit+0x44>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d113      	bne.n	8000e4a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e22:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_TIM_PWM_MspInit+0x48>)
 8000e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_TIM_PWM_MspInit+0x48>)
 8000e28:	2102      	movs	r1, #2
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_TIM_PWM_MspInit+0x48>)
 8000e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2010      	movs	r0, #16
 8000e40:	f001 f9ee 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e44:	2010      	movs	r0, #16
 8000e46:	f001 fa00 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b004      	add	sp, #16
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40000400 	.word	0x40000400
 8000e58:	40021000 	.word	0x40021000

08000e5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_TIM_Base_MspInit+0x48>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d115      	bne.n	8000e9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0289      	lsls	r1, r1, #10
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <HAL_TIM_Base_MspInit+0x4c>)
 8000e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2015      	movs	r0, #21
 8000e90:	f001 f9c6 	bl	8002220 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000e94:	2015      	movs	r0, #21
 8000e96:	f001 f9d8 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b004      	add	sp, #16
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	40014400 	.word	0x40014400
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	240c      	movs	r4, #12
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f003 fd04 	bl	80048cc <memset>
  if(htim->Instance==TIM3)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_TIM_MspPostInit+0x70>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d121      	bne.n	8000f12 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_TIM_MspPostInit+0x74>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_TIM_MspPostInit+0x74>)
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <HAL_TIM_MspPostInit+0x74>)
 8000edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ee6:	0021      	movs	r1, r4
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	187b      	adds	r3, r7, r1
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	187b      	adds	r3, r7, r1
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2200      	movs	r2, #0
 8000efe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2201      	movs	r2, #1
 8000f04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_TIM_MspPostInit+0x78>)
 8000f0a:	0019      	movs	r1, r3
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	f001 f9b9 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b009      	add	sp, #36	; 0x24
 8000f18:	bd90      	pop	{r4, r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40000400 	.word	0x40000400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	50000800 	.word	0x50000800

08000f28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	; 0x2c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f30:	2414      	movs	r4, #20
 8000f32:	193b      	adds	r3, r7, r4
 8000f34:	0018      	movs	r0, r3
 8000f36:	2314      	movs	r3, #20
 8000f38:	001a      	movs	r2, r3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	f003 fcc6 	bl	80048cc <memset>
  if(huart->Instance==USART2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a1b      	ldr	r2, [pc, #108]	; (8000fb4 <HAL_UART_MspInit+0x8c>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d130      	bne.n	8000fac <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f50:	2180      	movs	r1, #128	; 0x80
 8000f52:	0289      	lsls	r1, r1, #10
 8000f54:	430a      	orrs	r2, r1
 8000f56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f58:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	029b      	lsls	r3, r3, #10
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_UART_MspInit+0x90>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2201      	movs	r2, #1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f7e:	0021      	movs	r1, r4
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	187a      	adds	r2, r7, r1
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 f96c 	bl	8002284 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b00b      	add	sp, #44	; 0x2c
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	40004400 	.word	0x40004400
 8000fb8:	40021000 	.word	0x40021000

08000fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc0:	e7fe      	b.n	8000fc0 <NMI_Handler+0x4>

08000fc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc6:	e7fe      	b.n	8000fc6 <HardFault_Handler+0x4>

08000fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe0:	f000 f8fa 	bl	80011d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000fee:	2040      	movs	r0, #64	; 0x40
 8000ff0:	f001 faf4 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	019b      	lsls	r3, r3, #6
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f001 faef 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	0018      	movs	r0, r3
 8001004:	f001 faea 	bl	80025dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <TIM3_IRQHandler+0x14>)
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f9ca 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800101c:	46c0      	nop			; (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	20000118 	.word	0x20000118

08001028 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <TIM16_IRQHandler+0x14>)
 800102e:	0018      	movs	r0, r3
 8001030:	f002 f9be 	bl	80033b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001034:	46c0      	nop			; (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000164 	.word	0x20000164

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f003 fc34 	bl	80048dc <__errno>
 8001074:	0003      	movs	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	18d2      	adds	r2, r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20003000 	.word	0x20003000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000244 	.word	0x20000244
 80010a8:	20000398 	.word	0x20000398

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SystemInit+0x14>)
 80010b2:	2280      	movs	r2, #128	; 0x80
 80010b4:	0512      	lsls	r2, r2, #20
 80010b6:	609a      	str	r2, [r3, #8]
#endif
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c8:	f7ff fff0 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80010cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80010ce:	e003      	b.n	80010d8 <LoopCopyDataInit>

080010d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80010d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80010d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80010d6:	3104      	adds	r1, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80010d8:	480a      	ldr	r0, [pc, #40]	; (8001104 <LoopForever+0xa>)
  ldr r3, =_edata
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <LoopForever+0xe>)
  adds r2, r0, r1
 80010dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80010de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010e0:	d3f6      	bcc.n	80010d0 <CopyDataInit>
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopForever+0x12>)
  b LoopFillZerobss
 80010e4:	e002      	b.n	80010ec <LoopFillZerobss>

080010e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  str  r3, [r2]
 80010e8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ea:	3204      	adds	r2, #4

080010ec <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <LoopForever+0x16>)
  cmp r2, r3
 80010ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010f0:	d3f9      	bcc.n	80010e6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80010f2:	f003 fbf9 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f6:	f7ff fb79 	bl	80007ec <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001100:	0800535c 	.word	0x0800535c
  ldr r0, =_sdata
 8001104:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001108:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 800110c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8001110:	20000394 	.word	0x20000394

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f80e 	bl	8001144 <HAL_InitTick>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d003      	beq.n	8001134 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800112c:	1dfb      	adds	r3, r7, #7
 800112e:	2201      	movs	r2, #1
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e001      	b.n	8001138 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001134:	f7ff fdec 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	781b      	ldrb	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	b002      	add	sp, #8
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	2200      	movs	r2, #0
 8001152:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <HAL_InitTick+0x88>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d02b      	beq.n	80011b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_InitTick+0x8c>)
 800115e:	681c      	ldr	r4, [r3, #0]
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_InitTick+0x88>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0019      	movs	r1, r3
 8001166:	23fa      	movs	r3, #250	; 0xfa
 8001168:	0098      	lsls	r0, r3, #2
 800116a:	f7fe ffdf 	bl	800012c <__udivsi3>
 800116e:	0003      	movs	r3, r0
 8001170:	0019      	movs	r1, r3
 8001172:	0020      	movs	r0, r4
 8001174:	f7fe ffda 	bl	800012c <__udivsi3>
 8001178:	0003      	movs	r3, r0
 800117a:	0018      	movs	r0, r3
 800117c:	f001 f875 	bl	800226a <HAL_SYSTICK_Config>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d112      	bne.n	80011aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d80a      	bhi.n	80011a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	425b      	negs	r3, r3
 8001190:	2200      	movs	r2, #0
 8001192:	0018      	movs	r0, r3
 8001194:	f001 f844 	bl	8002220 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_InitTick+0x90>)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e00d      	b.n	80011bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a0:	230f      	movs	r3, #15
 80011a2:	18fb      	adds	r3, r7, r3
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e008      	b.n	80011bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b005      	add	sp, #20
 80011c8:	bd90      	pop	{r4, r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	20000008 	.word	0x20000008
 80011d0:	20000000 	.word	0x20000000
 80011d4:	20000004 	.word	0x20000004

080011d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <HAL_IncTick+0x1c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_IncTick+0x20>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	18d2      	adds	r2, r2, r3
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_IncTick+0x20>)
 80011ea:	601a      	str	r2, [r3, #0]
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	20000008 	.word	0x20000008
 80011f8:	20000248 	.word	0x20000248

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GetTick+0x10>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000248 	.word	0x20000248

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff fff0 	bl	80011fc <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	3301      	adds	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	001a      	movs	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	189b      	adds	r3, r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	f7ff ffe0 	bl	80011fc <HAL_GetTick>
 800123c:	0002      	movs	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_SuspendTick+0x18>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_SuspendTick+0x18>)
 8001262:	2102      	movs	r1, #2
 8001264:	438a      	bics	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	46c0      	nop			; (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <HAL_ResumeTick+0x18>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b03      	ldr	r3, [pc, #12]	; (800128c <HAL_ResumeTick+0x18>)
 800127e:	2102      	movs	r1, #2
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	e000e010 	.word	0xe000e010

08001290 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a05      	ldr	r2, [pc, #20]	; (80012b4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80012a0:	401a      	ands	r2, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
}
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	ff3fffff 	.word	0xff3fffff

080012b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	23c0      	movs	r3, #192	; 0xc0
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	4013      	ands	r3, r2
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b002      	add	sp, #8
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	2104      	movs	r1, #4
 80012e6:	400a      	ands	r2, r1
 80012e8:	2107      	movs	r1, #7
 80012ea:	4091      	lsls	r1, r2
 80012ec:	000a      	movs	r2, r1
 80012ee:	43d2      	mvns	r2, r2
 80012f0:	401a      	ands	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2104      	movs	r1, #4
 80012f6:	400b      	ands	r3, r1
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4099      	lsls	r1, r3
 80012fc:	000b      	movs	r3, r1
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b004      	add	sp, #16
 800130a:	bd80      	pop	{r7, pc}

0800130c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	2104      	movs	r1, #4
 800131e:	400a      	ands	r2, r1
 8001320:	2107      	movs	r1, #7
 8001322:	4091      	lsls	r1, r2
 8001324:	000a      	movs	r2, r1
 8001326:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2104      	movs	r1, #4
 800132c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800132e:	40da      	lsrs	r2, r3
 8001330:	0013      	movs	r3, r2
}
 8001332:	0018      	movs	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	b002      	add	sp, #8
 8001338:	bd80      	pop	{r7, pc}

0800133a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	23c0      	movs	r3, #192	; 0xc0
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d101      	bne.n	8001352 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800134e:	2301      	movs	r3, #1
 8001350:	e000      	b.n	8001354 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001352:	2300      	movs	r3, #0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}

0800135c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	211f      	movs	r1, #31
 8001370:	400a      	ands	r2, r1
 8001372:	210f      	movs	r1, #15
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	43d2      	mvns	r2, r2
 800137a:	401a      	ands	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	0e9b      	lsrs	r3, r3, #26
 8001380:	210f      	movs	r1, #15
 8001382:	4019      	ands	r1, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	201f      	movs	r0, #31
 8001388:	4003      	ands	r3, r0
 800138a:	4099      	lsls	r1, r3
 800138c:	000b      	movs	r3, r1
 800138e:	431a      	orrs	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b004      	add	sp, #16
 800139a:	bd80      	pop	{r7, pc}

0800139c <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	025b      	lsls	r3, r3, #9
 80013ae:	0a5b      	lsrs	r3, r3, #9
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}

080013be <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	683a      	ldr	r2, [r7, #0]
 80013ce:	0252      	lsls	r2, r2, #9
 80013d0:	0a52      	lsrs	r2, r2, #9
 80013d2:	43d2      	mvns	r2, r2
 80013d4:	401a      	ands	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	0212      	lsls	r2, r2, #8
 80013f8:	43d2      	mvns	r2, r2
 80013fa:	401a      	ands	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	021b      	lsls	r3, r3, #8
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	400b      	ands	r3, r1
 8001404:	4904      	ldr	r1, [pc, #16]	; (8001418 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001406:	400b      	ands	r3, r1
 8001408:	431a      	orrs	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b004      	add	sp, #16
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	7fffff00 	.word	0x7fffff00

0800141c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4a05      	ldr	r2, [pc, #20]	; (8001440 <LL_ADC_EnableInternalRegulator+0x24>)
 800142a:	4013      	ands	r3, r2
 800142c:	2280      	movs	r2, #128	; 0x80
 800142e:	0552      	lsls	r2, r2, #21
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	6fffffe8 	.word	0x6fffffe8

08001444 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	055b      	lsls	r3, r3, #21
 8001454:	401a      	ands	r2, r3
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	055b      	lsls	r3, r3, #21
 800145a:	429a      	cmp	r2, r3
 800145c:	d101      	bne.n	8001462 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001462:	2300      	movs	r3, #0
}
 8001464:	0018      	movs	r0, r3
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}

0800146c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <LL_ADC_Enable+0x20>)
 800147a:	4013      	ands	r3, r2
 800147c:	2201      	movs	r2, #1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b002      	add	sp, #8
 800148a:	bd80      	pop	{r7, pc}
 800148c:	7fffffe8 	.word	0x7fffffe8

08001490 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <LL_ADC_Disable+0x20>)
 800149e:	4013      	ands	r3, r2
 80014a0:	2202      	movs	r2, #2
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014a8:	46c0      	nop			; (mov r8, r8)
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	7fffffe8 	.word	0x7fffffe8

080014b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <LL_ADC_IsEnabled+0x18>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <LL_ADC_IsEnabled+0x1a>
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b082      	sub	sp, #8
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2202      	movs	r2, #2
 80014e4:	4013      	ands	r3, r2
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d101      	bne.n	80014ee <LL_ADC_IsDisableOngoing+0x18>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_IsDisableOngoing+0x1a>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <LL_ADC_REG_StartConversion+0x20>)
 8001506:	4013      	ands	r3, r2
 8001508:	2204      	movs	r2, #4
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b002      	add	sp, #8
 8001516:	bd80      	pop	{r7, pc}
 8001518:	7fffffe8 	.word	0x7fffffe8

0800151c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	4a04      	ldr	r2, [pc, #16]	; (800153c <LL_ADC_REG_StopConversion+0x20>)
 800152a:	4013      	ands	r3, r2
 800152c:	2210      	movs	r2, #16
 800152e:	431a      	orrs	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b002      	add	sp, #8
 800153a:	bd80      	pop	{r7, pc}
 800153c:	7fffffe8 	.word	0x7fffffe8

08001540 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2204      	movs	r2, #4
 800154e:	4013      	ands	r3, r2
 8001550:	2b04      	cmp	r3, #4
 8001552:	d101      	bne.n	8001558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b002      	add	sp, #8
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	231f      	movs	r3, #31
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e17e      	b.n	8001888 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10a      	bne.n	80015a8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fbdf 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2254      	movs	r2, #84	; 0x54
 80015a4:	2100      	movs	r1, #0
 80015a6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff49 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d114      	bne.n	80015e0 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f7ff ff2e 	bl	800141c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80015c0:	4bb3      	ldr	r3, [pc, #716]	; (8001890 <HAL_ADC_Init+0x32c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	49b3      	ldr	r1, [pc, #716]	; (8001894 <HAL_ADC_Init+0x330>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7fe fdb0 	bl	800012c <__udivsi3>
 80015cc:	0003      	movs	r3, r0
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d2:	e002      	b.n	80015da <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f9      	bne.n	80015d4 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff2d 	bl	8001444 <LL_ADC_IsInternalRegulatorEnabled>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d10f      	bne.n	800160e <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	2210      	movs	r2, #16
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2201      	movs	r2, #1
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001606:	231f      	movs	r3, #31
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	2201      	movs	r2, #1
 800160c:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	0018      	movs	r0, r3
 8001614:	f7ff ff94 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	2210      	movs	r2, #16
 8001622:	4013      	ands	r3, r2
 8001624:	d000      	beq.n	8001628 <HAL_ADC_Init+0xc4>
 8001626:	e122      	b.n	800186e <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d000      	beq.n	8001630 <HAL_ADC_Init+0xcc>
 800162e:	e11e      	b.n	800186e <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	4a98      	ldr	r2, [pc, #608]	; (8001898 <HAL_ADC_Init+0x334>)
 8001636:	4013      	ands	r3, r2
 8001638:	2202      	movs	r2, #2
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff35 	bl	80014b4 <LL_ADC_IsEnabled>
 800164a:	1e03      	subs	r3, r0, #0
 800164c:	d000      	beq.n	8001650 <HAL_ADC_Init+0xec>
 800164e:	e0ad      	b.n	80017ac <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e1b      	ldrb	r3, [r3, #24]
 8001658:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800165a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	7e5b      	ldrb	r3, [r3, #25]
 8001660:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001662:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7e9b      	ldrb	r3, [r3, #26]
 8001668:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800166a:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_ADC_Init+0x116>
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	e000      	b.n	800167c <HAL_ADC_Init+0x118>
 800167a:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800167c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001682:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	2b00      	cmp	r3, #0
 800168a:	da04      	bge.n	8001696 <HAL_ADC_Init+0x132>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	085b      	lsrs	r3, r3, #1
 8001694:	e001      	b.n	800169a <HAL_ADC_Init+0x136>
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800169a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	212c      	movs	r1, #44	; 0x2c
 80016a0:	5c5b      	ldrb	r3, [r3, r1]
 80016a2:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016a4:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2220      	movs	r2, #32
 80016b0:	5c9b      	ldrb	r3, [r3, r2]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d115      	bne.n	80016e2 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7e9b      	ldrb	r3, [r3, #26]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d105      	bne.n	80016ca <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0252      	lsls	r2, r2, #9
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	e00b      	b.n	80016e2 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ce:	2220      	movs	r2, #32
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016da:	2201      	movs	r2, #1
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ee:	23e0      	movs	r3, #224	; 0xe0
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016f8:	4313      	orrs	r3, r2
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4a65      	ldr	r2, [pc, #404]	; (800189c <HAL_ADC_Init+0x338>)
 8001708:	4013      	ands	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	430a      	orrs	r2, r1
 8001714:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	0f9b      	lsrs	r3, r3, #30
 800171c:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001722:	4313      	orrs	r3, r2
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4313      	orrs	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	223c      	movs	r2, #60	; 0x3c
 800172e:	5c9b      	ldrb	r3, [r3, r2]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d111      	bne.n	8001758 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	0f9b      	lsrs	r3, r3, #30
 800173a:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001740:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001746:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800174c:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	4313      	orrs	r3, r2
 8001752:	2201      	movs	r2, #1
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	4a50      	ldr	r2, [pc, #320]	; (80018a0 <HAL_ADC_Init+0x33c>)
 8001760:	4013      	ands	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	430a      	orrs	r2, r1
 800176c:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	23c0      	movs	r3, #192	; 0xc0
 8001774:	061b      	lsls	r3, r3, #24
 8001776:	429a      	cmp	r2, r3
 8001778:	d018      	beq.n	80017ac <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	05db      	lsls	r3, r3, #23
 8001782:	429a      	cmp	r2, r3
 8001784:	d012      	beq.n	80017ac <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	429a      	cmp	r2, r3
 8001790:	d00c      	beq.n	80017ac <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <HAL_ADC_Init+0x340>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a44      	ldr	r2, [pc, #272]	; (80018a8 <HAL_ADC_Init+0x344>)
 8001798:	4013      	ands	r3, r2
 800179a:	0019      	movs	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	23f0      	movs	r3, #240	; 0xf0
 80017a2:	039b      	lsls	r3, r3, #14
 80017a4:	401a      	ands	r2, r3
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_ADC_Init+0x340>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6818      	ldr	r0, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f7ff fd8b 	bl	80012d2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c4:	4939      	ldr	r1, [pc, #228]	; (80018ac <HAL_ADC_Init+0x348>)
 80017c6:	001a      	movs	r2, r3
 80017c8:	f7ff fd83 	bl	80012d2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2110      	movs	r1, #16
 80017e0:	4249      	negs	r1, r1
 80017e2:	430a      	orrs	r2, r1
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28
 80017e6:	e018      	b.n	800181a <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691a      	ldr	r2, [r3, #16]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	039b      	lsls	r3, r3, #14
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d112      	bne.n	800181a <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	221c      	movs	r2, #28
 8001804:	4013      	ands	r3, r2
 8001806:	2210      	movs	r2, #16
 8001808:	4252      	negs	r2, r2
 800180a:	409a      	lsls	r2, r3
 800180c:	0011      	movs	r1, r2
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2100      	movs	r1, #0
 8001820:	0018      	movs	r0, r3
 8001822:	f7ff fd73 	bl	800130c <LL_ADC_GetSamplingTimeCommonChannels>
 8001826:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800182c:	429a      	cmp	r2, r3
 800182e:	d10b      	bne.n	8001848 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800183a:	2203      	movs	r2, #3
 800183c:	4393      	bics	r3, r2
 800183e:	2201      	movs	r2, #1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001846:	e01c      	b.n	8001882 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	2212      	movs	r2, #18
 800184e:	4393      	bics	r3, r2
 8001850:	2210      	movs	r2, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2201      	movs	r2, #1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001864:	231f      	movs	r3, #31
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800186c:	e009      	b.n	8001882 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	2210      	movs	r2, #16
 8001874:	431a      	orrs	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800187a:	231f      	movs	r3, #31
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001882:	231f      	movs	r3, #31
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	781b      	ldrb	r3, [r3, #0]
}
 8001888:	0018      	movs	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	b008      	add	sp, #32
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000000 	.word	0x20000000
 8001894:	00030d40 	.word	0x00030d40
 8001898:	fffffefd 	.word	0xfffffefd
 800189c:	ffde0201 	.word	0xffde0201
 80018a0:	1ffffc02 	.word	0x1ffffc02
 80018a4:	40012708 	.word	0x40012708
 80018a8:	ffc3ffff 	.word	0xffc3ffff
 80018ac:	7fffff04 	.word	0x7fffff04

080018b0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018b0:	b5b0      	push	{r4, r5, r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fe3f 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d135      	bne.n	8001932 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2254      	movs	r2, #84	; 0x54
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_Start+0x24>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e035      	b.n	8001940 <HAL_ADC_Start+0x90>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2254      	movs	r2, #84	; 0x54
 80018d8:	2101      	movs	r1, #1
 80018da:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018dc:	250f      	movs	r5, #15
 80018de:	197c      	adds	r4, r7, r5
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	0018      	movs	r0, r3
 80018e4:	f000 fb1a 	bl	8001f1c <ADC_Enable>
 80018e8:	0003      	movs	r3, r0
 80018ea:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ec:	197b      	adds	r3, r7, r5
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d119      	bne.n	8001928 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_ADC_Start+0x98>)
 80018fa:	4013      	ands	r3, r2
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	0052      	lsls	r2, r2, #1
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	221c      	movs	r2, #28
 8001912:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2254      	movs	r2, #84	; 0x54
 8001918:	2100      	movs	r1, #0
 800191a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff fde9 	bl	80014f8 <LL_ADC_REG_StartConversion>
 8001926:	e008      	b.n	800193a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2254      	movs	r2, #84	; 0x54
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]
 8001930:	e003      	b.n	800193a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001932:	230f      	movs	r3, #15
 8001934:	18fb      	adds	r3, r7, r3
 8001936:	2202      	movs	r2, #2
 8001938:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800193a:	230f      	movs	r3, #15
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	781b      	ldrb	r3, [r3, #0]
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bdb0      	pop	{r4, r5, r7, pc}
 8001948:	fffff0fe 	.word	0xfffff0fe

0800194c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800194c:	b5b0      	push	{r4, r5, r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2254      	movs	r2, #84	; 0x54
 8001958:	5c9b      	ldrb	r3, [r3, r2]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_ADC_Stop+0x16>
 800195e:	2302      	movs	r3, #2
 8001960:	e029      	b.n	80019b6 <HAL_ADC_Stop+0x6a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2254      	movs	r2, #84	; 0x54
 8001966:	2101      	movs	r1, #1
 8001968:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800196a:	250f      	movs	r5, #15
 800196c:	197c      	adds	r4, r7, r5
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 fa97 	bl	8001ea4 <ADC_ConversionStop>
 8001976:	0003      	movs	r3, r0
 8001978:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800197a:	197b      	adds	r3, r7, r5
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d112      	bne.n	80019a8 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001982:	197c      	adds	r4, r7, r5
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	0018      	movs	r0, r3
 8001988:	f000 fb46 	bl	8002018 <ADC_Disable>
 800198c:	0003      	movs	r3, r0
 800198e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001990:	197b      	adds	r3, r7, r5
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a08      	ldr	r2, [pc, #32]	; (80019c0 <HAL_ADC_Stop+0x74>)
 800199e:	4013      	ands	r3, r2
 80019a0:	2201      	movs	r2, #1
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2254      	movs	r2, #84	; 0x54
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80019b0:	230f      	movs	r3, #15
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	781b      	ldrb	r3, [r3, #0]
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bdb0      	pop	{r4, r5, r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	fffffefe 	.word	0xfffffefe

080019c4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d102      	bne.n	80019dc <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019d6:	2308      	movs	r3, #8
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	e00f      	b.n	80019fc <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2201      	movs	r2, #1
 80019e4:	4013      	ands	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	2220      	movs	r2, #32
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e06c      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80019f8:	2304      	movs	r3, #4
 80019fa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80019fc:	f7ff fbfe 	bl	80011fc <HAL_GetTick>
 8001a00:	0003      	movs	r3, r0
 8001a02:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a04:	e019      	b.n	8001a3a <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	d016      	beq.n	8001a3a <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a0c:	f7ff fbf6 	bl	80011fc <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d302      	bcc.n	8001a22 <HAL_ADC_PollForConversion+0x5e>
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10b      	bne.n	8001a3a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a26:	2204      	movs	r2, #4
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2254      	movs	r2, #84	; 0x54
 8001a32:	2100      	movs	r1, #0
 8001a34:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e04b      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0df      	beq.n	8001a06 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff fc6e 	bl	800133a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a5e:	1e03      	subs	r3, r0, #0
 8001a60:	d02e      	beq.n	8001ac0 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e9b      	ldrb	r3, [r3, #26]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d12a      	bne.n	8001ac0 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2208      	movs	r2, #8
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d123      	bne.n	8001ac0 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fd5f 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d110      	bne.n	8001aa8 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	210c      	movs	r1, #12
 8001a92:	438a      	bics	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_ADC_PollForConversion+0x118>)
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	659a      	str	r2, [r3, #88]	; 0x58
 8001aa6:	e00b      	b.n	8001ac0 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	2220      	movs	r2, #32
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab8:	2201      	movs	r2, #1
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7e1b      	ldrb	r3, [r3, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d103      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	220c      	movs	r2, #12
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	fffffefe 	.word	0xfffffefe

08001ae0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b02:	2317      	movs	r3, #23
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2254      	movs	r2, #84	; 0x54
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x24>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e1be      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x3a2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2254      	movs	r2, #84	; 0x54
 8001b20:	2101      	movs	r1, #1
 8001b22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7ff fd09 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001b2e:	1e03      	subs	r3, r0, #0
 8001b30:	d000      	beq.n	8001b34 <HAL_ADC_ConfigChannel+0x3c>
 8001b32:	e1a1      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d100      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x46>
 8001b3c:	e152      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	061b      	lsls	r3, r3, #24
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d004      	beq.n	8001b54 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001b4e:	4ac2      	ldr	r2, [pc, #776]	; (8001e58 <HAL_ADC_ConfigChannel+0x360>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d108      	bne.n	8001b66 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	0010      	movs	r0, r2
 8001b60:	f7ff fc1c 	bl	800139c <LL_ADC_REG_SetSequencerChAdd>
 8001b64:	e0ed      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	211f      	movs	r1, #31
 8001b70:	400b      	ands	r3, r1
 8001b72:	210f      	movs	r1, #15
 8001b74:	4099      	lsls	r1, r3
 8001b76:	000b      	movs	r3, r1
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	0019      	movs	r1, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	025b      	lsls	r3, r3, #9
 8001b84:	0a5b      	lsrs	r3, r3, #9
 8001b86:	d105      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x9c>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	0e9b      	lsrs	r3, r3, #26
 8001b8e:	221f      	movs	r2, #31
 8001b90:	4013      	ands	r3, r2
 8001b92:	e0bc      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d000      	beq.n	8001ba0 <HAL_ADC_ConfigChannel+0xa8>
 8001b9e:	e0b5      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x214>
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d000      	beq.n	8001bac <HAL_ADC_ConfigChannel+0xb4>
 8001baa:	e0ad      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x210>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d000      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0xc0>
 8001bb6:	e0a5      	b.n	8001d04 <HAL_ADC_ConfigChannel+0x20c>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d000      	beq.n	8001bc4 <HAL_ADC_ConfigChannel+0xcc>
 8001bc2:	e09d      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x208>
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d000      	beq.n	8001bd0 <HAL_ADC_ConfigChannel+0xd8>
 8001bce:	e095      	b.n	8001cfc <HAL_ADC_ConfigChannel+0x204>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d000      	beq.n	8001bdc <HAL_ADC_ConfigChannel+0xe4>
 8001bda:	e08d      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x200>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2240      	movs	r2, #64	; 0x40
 8001be2:	4013      	ands	r3, r2
 8001be4:	d000      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0xf0>
 8001be6:	e085      	b.n	8001cf4 <HAL_ADC_ConfigChannel+0x1fc>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d000      	beq.n	8001bf4 <HAL_ADC_ConfigChannel+0xfc>
 8001bf2:	e07d      	b.n	8001cf0 <HAL_ADC_ConfigChannel+0x1f8>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d000      	beq.n	8001c02 <HAL_ADC_ConfigChannel+0x10a>
 8001c00:	e074      	b.n	8001cec <HAL_ADC_ConfigChannel+0x1f4>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d000      	beq.n	8001c10 <HAL_ADC_ConfigChannel+0x118>
 8001c0e:	e06b      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x1f0>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d000      	beq.n	8001c1e <HAL_ADC_ConfigChannel+0x126>
 8001c1c:	e062      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x1ec>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	4013      	ands	r3, r2
 8001c28:	d000      	beq.n	8001c2c <HAL_ADC_ConfigChannel+0x134>
 8001c2a:	e059      	b.n	8001ce0 <HAL_ADC_ConfigChannel+0x1e8>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	; 0x80
 8001c32:	015b      	lsls	r3, r3, #5
 8001c34:	4013      	ands	r3, r2
 8001c36:	d151      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1e4>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	019b      	lsls	r3, r3, #6
 8001c40:	4013      	ands	r3, r2
 8001c42:	d149      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x1e0>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	01db      	lsls	r3, r3, #7
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d141      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x1dc>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d139      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1d8>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	4013      	ands	r3, r2
 8001c66:	d131      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x1d4>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	029b      	lsls	r3, r3, #10
 8001c70:	4013      	ands	r3, r2
 8001c72:	d129      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1d0>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	02db      	lsls	r3, r3, #11
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d121      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x1cc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	031b      	lsls	r3, r3, #12
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d119      	bne.n	8001cc0 <HAL_ADC_ConfigChannel+0x1c8>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	; 0x80
 8001c92:	035b      	lsls	r3, r3, #13
 8001c94:	4013      	ands	r3, r2
 8001c96:	d111      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1c4>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	039b      	lsls	r3, r3, #14
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d109      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1c0>
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	03db      	lsls	r3, r3, #15
 8001cac:	4013      	ands	r3, r2
 8001cae:	d001      	beq.n	8001cb4 <HAL_ADC_ConfigChannel+0x1bc>
 8001cb0:	2316      	movs	r3, #22
 8001cb2:	e02c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e02a      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cb8:	2315      	movs	r3, #21
 8001cba:	e028      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cbc:	2314      	movs	r3, #20
 8001cbe:	e026      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cc0:	2313      	movs	r3, #19
 8001cc2:	e024      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	e022      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cc8:	2311      	movs	r3, #17
 8001cca:	e020      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001ccc:	2310      	movs	r3, #16
 8001cce:	e01e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	e01c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cd4:	230e      	movs	r3, #14
 8001cd6:	e01a      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cd8:	230d      	movs	r3, #13
 8001cda:	e018      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cdc:	230c      	movs	r3, #12
 8001cde:	e016      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	e014      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001ce4:	230a      	movs	r3, #10
 8001ce6:	e012      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001ce8:	2309      	movs	r3, #9
 8001cea:	e010      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cec:	2308      	movs	r3, #8
 8001cee:	e00e      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cf0:	2307      	movs	r3, #7
 8001cf2:	e00c      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cf4:	2306      	movs	r3, #6
 8001cf6:	e00a      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cf8:	2305      	movs	r3, #5
 8001cfa:	e008      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e006      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e004      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x216>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	6852      	ldr	r2, [r2, #4]
 8001d12:	201f      	movs	r0, #31
 8001d14:	4002      	ands	r2, r0
 8001d16:	4093      	lsls	r3, r2
 8001d18:	000a      	movs	r2, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d808      	bhi.n	8001d42 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	f7ff fb0d 	bl	800135c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	001a      	movs	r2, r3
 8001d50:	f7ff fb48 	bl	80013e4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db00      	blt.n	8001d5e <HAL_ADC_ConfigChannel+0x266>
 8001d5c:	e096      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff faa9 	bl	80012b8 <LL_ADC_GetCommonPathInternalCh>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_ADC_ConfigChannel+0x368>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d123      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	041b      	lsls	r3, r3, #16
 8001d7a:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d7c:	d11e      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0412      	lsls	r2, r2, #16
 8001d84:	4313      	orrs	r3, r2
 8001d86:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001d88:	0019      	movs	r1, r3
 8001d8a:	0010      	movs	r0, r2
 8001d8c:	f7ff fa80 	bl	8001290 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_ADC_ConfigChannel+0x36c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4934      	ldr	r1, [pc, #208]	; (8001e68 <HAL_ADC_ConfigChannel+0x370>)
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7fe f9c8 	bl	800012c <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	001a      	movs	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	189b      	adds	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001dac:	e002      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	3b01      	subs	r3, #1
 8001db2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f9      	bne.n	8001dae <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dba:	e067      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_ADC_ConfigChannel+0x374>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d162      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	03db      	lsls	r3, r3, #15
 8001dcc:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001dce:	d15d      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	03d2      	lsls	r2, r2, #15
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001dda:	0019      	movs	r1, r3
 8001ddc:	0010      	movs	r0, r2
 8001dde:	f7ff fa57 	bl	8001290 <LL_ADC_SetCommonPathInternalCh>
 8001de2:	e053      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	061b      	lsls	r3, r3, #24
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d004      	beq.n	8001dfa <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001df4:	4a18      	ldr	r2, [pc, #96]	; (8001e58 <HAL_ADC_ConfigChannel+0x360>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d107      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0019      	movs	r1, r3
 8001e04:	0010      	movs	r0, r2
 8001e06:	f7ff fada 	bl	80013be <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	da3c      	bge.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fa4f 	bl	80012b8 <LL_ADC_GetCommonPathInternalCh>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0f      	ldr	r2, [pc, #60]	; (8001e60 <HAL_ADC_ConfigChannel+0x368>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d108      	bne.n	8001e3a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_ADC_ConfigChannel+0x378>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001e30:	0019      	movs	r1, r3
 8001e32:	0010      	movs	r0, r2
 8001e34:	f7ff fa2c 	bl	8001290 <LL_ADC_SetCommonPathInternalCh>
 8001e38:	e028      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_ADC_ConfigChannel+0x374>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d123      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4a0b      	ldr	r2, [pc, #44]	; (8001e74 <HAL_ADC_ConfigChannel+0x37c>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	4a04      	ldr	r2, [pc, #16]	; (8001e5c <HAL_ADC_ConfigChannel+0x364>)
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	0010      	movs	r0, r2
 8001e50:	f7ff fa1e 	bl	8001290 <LL_ADC_SetCommonPathInternalCh>
 8001e54:	e01a      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x394>
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	80000004 	.word	0x80000004
 8001e5c:	40012708 	.word	0x40012708
 8001e60:	a4000200 	.word	0xa4000200
 8001e64:	20000000 	.word	0x20000000
 8001e68:	00030d40 	.word	0x00030d40
 8001e6c:	a8000400 	.word	0xa8000400
 8001e70:	ff7fffff 	.word	0xff7fffff
 8001e74:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e84:	2317      	movs	r3, #23
 8001e86:	18fb      	adds	r3, r7, r3
 8001e88:	2201      	movs	r2, #1
 8001e8a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2254      	movs	r2, #84	; 0x54
 8001e90:	2100      	movs	r1, #0
 8001e92:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001e94:	2317      	movs	r3, #23
 8001e96:	18fb      	adds	r3, r7, r3
 8001e98:	781b      	ldrb	r3, [r3, #0]
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b006      	add	sp, #24
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)

08001ea4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f7ff fb45 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001eb6:	1e03      	subs	r3, r0, #0
 8001eb8:	d02b      	beq.n	8001f12 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fb09 	bl	80014d6 <LL_ADC_IsDisableOngoing>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d104      	bne.n	8001ed2 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fb25 	bl	800151c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ed2:	f7ff f993 	bl	80011fc <HAL_GetTick>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001eda:	e014      	b.n	8001f06 <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001edc:	f7ff f98e 	bl	80011fc <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d90d      	bls.n	8001f06 <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	2210      	movs	r2, #16
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efa:	2201      	movs	r2, #1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e006      	b.n	8001f14 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d1e4      	bne.n	8001edc <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	0018      	movs	r0, r3
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b004      	add	sp, #16
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff fac1 	bl	80014b4 <LL_ADC_IsEnabled>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d162      	bne.n	8001ffc <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a32      	ldr	r2, [pc, #200]	; (8002008 <ADC_Enable+0xec>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	2210      	movs	r2, #16
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2201      	movs	r2, #1
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e04f      	b.n	8001ffe <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff fa82 	bl	800146c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001f68:	4b28      	ldr	r3, [pc, #160]	; (800200c <ADC_Enable+0xf0>)
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff f9a4 	bl	80012b8 <LL_ADC_GetCommonPathInternalCh>
 8001f70:	0002      	movs	r2, r0
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	041b      	lsls	r3, r3, #16
 8001f76:	4013      	ands	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001f7a:	4b25      	ldr	r3, [pc, #148]	; (8002010 <ADC_Enable+0xf4>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4925      	ldr	r1, [pc, #148]	; (8002014 <ADC_Enable+0xf8>)
 8001f80:	0018      	movs	r0, r3
 8001f82:	f7fe f8d3 	bl	800012c <__udivsi3>
 8001f86:	0003      	movs	r3, r0
 8001f88:	3301      	adds	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f8c:	e002      	b.n	8001f94 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f9      	bne.n	8001f8e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7e5b      	ldrb	r3, [r3, #25]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d02c      	beq.n	8001ffc <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f92b 	bl	80011fc <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001faa:	e020      	b.n	8001fee <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f7ff fa7f 	bl	80014b4 <LL_ADC_IsEnabled>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d104      	bne.n	8001fc4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7ff fa54 	bl	800146c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fc4:	f7ff f91a 	bl	80011fc <HAL_GetTick>
 8001fc8:	0002      	movs	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d90d      	bls.n	8001fee <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d1d7      	bne.n	8001fac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	0018      	movs	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	b004      	add	sp, #16
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	80000017 	.word	0x80000017
 800200c:	40012708 	.word	0x40012708
 8002010:	20000000 	.word	0x20000000
 8002014:	00030d40 	.word	0x00030d40

08002018 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	0018      	movs	r0, r3
 8002026:	f7ff fa56 	bl	80014d6 <LL_ADC_IsDisableOngoing>
 800202a:	0003      	movs	r3, r0
 800202c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff fa3e 	bl	80014b4 <LL_ADC_IsEnabled>
 8002038:	1e03      	subs	r3, r0, #0
 800203a:	d040      	beq.n	80020be <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d13d      	bne.n	80020be <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2205      	movs	r2, #5
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10d      	bne.n	800206c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	0018      	movs	r0, r3
 8002056:	f7ff fa1b 	bl	8001490 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2203      	movs	r2, #3
 8002060:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002062:	f7ff f8cb 	bl	80011fc <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800206a:	e022      	b.n	80020b2 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	2210      	movs	r2, #16
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207c:	2201      	movs	r2, #1
 800207e:	431a      	orrs	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e01b      	b.n	80020c0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002088:	f7ff f8b8 	bl	80011fc <HAL_GetTick>
 800208c:	0002      	movs	r2, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d90d      	bls.n	80020b2 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	2210      	movs	r2, #16
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a6:	2201      	movs	r2, #1
 80020a8:	431a      	orrs	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e006      	b.n	80020c0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	d1e4      	bne.n	8002088 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	0002      	movs	r2, r0
 80020d0:	1dfb      	adds	r3, r7, #7
 80020d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b7f      	cmp	r3, #127	; 0x7f
 80020da:	d809      	bhi.n	80020f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	231f      	movs	r3, #31
 80020e4:	401a      	ands	r2, r3
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_EnableIRQ+0x30>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	4091      	lsls	r1, r2
 80020ec:	000a      	movs	r2, r1
 80020ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b002      	add	sp, #8
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b590      	push	{r4, r7, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	0002      	movs	r2, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	1dfb      	adds	r3, r7, #7
 8002108:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800210a:	1dfb      	adds	r3, r7, #7
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b7f      	cmp	r3, #127	; 0x7f
 8002110:	d828      	bhi.n	8002164 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002112:	4a2f      	ldr	r2, [pc, #188]	; (80021d0 <__NVIC_SetPriority+0xd4>)
 8002114:	1dfb      	adds	r3, r7, #7
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	b25b      	sxtb	r3, r3
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	33c0      	adds	r3, #192	; 0xc0
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	589b      	ldr	r3, [r3, r2]
 8002122:	1dfa      	adds	r2, r7, #7
 8002124:	7812      	ldrb	r2, [r2, #0]
 8002126:	0011      	movs	r1, r2
 8002128:	2203      	movs	r2, #3
 800212a:	400a      	ands	r2, r1
 800212c:	00d2      	lsls	r2, r2, #3
 800212e:	21ff      	movs	r1, #255	; 0xff
 8002130:	4091      	lsls	r1, r2
 8002132:	000a      	movs	r2, r1
 8002134:	43d2      	mvns	r2, r2
 8002136:	401a      	ands	r2, r3
 8002138:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	019b      	lsls	r3, r3, #6
 800213e:	22ff      	movs	r2, #255	; 0xff
 8002140:	401a      	ands	r2, r3
 8002142:	1dfb      	adds	r3, r7, #7
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	0018      	movs	r0, r3
 8002148:	2303      	movs	r3, #3
 800214a:	4003      	ands	r3, r0
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002150:	481f      	ldr	r0, [pc, #124]	; (80021d0 <__NVIC_SetPriority+0xd4>)
 8002152:	1dfb      	adds	r3, r7, #7
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b25b      	sxtb	r3, r3
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	430a      	orrs	r2, r1
 800215c:	33c0      	adds	r3, #192	; 0xc0
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002162:	e031      	b.n	80021c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002164:	4a1b      	ldr	r2, [pc, #108]	; (80021d4 <__NVIC_SetPriority+0xd8>)
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	0019      	movs	r1, r3
 800216c:	230f      	movs	r3, #15
 800216e:	400b      	ands	r3, r1
 8002170:	3b08      	subs	r3, #8
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3306      	adds	r3, #6
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	18d3      	adds	r3, r2, r3
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1dfa      	adds	r2, r7, #7
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	0011      	movs	r1, r2
 8002184:	2203      	movs	r2, #3
 8002186:	400a      	ands	r2, r1
 8002188:	00d2      	lsls	r2, r2, #3
 800218a:	21ff      	movs	r1, #255	; 0xff
 800218c:	4091      	lsls	r1, r2
 800218e:	000a      	movs	r2, r1
 8002190:	43d2      	mvns	r2, r2
 8002192:	401a      	ands	r2, r3
 8002194:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	22ff      	movs	r2, #255	; 0xff
 800219c:	401a      	ands	r2, r3
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	0018      	movs	r0, r3
 80021a4:	2303      	movs	r3, #3
 80021a6:	4003      	ands	r3, r0
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ac:	4809      	ldr	r0, [pc, #36]	; (80021d4 <__NVIC_SetPriority+0xd8>)
 80021ae:	1dfb      	adds	r3, r7, #7
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	001c      	movs	r4, r3
 80021b4:	230f      	movs	r3, #15
 80021b6:	4023      	ands	r3, r4
 80021b8:	3b08      	subs	r3, #8
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	430a      	orrs	r2, r1
 80021be:	3306      	adds	r3, #6
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	18c3      	adds	r3, r0, r3
 80021c4:	3304      	adds	r3, #4
 80021c6:	601a      	str	r2, [r3, #0]
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b003      	add	sp, #12
 80021ce:	bd90      	pop	{r4, r7, pc}
 80021d0:	e000e100 	.word	0xe000e100
 80021d4:	e000ed00 	.word	0xe000ed00

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	045b      	lsls	r3, r3, #17
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d301      	bcc.n	80021f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ec:	2301      	movs	r3, #1
 80021ee:	e010      	b.n	8002212 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021f0:	4b0a      	ldr	r3, [pc, #40]	; (800221c <SysTick_Config+0x44>)
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	3a01      	subs	r2, #1
 80021f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f8:	2301      	movs	r3, #1
 80021fa:	425b      	negs	r3, r3
 80021fc:	2103      	movs	r1, #3
 80021fe:	0018      	movs	r0, r3
 8002200:	f7ff ff7c 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SysTick_Config+0x44>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800220a:	4b04      	ldr	r3, [pc, #16]	; (800221c <SysTick_Config+0x44>)
 800220c:	2207      	movs	r2, #7
 800220e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b002      	add	sp, #8
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	e000e010 	.word	0xe000e010

08002220 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	210f      	movs	r1, #15
 800222c:	187b      	adds	r3, r7, r1
 800222e:	1c02      	adds	r2, r0, #0
 8002230:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	187b      	adds	r3, r7, r1
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	b25b      	sxtb	r3, r3
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b004      	add	sp, #16
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	0002      	movs	r2, r0
 8002252:	1dfb      	adds	r3, r7, #7
 8002254:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b25b      	sxtb	r3, r3
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ff33 	bl	80020c8 <__NVIC_EnableIRQ>
}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	46bd      	mov	sp, r7
 8002266:	b002      	add	sp, #8
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff ffaf 	bl	80021d8 <SysTick_Config>
 800227a:	0003      	movs	r3, r0
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b002      	add	sp, #8
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002292:	e153      	b.n	800253c <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2101      	movs	r1, #1
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4091      	lsls	r1, r2
 800229e:	000a      	movs	r2, r1
 80022a0:	4013      	ands	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d100      	bne.n	80022ac <HAL_GPIO_Init+0x28>
 80022aa:	e144      	b.n	8002536 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x38>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d125      	bne.n	8002308 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	08da      	lsrs	r2, r3, #3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3208      	adds	r2, #8
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	58d3      	ldr	r3, [r2, r3]
 80022c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2207      	movs	r2, #7
 80022ce:	4013      	ands	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	220f      	movs	r2, #15
 80022d4:	409a      	lsls	r2, r3
 80022d6:	0013      	movs	r3, r2
 80022d8:	43da      	mvns	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	220f      	movs	r2, #15
 80022e6:	401a      	ands	r2, r3
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2107      	movs	r1, #7
 80022ec:	400b      	ands	r3, r1
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	6979      	ldr	r1, [r7, #20]
 8002306:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	409a      	lsls	r2, r3
 8002316:	0013      	movs	r3, r2
 8002318:	43da      	mvns	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	4013      	ands	r3, r2
 800231e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2203      	movs	r2, #3
 8002326:	401a      	ands	r2, r3
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	0013      	movs	r3, r2
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	4313      	orrs	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00b      	beq.n	800235c <HAL_GPIO_Init+0xd8>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d007      	beq.n	800235c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002350:	2b11      	cmp	r3, #17
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b12      	cmp	r3, #18
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	43da      	mvns	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	4013      	ands	r3, r2
 8002372:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	409a      	lsls	r2, r3
 800237e:	0013      	movs	r3, r2
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	409a      	lsls	r2, r3
 8002398:	0013      	movs	r3, r2
 800239a:	43da      	mvns	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	4013      	ands	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	2201      	movs	r2, #1
 80023aa:	401a      	ands	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	409a      	lsls	r2, r3
 80023b0:	0013      	movs	r3, r2
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d017      	beq.n	80023f6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	409a      	lsls	r2, r3
 80023d4:	0013      	movs	r3, r2
 80023d6:	43da      	mvns	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	4013      	ands	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	055b      	lsls	r3, r3, #21
 80023fe:	4013      	ands	r3, r2
 8002400:	d100      	bne.n	8002404 <HAL_GPIO_Init+0x180>
 8002402:	e098      	b.n	8002536 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002404:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3318      	adds	r3, #24
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	589b      	ldr	r3, [r3, r2]
 8002410:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	220f      	movs	r2, #15
 800241c:	409a      	lsls	r2, r3
 800241e:	0013      	movs	r3, r2
 8002420:	43da      	mvns	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	23a0      	movs	r3, #160	; 0xa0
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d019      	beq.n	8002466 <HAL_GPIO_Init+0x1e2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a48      	ldr	r2, [pc, #288]	; (8002558 <HAL_GPIO_Init+0x2d4>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d013      	beq.n	8002462 <HAL_GPIO_Init+0x1de>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a47      	ldr	r2, [pc, #284]	; (800255c <HAL_GPIO_Init+0x2d8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d00d      	beq.n	800245e <HAL_GPIO_Init+0x1da>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a46      	ldr	r2, [pc, #280]	; (8002560 <HAL_GPIO_Init+0x2dc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d007      	beq.n	800245a <HAL_GPIO_Init+0x1d6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a45      	ldr	r2, [pc, #276]	; (8002564 <HAL_GPIO_Init+0x2e0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d101      	bne.n	8002456 <HAL_GPIO_Init+0x1d2>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002456:	2306      	movs	r3, #6
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x1e4>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x1e4>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x1e4>
 8002466:	2300      	movs	r3, #0
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	2103      	movs	r1, #3
 800246c:	400a      	ands	r2, r1
 800246e:	00d2      	lsls	r2, r2, #3
 8002470:	4093      	lsls	r3, r2
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4313      	orrs	r3, r2
 8002476:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002478:	4936      	ldr	r1, [pc, #216]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3318      	adds	r3, #24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002486:	4a33      	ldr	r2, [pc, #204]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	58d3      	ldr	r3, [r2, r3]
 800248c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43da      	mvns	r2, r3
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4013      	ands	r3, r2
 8002496:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	025b      	lsls	r3, r3, #9
 80024a0:	4013      	ands	r3, r2
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80024ac:	4929      	ldr	r1, [pc, #164]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024ae:	2280      	movs	r2, #128	; 0x80
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80024b4:	4a27      	ldr	r2, [pc, #156]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024b6:	2384      	movs	r3, #132	; 0x84
 80024b8:	58d3      	ldr	r3, [r2, r3]
 80024ba:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43da      	mvns	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	4013      	ands	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	029b      	lsls	r3, r3, #10
 80024ce:	4013      	ands	r3, r2
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80024da:	491e      	ldr	r1, [pc, #120]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024dc:	2284      	movs	r2, #132	; 0x84
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	43da      	mvns	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4013      	ands	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	035b      	lsls	r3, r3, #13
 80024fa:	4013      	ands	r3, r2
 80024fc:	d003      	beq.n	8002506 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800250c:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	43da      	mvns	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	4013      	ands	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	039b      	lsls	r3, r3, #14
 8002524:	4013      	ands	r3, r2
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4313      	orrs	r3, r2
 800252e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_GPIO_Init+0x2d0>)
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3301      	adds	r3, #1
 800253a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	40da      	lsrs	r2, r3
 8002544:	1e13      	subs	r3, r2, #0
 8002546:	d000      	beq.n	800254a <HAL_GPIO_Init+0x2c6>
 8002548:	e6a4      	b.n	8002294 <HAL_GPIO_Init+0x10>
  }
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021800 	.word	0x40021800
 8002558:	50000400 	.word	0x50000400
 800255c:	50000800 	.word	0x50000800
 8002560:	50000c00 	.word	0x50000c00
 8002564:	50001400 	.word	0x50001400

08002568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	000a      	movs	r2, r1
 8002572:	1cbb      	adds	r3, r7, #2
 8002574:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	1cba      	adds	r2, r7, #2
 800257c:	8812      	ldrh	r2, [r2, #0]
 800257e:	4013      	ands	r3, r2
 8002580:	d004      	beq.n	800258c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002582:	230f      	movs	r3, #15
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e003      	b.n	8002594 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258c:	230f      	movs	r3, #15
 800258e:	18fb      	adds	r3, r7, r3
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	781b      	ldrb	r3, [r3, #0]
}
 800259a:	0018      	movs	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	b004      	add	sp, #16
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
 80025aa:	0008      	movs	r0, r1
 80025ac:	0011      	movs	r1, r2
 80025ae:	1cbb      	adds	r3, r7, #2
 80025b0:	1c02      	adds	r2, r0, #0
 80025b2:	801a      	strh	r2, [r3, #0]
 80025b4:	1c7b      	adds	r3, r7, #1
 80025b6:	1c0a      	adds	r2, r1, #0
 80025b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ba:	1c7b      	adds	r3, r7, #1
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025c2:	1cbb      	adds	r3, r7, #2
 80025c4:	881a      	ldrh	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025ca:	e003      	b.n	80025d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025cc:	1cbb      	adds	r3, r7, #2
 80025ce:	881a      	ldrh	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b002      	add	sp, #8
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	0002      	movs	r2, r0
 80025e4:	1dbb      	adds	r3, r7, #6
 80025e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	1dba      	adds	r2, r7, #6
 80025ee:	8812      	ldrh	r2, [r2, #0]
 80025f0:	4013      	ands	r3, r2
 80025f2:	d008      	beq.n	8002606 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80025f6:	1dba      	adds	r2, r7, #6
 80025f8:	8812      	ldrh	r2, [r2, #0]
 80025fa:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80025fc:	1dbb      	adds	r3, r7, #6
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 f815 	bl	8002630 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	1dba      	adds	r2, r7, #6
 800260c:	8812      	ldrh	r2, [r2, #0]
 800260e:	4013      	ands	r3, r2
 8002610:	d008      	beq.n	8002624 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002614:	1dba      	adds	r2, r7, #6
 8002616:	8812      	ldrh	r2, [r2, #0]
 8002618:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800261a:	1dbb      	adds	r3, r7, #6
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	0018      	movs	r0, r3
 8002620:	f7fd fefa 	bl	8000418 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021800 	.word	0x40021800

08002630 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	0002      	movs	r2, r0
 8002638:	1dbb      	adds	r3, r7, #6
 800263a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b002      	add	sp, #8
 8002642:	bd80      	pop	{r7, pc}

08002644 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	000a      	movs	r2, r1
 800264e:	1cfb      	adds	r3, r7, #3
 8002650:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002658:	2104      	movs	r1, #4
 800265a:	438a      	bics	r2, r1
 800265c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800265e:	1cfb      	adds	r3, r7, #3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002666:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002668:	e002      	b.n	8002670 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 800266a:	bf40      	sev
    __WFE();
 800266c:	bf20      	wfe
    __WFE();
 800266e:	bf20      	wfe
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1d0      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2201      	movs	r2, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d100      	bne.n	800269a <HAL_RCC_OscConfig+0x1e>
 8002698:	e069      	b.n	800276e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800269a:	4bc8      	ldr	r3, [pc, #800]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2238      	movs	r2, #56	; 0x38
 80026a0:	4013      	ands	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d105      	bne.n	80026b6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d15d      	bne.n	800276e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1bc      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	025b      	lsls	r3, r3, #9
 80026be:	429a      	cmp	r2, r3
 80026c0:	d107      	bne.n	80026d2 <HAL_RCC_OscConfig+0x56>
 80026c2:	4bbe      	ldr	r3, [pc, #760]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4bbd      	ldr	r3, [pc, #756]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	0249      	lsls	r1, r1, #9
 80026cc:	430a      	orrs	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e020      	b.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	23a0      	movs	r3, #160	; 0xa0
 80026d8:	02db      	lsls	r3, r3, #11
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10e      	bne.n	80026fc <HAL_RCC_OscConfig+0x80>
 80026de:	4bb7      	ldr	r3, [pc, #732]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4bb6      	ldr	r3, [pc, #728]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	02c9      	lsls	r1, r1, #11
 80026e8:	430a      	orrs	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	4bb3      	ldr	r3, [pc, #716]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	4bb2      	ldr	r3, [pc, #712]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0249      	lsls	r1, r1, #9
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00b      	b.n	8002714 <HAL_RCC_OscConfig+0x98>
 80026fc:	4baf      	ldr	r3, [pc, #700]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4bae      	ldr	r3, [pc, #696]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002702:	49af      	ldr	r1, [pc, #700]	; (80029c0 <HAL_RCC_OscConfig+0x344>)
 8002704:	400a      	ands	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	4bac      	ldr	r3, [pc, #688]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4bab      	ldr	r3, [pc, #684]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800270e:	49ad      	ldr	r1, [pc, #692]	; (80029c4 <HAL_RCC_OscConfig+0x348>)
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d014      	beq.n	8002746 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fd6e 	bl	80011fc <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002726:	f7fe fd69 	bl	80011fc <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b64      	cmp	r3, #100	; 0x64
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e17b      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002738:	4ba0      	ldr	r3, [pc, #640]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	029b      	lsls	r3, r3, #10
 8002740:	4013      	ands	r3, r2
 8002742:	d0f0      	beq.n	8002726 <HAL_RCC_OscConfig+0xaa>
 8002744:	e013      	b.n	800276e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f7fe fd59 	bl	80011fc <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002750:	f7fe fd54 	bl	80011fc <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b64      	cmp	r3, #100	; 0x64
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e166      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002762:	4b96      	ldr	r3, [pc, #600]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	029b      	lsls	r3, r3, #10
 800276a:	4013      	ands	r3, r2
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2202      	movs	r2, #2
 8002774:	4013      	ands	r3, r2
 8002776:	d100      	bne.n	800277a <HAL_RCC_OscConfig+0xfe>
 8002778:	e086      	b.n	8002888 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277a:	4b90      	ldr	r3, [pc, #576]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2238      	movs	r2, #56	; 0x38
 8002780:	4013      	ands	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d12f      	bne.n	80027ea <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e14c      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b89      	ldr	r3, [pc, #548]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4a8b      	ldr	r2, [pc, #556]	; (80029c8 <HAL_RCC_OscConfig+0x34c>)
 800279c:	4013      	ands	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	021a      	lsls	r2, r3, #8
 80027a6:	4b85      	ldr	r3, [pc, #532]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80027a8:	430a      	orrs	r2, r1
 80027aa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027b2:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a85      	ldr	r2, [pc, #532]	; (80029cc <HAL_RCC_OscConfig+0x350>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	0019      	movs	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b7e      	ldr	r3, [pc, #504]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80027c6:	4b7d      	ldr	r3, [pc, #500]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	0adb      	lsrs	r3, r3, #11
 80027cc:	2207      	movs	r2, #7
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x354>)
 80027d2:	40da      	lsrs	r2, r3
 80027d4:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x358>)
 80027d6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80027d8:	4b7f      	ldr	r3, [pc, #508]	; (80029d8 <HAL_RCC_OscConfig+0x35c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0018      	movs	r0, r3
 80027de:	f7fe fcb1 	bl	8001144 <HAL_InitTick>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d050      	beq.n	8002888 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e122      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d030      	beq.n	8002854 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027f2:	4b72      	ldr	r3, [pc, #456]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a75      	ldr	r2, [pc, #468]	; (80029cc <HAL_RCC_OscConfig+0x350>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002806:	4b6d      	ldr	r3, [pc, #436]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	0049      	lsls	r1, r1, #1
 8002810:	430a      	orrs	r2, r1
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fcf2 	bl	80011fc <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800281e:	f7fe fced 	bl	80011fc <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0ff      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b62      	ldr	r3, [pc, #392]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4013      	ands	r3, r2
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b5f      	ldr	r3, [pc, #380]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a61      	ldr	r2, [pc, #388]	; (80029c8 <HAL_RCC_OscConfig+0x34c>)
 8002842:	4013      	ands	r3, r2
 8002844:	0019      	movs	r1, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	021a      	lsls	r2, r3, #8
 800284c:	4b5b      	ldr	r3, [pc, #364]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	e019      	b.n	8002888 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b58      	ldr	r3, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800285a:	4960      	ldr	r1, [pc, #384]	; (80029dc <HAL_RCC_OscConfig+0x360>)
 800285c:	400a      	ands	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fccc 	bl	80011fc <HAL_GetTick>
 8002864:	0003      	movs	r3, r0
 8002866:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800286a:	f7fe fcc7 	bl	80011fc <HAL_GetTick>
 800286e:	0002      	movs	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0d9      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	4013      	ands	r3, r2
 8002886:	d1f0      	bne.n	800286a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2208      	movs	r2, #8
 800288e:	4013      	ands	r3, r2
 8002890:	d042      	beq.n	8002918 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002892:	4b4a      	ldr	r3, [pc, #296]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2238      	movs	r2, #56	; 0x38
 8002898:	4013      	ands	r3, r2
 800289a:	2b18      	cmp	r3, #24
 800289c:	d105      	bne.n	80028aa <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d138      	bne.n	8002918 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e0c2      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80028b2:	4b42      	ldr	r3, [pc, #264]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80028b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	430a      	orrs	r2, r1
 80028bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fc9d 	bl	80011fc <HAL_GetTick>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80028c8:	f7fe fc98 	bl	80011fc <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0aa      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80028da:	4b38      	ldr	r3, [pc, #224]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80028dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028de:	2202      	movs	r2, #2
 80028e0:	4013      	ands	r3, r2
 80028e2:	d0f1      	beq.n	80028c8 <HAL_RCC_OscConfig+0x24c>
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028e6:	4b35      	ldr	r3, [pc, #212]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80028e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 80028ec:	2101      	movs	r1, #1
 80028ee:	438a      	bics	r2, r1
 80028f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f2:	f7fe fc83 	bl	80011fc <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80028fc:	f7fe fc7e 	bl	80011fc <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e090      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800290e:	4b2b      	ldr	r3, [pc, #172]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002912:	2202      	movs	r2, #2
 8002914:	4013      	ands	r3, r2
 8002916:	d1f1      	bne.n	80028fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2204      	movs	r2, #4
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_RCC_OscConfig+0x2a8>
 8002922:	e084      	b.n	8002a2e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002924:	230f      	movs	r3, #15
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2238      	movs	r2, #56	; 0x38
 8002932:	4013      	ands	r3, r2
 8002934:	2b20      	cmp	r3, #32
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d000      	beq.n	8002942 <HAL_RCC_OscConfig+0x2c6>
 8002940:	e075      	b.n	8002a2e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e074      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x2e0>
 800294e:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002950:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002952:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	65da      	str	r2, [r3, #92]	; 0x5c
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x31a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x302>
 8002964:	4b15      	ldr	r3, [pc, #84]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800296a:	2104      	movs	r1, #4
 800296c:	430a      	orrs	r2, r1
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002976:	2101      	movs	r1, #1
 8002978:	430a      	orrs	r2, r1
 800297a:	65da      	str	r2, [r3, #92]	; 0x5c
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x31a>
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002980:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002984:	2101      	movs	r1, #1
 8002986:	438a      	bics	r2, r1
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c
 800298a:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 800298c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x340>)
 8002990:	2104      	movs	r1, #4
 8002992:	438a      	bics	r2, r1
 8002994:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d028      	beq.n	80029f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299e:	f7fe fc2d 	bl	80011fc <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029a6:	e01d      	b.n	80029e4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a8:	f7fe fc28 	bl	80011fc <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x364>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d915      	bls.n	80029e4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e039      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	fffeffff 	.word	0xfffeffff
 80029c4:	fffbffff 	.word	0xfffbffff
 80029c8:	ffff80ff 	.word	0xffff80ff
 80029cc:	ffffc7ff 	.word	0xffffc7ff
 80029d0:	02dc6c00 	.word	0x02dc6c00
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000004 	.word	0x20000004
 80029dc:	fffffeff 	.word	0xfffffeff
 80029e0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <HAL_RCC_OscConfig+0x3bc>)
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	2202      	movs	r2, #2
 80029ea:	4013      	ands	r3, r2
 80029ec:	d0dc      	beq.n	80029a8 <HAL_RCC_OscConfig+0x32c>
 80029ee:	e013      	b.n	8002a18 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7fe fc04 	bl	80011fc <HAL_GetTick>
 80029f4:	0003      	movs	r3, r0
 80029f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80029f8:	e009      	b.n	8002a0e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7fe fbff 	bl	80011fc <HAL_GetTick>
 80029fe:	0002      	movs	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <HAL_RCC_OscConfig+0x3c0>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e010      	b.n	8002a30 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_OscConfig+0x3bc>)
 8002a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a12:	2202      	movs	r2, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	d1f0      	bne.n	80029fa <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d105      	bne.n	8002a2e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_OscConfig+0x3bc>)
 8002a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_RCC_OscConfig+0x3bc>)
 8002a28:	4905      	ldr	r1, [pc, #20]	; (8002a40 <HAL_RCC_OscConfig+0x3c4>)
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b006      	add	sp, #24
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	00001388 	.word	0x00001388
 8002a40:	efffffff 	.word	0xefffffff

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0e9      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d91e      	bls.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b73      	ldr	r3, [pc, #460]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b70      	ldr	r3, [pc, #448]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fbc0 	bl	80011fc <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a80:	e009      	b.n	8002a96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002a82:	f7fe fbbb 	bl	80011fc <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0ca      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2207      	movs	r2, #7
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1ee      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d017      	beq.n	8002ade <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002ab8:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a60      	ldr	r2, [pc, #384]	; (8002c40 <HAL_RCC_ClockConfig+0x1fc>)
 8002abe:	401a      	ands	r2, r3
 8002ac0:	4b5e      	ldr	r3, [pc, #376]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ac2:	21b0      	movs	r1, #176	; 0xb0
 8002ac4:	0109      	lsls	r1, r1, #4
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aca:	4b5c      	ldr	r3, [pc, #368]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	4a5d      	ldr	r2, [pc, #372]	; (8002c44 <HAL_RCC_ClockConfig+0x200>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4b58      	ldr	r3, [pc, #352]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d055      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8002ae8:	4b54      	ldr	r3, [pc, #336]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	221c      	movs	r2, #28
 8002aee:	4393      	bics	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b04:	4b4d      	ldr	r3, [pc, #308]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	029b      	lsls	r3, r3, #10
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d11f      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e08b      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b1c:	4b47      	ldr	r3, [pc, #284]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4013      	ands	r3, r2
 8002b26:	d113      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e07f      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002b34:	4b41      	ldr	r3, [pc, #260]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b38:	2202      	movs	r2, #2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e074      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b42:	4b3e      	ldr	r3, [pc, #248]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	2202      	movs	r2, #2
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e06d      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b50:	4b3a      	ldr	r3, [pc, #232]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2207      	movs	r2, #7
 8002b56:	4393      	bics	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4b37      	ldr	r3, [pc, #220]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b60:	430a      	orrs	r2, r1
 8002b62:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fb4a 	bl	80011fc <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6c:	e009      	b.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002b6e:	f7fe fb45 	bl	80011fc <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e054      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b82:	4b2e      	ldr	r3, [pc, #184]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2238      	movs	r2, #56	; 0x38
 8002b88:	401a      	ands	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d1ec      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d21e      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba2:	4b24      	ldr	r3, [pc, #144]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2207      	movs	r2, #7
 8002ba8:	4393      	bics	r3, r2
 8002baa:	0019      	movs	r1, r3
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb4:	f7fe fb22 	bl	80011fc <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bbc:	e009      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbe:	f7fe fb1d 	bl	80011fc <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	; (8002c38 <HAL_RCC_ClockConfig+0x1f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e02c      	b.n	8002c2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	4013      	ands	r3, r2
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2204      	movs	r2, #4
 8002be6:	4013      	ands	r3, r2
 8002be8:	d009      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002bea:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_RCC_ClockConfig+0x204>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	0019      	movs	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002bfe:	f000 f82b 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c02:	0001      	movs	r1, r0
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	0a1b      	lsrs	r3, r3, #8
 8002c0a:	220f      	movs	r2, #15
 8002c0c:	401a      	ands	r2, r3
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_ClockConfig+0x208>)
 8002c10:	0092      	lsls	r2, r2, #2
 8002c12:	58d3      	ldr	r3, [r2, r3]
 8002c14:	221f      	movs	r2, #31
 8002c16:	4013      	ands	r3, r2
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_ClockConfig+0x20c>)
 8002c1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <HAL_RCC_ClockConfig+0x210>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7fe fa8d 	bl	8001144 <HAL_InitTick>
 8002c2a:	0003      	movs	r3, r0
}
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b004      	add	sp, #16
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40022000 	.word	0x40022000
 8002c38:	00001388 	.word	0x00001388
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	ffff84ff 	.word	0xffff84ff
 8002c44:	fffff0ff 	.word	0xfffff0ff
 8002c48:	ffff8fff 	.word	0xffff8fff
 8002c4c:	08005254 	.word	0x08005254
 8002c50:	20000000 	.word	0x20000000
 8002c54:	20000004 	.word	0x20000004

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c5e:	4b1c      	ldr	r3, [pc, #112]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	2238      	movs	r2, #56	; 0x38
 8002c64:	4013      	ands	r3, r2
 8002c66:	d10f      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0adb      	lsrs	r3, r3, #11
 8002c6e:	2207      	movs	r2, #7
 8002c70:	4013      	ands	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	0013      	movs	r3, r2
 8002c78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002c7a:	6839      	ldr	r1, [r7, #0]
 8002c7c:	4815      	ldr	r0, [pc, #84]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c7e:	f7fd fa55 	bl	800012c <__udivsi3>
 8002c82:	0003      	movs	r3, r0
 8002c84:	607b      	str	r3, [r7, #4]
 8002c86:	e01e      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c88:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	2238      	movs	r2, #56	; 0x38
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d102      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	2238      	movs	r2, #56	; 0x38
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d103      	bne.n	8002cae <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ca6:	2380      	movs	r3, #128	; 0x80
 8002ca8:	021b      	lsls	r3, r3, #8
 8002caa:	607b      	str	r3, [r7, #4]
 8002cac:	e00b      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x78>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2238      	movs	r2, #56	; 0x38
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b18      	cmp	r3, #24
 8002cb8:	d103      	bne.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002cba:	23fa      	movs	r3, #250	; 0xfa
 8002cbc:	01db      	lsls	r3, r3, #7
 8002cbe:	607b      	str	r3, [r7, #4]
 8002cc0:	e001      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002cc6:	687b      	ldr	r3, [r7, #4]
}
 8002cc8:	0018      	movs	r0, r3
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	02dc6c00 	.word	0x02dc6c00

08002cd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002cf0:	f7ff fff2 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	0001      	movs	r1, r0
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0b1b      	lsrs	r3, r3, #12
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	401a      	ands	r2, r3
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	58d3      	ldr	r3, [r2, r3]
 8002d06:	221f      	movs	r2, #31
 8002d08:	4013      	ands	r3, r2
 8002d0a:	40d9      	lsrs	r1, r3
 8002d0c:	000b      	movs	r3, r1
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000
 8002d18:	08005294 	.word	0x08005294

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002d24:	2313      	movs	r3, #19
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d2c:	2312      	movs	r3, #18
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	029b      	lsls	r3, r3, #10
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d100      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002d40:	e079      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d42:	2011      	movs	r0, #17
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d4a:	4b64      	ldr	r3, [pc, #400]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	055b      	lsls	r3, r3, #21
 8002d52:	4013      	ands	r3, r2
 8002d54:	d110      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	4b61      	ldr	r3, [pc, #388]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d5a:	4b60      	ldr	r3, [pc, #384]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	0549      	lsls	r1, r1, #21
 8002d60:	430a      	orrs	r2, r1
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d64:	4b5d      	ldr	r3, [pc, #372]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	055b      	lsls	r3, r3, #21
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d72:	183b      	adds	r3, r7, r0
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002d78:	4b58      	ldr	r3, [pc, #352]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d7c:	23c0      	movs	r3, #192	; 0xc0
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d019      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d014      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002d94:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b4f      	ldr	r3, [pc, #316]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002da2:	4b4e      	ldr	r3, [pc, #312]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002da4:	2180      	movs	r1, #128	; 0x80
 8002da6:	0249      	lsls	r1, r1, #9
 8002da8:	430a      	orrs	r2, r1
 8002daa:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dac:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db0:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002db2:	494c      	ldr	r1, [pc, #304]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002db4:	400a      	ands	r2, r1
 8002db6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002db8:	4b48      	ldr	r3, [pc, #288]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fa19 	bl	80011fc <HAL_GetTick>
 8002dca:	0003      	movs	r3, r0
 8002dcc:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe fa14 	bl	80011fc <HAL_GetTick>
 8002dd4:	0002      	movs	r2, r0
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d904      	bls.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002de0:	2313      	movs	r3, #19
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2203      	movs	r2, #3
 8002de6:	701a      	strb	r2, [r3, #0]
          break;
 8002de8:	e004      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002dea:	4b3c      	ldr	r3, [pc, #240]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2202      	movs	r2, #2
 8002df0:	4013      	ands	r3, r2
 8002df2:	d0ed      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002df4:	2313      	movs	r3, #19
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d10a      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	4a37      	ldr	r2, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e12:	e005      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	2312      	movs	r3, #18
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2213      	movs	r2, #19
 8002e1a:	18ba      	adds	r2, r7, r2
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e20:	2311      	movs	r3, #17
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d105      	bne.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b2c      	ldr	r3, [pc, #176]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e2e:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e30:	492e      	ldr	r1, [pc, #184]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	400a      	ands	r2, r1
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d009      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e40:	4b26      	ldr	r3, [pc, #152]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e44:	2203      	movs	r2, #3
 8002e46:	4393      	bics	r3, r2
 8002e48:	0019      	movs	r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	4b23      	ldr	r3, [pc, #140]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e50:	430a      	orrs	r2, r1
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2240      	movs	r2, #64	; 0x40
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	01db      	lsls	r3, r3, #7
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e7e:	4b17      	ldr	r3, [pc, #92]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	0899      	lsrs	r1, r3, #2
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	4b14      	ldr	r3, [pc, #80]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d009      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e9c:	4b0f      	ldr	r3, [pc, #60]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eac:	430a      	orrs	r2, r1
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	da09      	bge.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	22e0      	movs	r2, #224	; 0xe0
 8002ebe:	4393      	bics	r3, r2
 8002ec0:	0019      	movs	r1, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002ecc:	2312      	movs	r3, #18
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	781b      	ldrb	r3, [r3, #0]
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	fffffcff 	.word	0xfffffcff
 8002ee4:	fffeffff 	.word	0xfffeffff
 8002ee8:	00001388 	.word	0x00001388
 8002eec:	efffffff 	.word	0xefffffff
 8002ef0:	ffffcfff 	.word	0xffffcfff
 8002ef4:	ffff3fff 	.word	0xffff3fff

08002ef8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e04a      	b.n	8002fa0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223d      	movs	r2, #61	; 0x3d
 8002f0e:	5c9b      	ldrb	r3, [r3, r2]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	223c      	movs	r2, #60	; 0x3c
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd ff9b 	bl	8000e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	223d      	movs	r2, #61	; 0x3d
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	3304      	adds	r3, #4
 8002f36:	0019      	movs	r1, r3
 8002f38:	0010      	movs	r0, r2
 8002f3a:	f000 fc5b 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2248      	movs	r2, #72	; 0x48
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	223e      	movs	r2, #62	; 0x3e
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	5499      	strb	r1, [r3, r2]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	223f      	movs	r2, #63	; 0x3f
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2240      	movs	r2, #64	; 0x40
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2241      	movs	r2, #65	; 0x41
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2242      	movs	r2, #66	; 0x42
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	5499      	strb	r1, [r3, r2]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2243      	movs	r2, #67	; 0x43
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2244      	movs	r2, #68	; 0x44
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	5499      	strb	r1, [r3, r2]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2245      	movs	r2, #69	; 0x45
 8002f82:	2101      	movs	r1, #1
 8002f84:	5499      	strb	r1, [r3, r2]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2246      	movs	r2, #70	; 0x46
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	5499      	strb	r1, [r3, r2]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2247      	movs	r2, #71	; 0x47
 8002f92:	2101      	movs	r1, #1
 8002f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	223d      	movs	r2, #61	; 0x3d
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	223d      	movs	r2, #61	; 0x3d
 8002fb4:	5c9b      	ldrb	r3, [r3, r2]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e037      	b.n	8003030 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	223d      	movs	r2, #61	; 0x3d
 8002fc4:	2102      	movs	r1, #2
 8002fc6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a16      	ldr	r2, [pc, #88]	; (8003038 <HAL_TIM_Base_Start_IT+0x90>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d004      	beq.n	8002fec <HAL_TIM_Base_Start_IT+0x44>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_TIM_Base_Start_IT+0x94>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d116      	bne.n	800301a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4a13      	ldr	r2, [pc, #76]	; (8003040 <HAL_TIM_Base_Start_IT+0x98>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b06      	cmp	r3, #6
 8002ffc:	d016      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x84>
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	025b      	lsls	r3, r3, #9
 8003004:	429a      	cmp	r2, r3
 8003006:	d011      	beq.n	800302c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2101      	movs	r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003018:	e008      	b.n	800302c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e000      	b.n	800302e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b004      	add	sp, #16
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40012c00 	.word	0x40012c00
 800303c:	40000400 	.word	0x40000400
 8003040:	00010007 	.word	0x00010007

08003044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e04a      	b.n	80030ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	223d      	movs	r2, #61	; 0x3d
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d107      	bne.n	8003072 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223c      	movs	r2, #60	; 0x3c
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f7fd fecf 	bl	8000e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223d      	movs	r2, #61	; 0x3d
 8003076:	2102      	movs	r1, #2
 8003078:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	0019      	movs	r1, r3
 8003084:	0010      	movs	r0, r2
 8003086:	f000 fbb5 	bl	80037f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2248      	movs	r2, #72	; 0x48
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	223e      	movs	r2, #62	; 0x3e
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223f      	movs	r2, #63	; 0x3f
 800309e:	2101      	movs	r1, #1
 80030a0:	5499      	strb	r1, [r3, r2]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2240      	movs	r2, #64	; 0x40
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2241      	movs	r2, #65	; 0x41
 80030ae:	2101      	movs	r1, #1
 80030b0:	5499      	strb	r1, [r3, r2]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2242      	movs	r2, #66	; 0x42
 80030b6:	2101      	movs	r1, #1
 80030b8:	5499      	strb	r1, [r3, r2]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2243      	movs	r2, #67	; 0x43
 80030be:	2101      	movs	r1, #1
 80030c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2244      	movs	r2, #68	; 0x44
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2245      	movs	r2, #69	; 0x45
 80030ce:	2101      	movs	r1, #1
 80030d0:	5499      	strb	r1, [r3, r2]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2246      	movs	r2, #70	; 0x46
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2247      	movs	r2, #71	; 0x47
 80030de:	2101      	movs	r1, #1
 80030e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	223d      	movs	r2, #61	; 0x3d
 80030e6:	2101      	movs	r1, #1
 80030e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b002      	add	sp, #8
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_TIM_PWM_Start+0x22>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	223e      	movs	r2, #62	; 0x3e
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3b01      	subs	r3, #1
 800310e:	1e5a      	subs	r2, r3, #1
 8003110:	4193      	sbcs	r3, r2
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e037      	b.n	8003186 <HAL_TIM_PWM_Start+0x92>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d108      	bne.n	800312e <HAL_TIM_PWM_Start+0x3a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	223f      	movs	r2, #63	; 0x3f
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	1e5a      	subs	r2, r3, #1
 8003128:	4193      	sbcs	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e02b      	b.n	8003186 <HAL_TIM_PWM_Start+0x92>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d108      	bne.n	8003146 <HAL_TIM_PWM_Start+0x52>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2240      	movs	r2, #64	; 0x40
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	1e5a      	subs	r2, r3, #1
 8003140:	4193      	sbcs	r3, r2
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e01f      	b.n	8003186 <HAL_TIM_PWM_Start+0x92>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b0c      	cmp	r3, #12
 800314a:	d108      	bne.n	800315e <HAL_TIM_PWM_Start+0x6a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2241      	movs	r2, #65	; 0x41
 8003150:	5c9b      	ldrb	r3, [r3, r2]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	1e5a      	subs	r2, r3, #1
 8003158:	4193      	sbcs	r3, r2
 800315a:	b2db      	uxtb	r3, r3
 800315c:	e013      	b.n	8003186 <HAL_TIM_PWM_Start+0x92>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	2b10      	cmp	r3, #16
 8003162:	d108      	bne.n	8003176 <HAL_TIM_PWM_Start+0x82>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2242      	movs	r2, #66	; 0x42
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	4193      	sbcs	r3, r2
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e007      	b.n	8003186 <HAL_TIM_PWM_Start+0x92>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2243      	movs	r2, #67	; 0x43
 800317a:	5c9b      	ldrb	r3, [r3, r2]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	4193      	sbcs	r3, r2
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07b      	b.n	8003286 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d104      	bne.n	800319e <HAL_TIM_PWM_Start+0xaa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	223e      	movs	r2, #62	; 0x3e
 8003198:	2102      	movs	r1, #2
 800319a:	5499      	strb	r1, [r3, r2]
 800319c:	e023      	b.n	80031e6 <HAL_TIM_PWM_Start+0xf2>
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d104      	bne.n	80031ae <HAL_TIM_PWM_Start+0xba>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	223f      	movs	r2, #63	; 0x3f
 80031a8:	2102      	movs	r1, #2
 80031aa:	5499      	strb	r1, [r3, r2]
 80031ac:	e01b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xf2>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0xca>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	2102      	movs	r1, #2
 80031ba:	5499      	strb	r1, [r3, r2]
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start+0xf2>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0xda>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2241      	movs	r2, #65	; 0x41
 80031c8:	2102      	movs	r1, #2
 80031ca:	5499      	strb	r1, [r3, r2]
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xf2>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xea>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2242      	movs	r2, #66	; 0x42
 80031d8:	2102      	movs	r1, #2
 80031da:	5499      	strb	r1, [r3, r2]
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_PWM_Start+0xf2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2243      	movs	r2, #67	; 0x43
 80031e2:	2102      	movs	r1, #2
 80031e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	0018      	movs	r0, r3
 80031f0:	f000 fe08 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a25      	ldr	r2, [pc, #148]	; (8003290 <HAL_TIM_PWM_Start+0x19c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIM_PWM_Start+0x11e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a24      	ldr	r2, [pc, #144]	; (8003294 <HAL_TIM_PWM_Start+0x1a0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIM_PWM_Start+0x11e>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <HAL_TIM_PWM_Start+0x1a4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_Start+0x122>
 8003212:	2301      	movs	r3, #1
 8003214:	e000      	b.n	8003218 <HAL_TIM_PWM_Start+0x124>
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	0209      	lsls	r1, r1, #8
 800322a:	430a      	orrs	r2, r1
 800322c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a17      	ldr	r2, [pc, #92]	; (8003290 <HAL_TIM_PWM_Start+0x19c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d004      	beq.n	8003242 <HAL_TIM_PWM_Start+0x14e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_TIM_PWM_Start+0x1a8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d116      	bne.n	8003270 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <HAL_TIM_PWM_Start+0x1ac>)
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b06      	cmp	r3, #6
 8003252:	d016      	beq.n	8003282 <HAL_TIM_PWM_Start+0x18e>
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	025b      	lsls	r3, r3, #9
 800325a:	429a      	cmp	r2, r3
 800325c:	d011      	beq.n	8003282 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800326e:	e008      	b.n	8003282 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2101      	movs	r1, #1
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e000      	b.n	8003284 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	0018      	movs	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	b004      	add	sp, #16
 800328c:	bd80      	pop	{r7, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	40012c00 	.word	0x40012c00
 8003294:	40014400 	.word	0x40014400
 8003298:	40014800 	.word	0x40014800
 800329c:	40000400 	.word	0x40000400
 80032a0:	00010007 	.word	0x00010007

080032a4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6839      	ldr	r1, [r7, #0]
 80032b4:	2200      	movs	r2, #0
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 fda4 	bl	8003e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a35      	ldr	r2, [pc, #212]	; (8003398 <HAL_TIM_PWM_Stop+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_TIM_PWM_Stop+0x36>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a34      	ldr	r2, [pc, #208]	; (800339c <HAL_TIM_PWM_Stop+0xf8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIM_PWM_Stop+0x36>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a32      	ldr	r2, [pc, #200]	; (80033a0 <HAL_TIM_PWM_Stop+0xfc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_Stop+0x3a>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <HAL_TIM_PWM_Stop+0x3c>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4a2e      	ldr	r2, [pc, #184]	; (80033a4 <HAL_TIM_PWM_Stop+0x100>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	d10d      	bne.n	800330c <HAL_TIM_PWM_Stop+0x68>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6a1b      	ldr	r3, [r3, #32]
 80032f6:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <HAL_TIM_PWM_Stop+0x104>)
 80032f8:	4013      	ands	r3, r2
 80032fa:	d107      	bne.n	800330c <HAL_TIM_PWM_Stop+0x68>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4929      	ldr	r1, [pc, #164]	; (80033ac <HAL_TIM_PWM_Stop+0x108>)
 8003308:	400a      	ands	r2, r1
 800330a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_TIM_PWM_Stop+0x100>)
 8003314:	4013      	ands	r3, r2
 8003316:	d10d      	bne.n	8003334 <HAL_TIM_PWM_Stop+0x90>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <HAL_TIM_PWM_Stop+0x104>)
 8003320:	4013      	ands	r3, r2
 8003322:	d107      	bne.n	8003334 <HAL_TIM_PWM_Stop+0x90>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2101      	movs	r1, #1
 8003330:	438a      	bics	r2, r1
 8003332:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_TIM_PWM_Stop+0xa0>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223e      	movs	r2, #62	; 0x3e
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
 8003342:	e023      	b.n	800338c <HAL_TIM_PWM_Stop+0xe8>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d104      	bne.n	8003354 <HAL_TIM_PWM_Stop+0xb0>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	2101      	movs	r1, #1
 8003350:	5499      	strb	r1, [r3, r2]
 8003352:	e01b      	b.n	800338c <HAL_TIM_PWM_Stop+0xe8>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d104      	bne.n	8003364 <HAL_TIM_PWM_Stop+0xc0>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2240      	movs	r2, #64	; 0x40
 800335e:	2101      	movs	r1, #1
 8003360:	5499      	strb	r1, [r3, r2]
 8003362:	e013      	b.n	800338c <HAL_TIM_PWM_Stop+0xe8>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d104      	bne.n	8003374 <HAL_TIM_PWM_Stop+0xd0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2241      	movs	r2, #65	; 0x41
 800336e:	2101      	movs	r1, #1
 8003370:	5499      	strb	r1, [r3, r2]
 8003372:	e00b      	b.n	800338c <HAL_TIM_PWM_Stop+0xe8>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b10      	cmp	r3, #16
 8003378:	d104      	bne.n	8003384 <HAL_TIM_PWM_Stop+0xe0>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2242      	movs	r2, #66	; 0x42
 800337e:	2101      	movs	r1, #1
 8003380:	5499      	strb	r1, [r3, r2]
 8003382:	e003      	b.n	800338c <HAL_TIM_PWM_Stop+0xe8>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2243      	movs	r2, #67	; 0x43
 8003388:	2101      	movs	r1, #1
 800338a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b002      	add	sp, #8
 8003394:	bd80      	pop	{r7, pc}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40014400 	.word	0x40014400
 80033a0:	40014800 	.word	0x40014800
 80033a4:	00001111 	.word	0x00001111
 80033a8:	00000444 	.word	0x00000444
 80033ac:	ffff7fff 	.word	0xffff7fff

080033b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2202      	movs	r2, #2
 80033cc:	4013      	ands	r3, r2
 80033ce:	d021      	beq.n	8003414 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2202      	movs	r2, #2
 80033d4:	4013      	ands	r3, r2
 80033d6:	d01d      	beq.n	8003414 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2203      	movs	r2, #3
 80033de:	4252      	negs	r2, r2
 80033e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2203      	movs	r2, #3
 80033f0:	4013      	ands	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 f9e4 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e007      	b.n	800340e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f9d7 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f000 f9e3 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	2204      	movs	r2, #4
 8003418:	4013      	ands	r3, r2
 800341a:	d022      	beq.n	8003462 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2204      	movs	r2, #4
 8003420:	4013      	ands	r3, r2
 8003422:	d01e      	beq.n	8003462 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2205      	movs	r2, #5
 800342a:	4252      	negs	r2, r2
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	23c0      	movs	r3, #192	; 0xc0
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4013      	ands	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	0018      	movs	r0, r3
 8003446:	f000 f9bd 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 800344a:	e007      	b.n	800345c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	0018      	movs	r0, r3
 8003450:	f000 f9b0 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f9bc 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2208      	movs	r2, #8
 8003466:	4013      	ands	r3, r2
 8003468:	d021      	beq.n	80034ae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2208      	movs	r2, #8
 800346e:	4013      	ands	r3, r2
 8003470:	d01d      	beq.n	80034ae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2209      	movs	r2, #9
 8003478:	4252      	negs	r2, r2
 800347a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2204      	movs	r2, #4
 8003480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	2203      	movs	r2, #3
 800348a:	4013      	ands	r3, r2
 800348c:	d004      	beq.n	8003498 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f997 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 8003496:	e007      	b.n	80034a8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	0018      	movs	r0, r3
 800349c:	f000 f98a 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 f996 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2210      	movs	r2, #16
 80034b2:	4013      	ands	r3, r2
 80034b4:	d022      	beq.n	80034fc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2210      	movs	r2, #16
 80034ba:	4013      	ands	r3, r2
 80034bc:	d01e      	beq.n	80034fc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2211      	movs	r2, #17
 80034c4:	4252      	negs	r2, r2
 80034c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2208      	movs	r2, #8
 80034cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	23c0      	movs	r3, #192	; 0xc0
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f970 	bl	80037c4 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e007      	b.n	80034f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f963 	bl	80037b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 f96f 	bl	80037d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2201      	movs	r2, #1
 8003500:	4013      	ands	r3, r2
 8003502:	d00c      	beq.n	800351e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	4013      	ands	r3, r2
 800350a:	d008      	beq.n	800351e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2202      	movs	r2, #2
 8003512:	4252      	negs	r2, r2
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0018      	movs	r0, r3
 800351a:	f7fc ffbd 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	4013      	ands	r3, r2
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	4013      	ands	r3, r2
 800352c:	d008      	beq.n	8003540 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2281      	movs	r2, #129	; 0x81
 8003534:	4252      	negs	r2, r2
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	0018      	movs	r0, r3
 800353c:	f000 fcf0 	bl	8003f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	2380      	movs	r3, #128	; 0x80
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4013      	ands	r3, r2
 8003548:	d00b      	beq.n	8003562 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2280      	movs	r2, #128	; 0x80
 800354e:	4013      	ands	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIM_IRQHandler+0x200>)
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fce7 	bl	8003f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2240      	movs	r2, #64	; 0x40
 8003566:	4013      	ands	r3, r2
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	4013      	ands	r3, r2
 8003570:	d008      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2241      	movs	r2, #65	; 0x41
 8003578:	4252      	negs	r2, r2
 800357a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	0018      	movs	r0, r3
 8003580:	f000 f930 	bl	80037e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2220      	movs	r2, #32
 8003588:	4013      	ands	r3, r2
 800358a:	d00c      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d008      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	4252      	negs	r2, r2
 800359c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fcb5 	bl	8003f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	46bd      	mov	sp, r7
 80035aa:	b004      	add	sp, #16
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	46c0      	nop			; (mov r8, r8)
 80035b0:	fffffeff 	.word	0xfffffeff

080035b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2317      	movs	r3, #23
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	223c      	movs	r2, #60	; 0x3c
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0e5      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	223c      	movs	r2, #60	; 0x3c
 80035da:	2101      	movs	r1, #1
 80035dc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b14      	cmp	r3, #20
 80035e2:	d900      	bls.n	80035e6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80035e4:	e0d1      	b.n	800378a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	009a      	lsls	r2, r3, #2
 80035ea:	4b70      	ldr	r3, [pc, #448]	; (80037ac <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80035ec:	18d3      	adds	r3, r2, r3
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	0011      	movs	r1, r2
 80035fa:	0018      	movs	r0, r3
 80035fc:	f000 f966 	bl	80038cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699a      	ldr	r2, [r3, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2108      	movs	r1, #8
 800360c:	430a      	orrs	r2, r1
 800360e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2104      	movs	r1, #4
 800361c:	438a      	bics	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6999      	ldr	r1, [r3, #24]
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	619a      	str	r2, [r3, #24]
      break;
 8003632:	e0af      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	0011      	movs	r1, r2
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f9c5 	bl	80039cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699a      	ldr	r2, [r3, #24]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0109      	lsls	r1, r1, #4
 8003650:	430a      	orrs	r2, r1
 8003652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4954      	ldr	r1, [pc, #336]	; (80037b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003660:	400a      	ands	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	619a      	str	r2, [r3, #24]
      break;
 8003678:	e08c      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	0011      	movs	r1, r2
 8003682:	0018      	movs	r0, r3
 8003684:	f000 fa20 	bl	8003ac8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	69da      	ldr	r2, [r3, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2108      	movs	r1, #8
 8003694:	430a      	orrs	r2, r1
 8003696:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69da      	ldr	r2, [r3, #28]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2104      	movs	r1, #4
 80036a4:	438a      	bics	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	69d9      	ldr	r1, [r3, #28]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	61da      	str	r2, [r3, #28]
      break;
 80036ba:	e06b      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f000 fa81 	bl	8003bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2180      	movs	r1, #128	; 0x80
 80036d6:	0109      	lsls	r1, r1, #4
 80036d8:	430a      	orrs	r2, r1
 80036da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4932      	ldr	r1, [pc, #200]	; (80037b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80036e8:	400a      	ands	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69d9      	ldr	r1, [r3, #28]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	021a      	lsls	r2, r3, #8
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	61da      	str	r2, [r3, #28]
      break;
 8003700:	e048      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	0011      	movs	r1, r2
 800370a:	0018      	movs	r0, r3
 800370c:	f000 fac2 	bl	8003c94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2108      	movs	r1, #8
 800371c:	430a      	orrs	r2, r1
 800371e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2104      	movs	r1, #4
 800372c:	438a      	bics	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691a      	ldr	r2, [r3, #16]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003742:	e027      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	0011      	movs	r1, r2
 800374c:	0018      	movs	r0, r3
 800374e:	f000 fafb 	bl	8003d48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2180      	movs	r1, #128	; 0x80
 800375e:	0109      	lsls	r1, r1, #4
 8003760:	430a      	orrs	r2, r1
 8003762:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4910      	ldr	r1, [pc, #64]	; (80037b0 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003770:	400a      	ands	r2, r1
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	021a      	lsls	r2, r3, #8
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003788:	e004      	b.n	8003794 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800378a:	2317      	movs	r3, #23
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
      break;
 8003792:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	223c      	movs	r2, #60	; 0x3c
 8003798:	2100      	movs	r1, #0
 800379a:	5499      	strb	r1, [r3, r2]

  return status;
 800379c:	2317      	movs	r3, #23
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
}
 80037a2:	0018      	movs	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	b006      	add	sp, #24
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	080052b4 	.word	0x080052b4
 80037b0:	fffffbff 	.word	0xfffffbff

080037b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2b      	ldr	r2, [pc, #172]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x20>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a2a      	ldr	r2, [pc, #168]	; (80038b8 <TIM_Base_SetConfig+0xc4>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2270      	movs	r2, #112	; 0x70
 8003818:	4393      	bics	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a22      	ldr	r2, [pc, #136]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <TIM_Base_SetConfig+0xc4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a20      	ldr	r2, [pc, #128]	; (80038bc <TIM_Base_SetConfig+0xc8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1f      	ldr	r2, [pc, #124]	; (80038c0 <TIM_Base_SetConfig+0xcc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_Base_SetConfig+0x5a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <TIM_Base_SetConfig+0xd0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d108      	bne.n	8003860 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <TIM_Base_SetConfig+0xd4>)
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	4393      	bics	r3, r2
 8003866:	001a      	movs	r2, r3
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <TIM_Base_SetConfig+0xc0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <TIM_Base_SetConfig+0xaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a0b      	ldr	r2, [pc, #44]	; (80038c0 <TIM_Base_SetConfig+0xcc>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d003      	beq.n	800389e <TIM_Base_SetConfig+0xaa>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <TIM_Base_SetConfig+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d103      	bne.n	80038a6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	615a      	str	r2, [r3, #20]
}
 80038ac:	46c0      	nop			; (mov r8, r8)
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b004      	add	sp, #16
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40002000 	.word	0x40002000
 80038c0:	40014400 	.word	0x40014400
 80038c4:	40014800 	.word	0x40014800
 80038c8:	fffffcff 	.word	0xfffffcff

080038cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	2201      	movs	r2, #1
 80038e2:	4393      	bics	r3, r2
 80038e4:	001a      	movs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <TIM_OC1_SetConfig+0xe8>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2203      	movs	r2, #3
 8003902:	4393      	bics	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2202      	movs	r2, #2
 8003914:	4393      	bics	r3, r2
 8003916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <TIM_OC1_SetConfig+0xec>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_OC1_SetConfig+0x6e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a23      	ldr	r2, [pc, #140]	; (80039bc <TIM_OC1_SetConfig+0xf0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_OC1_SetConfig+0x6e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <TIM_OC1_SetConfig+0xf4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10c      	bne.n	8003954 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2208      	movs	r2, #8
 800393e:	4393      	bics	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2204      	movs	r2, #4
 8003950:	4393      	bics	r3, r2
 8003952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a18      	ldr	r2, [pc, #96]	; (80039b8 <TIM_OC1_SetConfig+0xec>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_OC1_SetConfig+0xa0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_OC1_SetConfig+0xf0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_OC1_SetConfig+0xa0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <TIM_OC1_SetConfig+0xf4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d111      	bne.n	8003990 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <TIM_OC1_SetConfig+0xf8>)
 8003970:	4013      	ands	r3, r2
 8003972:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC1_SetConfig+0xfc>)
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	621a      	str	r2, [r3, #32]
}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b006      	add	sp, #24
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	fffeff8f 	.word	0xfffeff8f
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800
 80039c4:	fffffeff 	.word	0xfffffeff
 80039c8:	fffffdff 	.word	0xfffffdff

080039cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	2210      	movs	r2, #16
 80039e2:	4393      	bics	r3, r2
 80039e4:	001a      	movs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4a2c      	ldr	r2, [pc, #176]	; (8003aac <TIM_OC2_SetConfig+0xe0>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <TIM_OC2_SetConfig+0xe4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2220      	movs	r2, #32
 8003a16:	4393      	bics	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	697a      	ldr	r2, [r7, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <TIM_OC2_SetConfig+0xe8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10d      	bne.n	8003a4a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	4393      	bics	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	011b      	lsls	r3, r3, #4
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2240      	movs	r2, #64	; 0x40
 8003a46:	4393      	bics	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <TIM_OC2_SetConfig+0xe8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d007      	beq.n	8003a62 <TIM_OC2_SetConfig+0x96>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <TIM_OC2_SetConfig+0xec>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d003      	beq.n	8003a62 <TIM_OC2_SetConfig+0x96>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a17      	ldr	r2, [pc, #92]	; (8003abc <TIM_OC2_SetConfig+0xf0>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d113      	bne.n	8003a8a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4a16      	ldr	r2, [pc, #88]	; (8003ac0 <TIM_OC2_SetConfig+0xf4>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4a15      	ldr	r2, [pc, #84]	; (8003ac4 <TIM_OC2_SetConfig+0xf8>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b006      	add	sp, #24
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	feff8fff 	.word	0xfeff8fff
 8003ab0:	fffffcff 	.word	0xfffffcff
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40014400 	.word	0x40014400
 8003abc:	40014800 	.word	0x40014800
 8003ac0:	fffffbff 	.word	0xfffffbff
 8003ac4:	fffff7ff 	.word	0xfffff7ff

08003ac8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4a31      	ldr	r2, [pc, #196]	; (8003ba4 <TIM_OC3_SetConfig+0xdc>)
 8003ade:	401a      	ands	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a2d      	ldr	r2, [pc, #180]	; (8003ba8 <TIM_OC3_SetConfig+0xe0>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2203      	movs	r2, #3
 8003afc:	4393      	bics	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4a27      	ldr	r2, [pc, #156]	; (8003bac <TIM_OC3_SetConfig+0xe4>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <TIM_OC3_SetConfig+0xe8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10d      	bne.n	8003b42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <TIM_OC3_SetConfig+0xec>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	021b      	lsls	r3, r3, #8
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4a1e      	ldr	r2, [pc, #120]	; (8003bb8 <TIM_OC3_SetConfig+0xf0>)
 8003b3e:	4013      	ands	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1a      	ldr	r2, [pc, #104]	; (8003bb0 <TIM_OC3_SetConfig+0xe8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d007      	beq.n	8003b5a <TIM_OC3_SetConfig+0x92>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <TIM_OC3_SetConfig+0xf4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d003      	beq.n	8003b5a <TIM_OC3_SetConfig+0x92>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1a      	ldr	r2, [pc, #104]	; (8003bc0 <TIM_OC3_SetConfig+0xf8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d113      	bne.n	8003b82 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4a19      	ldr	r2, [pc, #100]	; (8003bc4 <TIM_OC3_SetConfig+0xfc>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <TIM_OC3_SetConfig+0x100>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	621a      	str	r2, [r3, #32]
}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b006      	add	sp, #24
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	fffffeff 	.word	0xfffffeff
 8003ba8:	fffeff8f 	.word	0xfffeff8f
 8003bac:	fffffdff 	.word	0xfffffdff
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	fffff7ff 	.word	0xfffff7ff
 8003bb8:	fffffbff 	.word	0xfffffbff
 8003bbc:	40014400 	.word	0x40014400
 8003bc0:	40014800 	.word	0x40014800
 8003bc4:	ffffefff 	.word	0xffffefff
 8003bc8:	ffffdfff 	.word	0xffffdfff

08003bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	4a24      	ldr	r2, [pc, #144]	; (8003c74 <TIM_OC4_SetConfig+0xa8>)
 8003be2:	401a      	ands	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <TIM_OC4_SetConfig+0xac>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	; (8003c7c <TIM_OC4_SetConfig+0xb0>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	021b      	lsls	r3, r3, #8
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	4a1b      	ldr	r2, [pc, #108]	; (8003c80 <TIM_OC4_SetConfig+0xb4>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a17      	ldr	r2, [pc, #92]	; (8003c84 <TIM_OC4_SetConfig+0xb8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d007      	beq.n	8003c3c <TIM_OC4_SetConfig+0x70>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a16      	ldr	r2, [pc, #88]	; (8003c88 <TIM_OC4_SetConfig+0xbc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d003      	beq.n	8003c3c <TIM_OC4_SetConfig+0x70>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a15      	ldr	r2, [pc, #84]	; (8003c8c <TIM_OC4_SetConfig+0xc0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d109      	bne.n	8003c50 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4a14      	ldr	r2, [pc, #80]	; (8003c90 <TIM_OC4_SetConfig+0xc4>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	46c0      	nop			; (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b006      	add	sp, #24
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	ffffefff 	.word	0xffffefff
 8003c78:	feff8fff 	.word	0xfeff8fff
 8003c7c:	fffffcff 	.word	0xfffffcff
 8003c80:	ffffdfff 	.word	0xffffdfff
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800
 8003c90:	ffffbfff 	.word	0xffffbfff

08003c94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	4a21      	ldr	r2, [pc, #132]	; (8003d30 <TIM_OC5_SetConfig+0x9c>)
 8003caa:	401a      	ands	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	; (8003d34 <TIM_OC5_SetConfig+0xa0>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <TIM_OC5_SetConfig+0xa4>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <TIM_OC5_SetConfig+0xa8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC5_SetConfig+0x66>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <TIM_OC5_SetConfig+0xac>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC5_SetConfig+0x66>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a13      	ldr	r2, [pc, #76]	; (8003d44 <TIM_OC5_SetConfig+0xb0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d109      	bne.n	8003d0e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <TIM_OC5_SetConfig+0x9c>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	621a      	str	r2, [r3, #32]
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b006      	add	sp, #24
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	fffeffff 	.word	0xfffeffff
 8003d34:	fffeff8f 	.word	0xfffeff8f
 8003d38:	fffdffff 	.word	0xfffdffff
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800

08003d48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <TIM_OC6_SetConfig+0xa0>)
 8003d5e:	401a      	ands	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	4a1e      	ldr	r2, [pc, #120]	; (8003dec <TIM_OC6_SetConfig+0xa4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	021b      	lsls	r3, r3, #8
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <TIM_OC6_SetConfig+0xa8>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	051b      	lsls	r3, r3, #20
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC6_SetConfig+0xac>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC6_SetConfig+0x68>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <TIM_OC6_SetConfig+0xb0>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC6_SetConfig+0x68>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <TIM_OC6_SetConfig+0xb4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4a13      	ldr	r2, [pc, #76]	; (8003e00 <TIM_OC6_SetConfig+0xb8>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	621a      	str	r2, [r3, #32]
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b006      	add	sp, #24
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	ffefffff 	.word	0xffefffff
 8003dec:	feff8fff 	.word	0xfeff8fff
 8003df0:	ffdfffff 	.word	0xffdfffff
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014400 	.word	0x40014400
 8003dfc:	40014800 	.word	0x40014800
 8003e00:	fffbffff 	.word	0xfffbffff

08003e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	221f      	movs	r2, #31
 8003e14:	4013      	ands	r3, r2
 8003e16:	2201      	movs	r2, #1
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	0013      	movs	r3, r2
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	43d2      	mvns	r2, r2
 8003e26:	401a      	ands	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1a      	ldr	r2, [r3, #32]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	211f      	movs	r1, #31
 8003e34:	400b      	ands	r3, r1
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4099      	lsls	r1, r3
 8003e3a:	000b      	movs	r3, r1
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b006      	add	sp, #24
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	223c      	movs	r2, #60	; 0x3c
 8003e5a:	5c9b      	ldrb	r3, [r3, r2]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d101      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e60:	2302      	movs	r3, #2
 8003e62:	e04a      	b.n	8003efa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223c      	movs	r2, #60	; 0x3c
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223d      	movs	r2, #61	; 0x3d
 8003e70:	2102      	movs	r1, #2
 8003e72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1e      	ldr	r2, [pc, #120]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003e92:	4013      	ands	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2270      	movs	r2, #112	; 0x70
 8003ea4:	4393      	bics	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	; (8003f04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a10      	ldr	r2, [pc, #64]	; (8003f0c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	223d      	movs	r2, #61	; 0x3d
 8003eec:	2101      	movs	r1, #1
 8003eee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	223c      	movs	r2, #60	; 0x3c
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	0018      	movs	r0, r3
 8003efc:	46bd      	mov	sp, r7
 8003efe:	b004      	add	sp, #16
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	40012c00 	.word	0x40012c00
 8003f08:	ff0fffff 	.word	0xff0fffff
 8003f0c:	40000400 	.word	0x40000400

08003f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f18:	46c0      	nop			; (mov r8, r8)
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	b002      	add	sp, #8
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b002      	add	sp, #8
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	b002      	add	sp, #8
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e046      	b.n	8003fe0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2288      	movs	r2, #136	; 0x88
 8003f56:	589b      	ldr	r3, [r3, r2]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2284      	movs	r2, #132	; 0x84
 8003f60:	2100      	movs	r1, #0
 8003f62:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fc ffde 	bl	8000f28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2288      	movs	r2, #136	; 0x88
 8003f70:	2124      	movs	r1, #36	; 0x24
 8003f72:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2101      	movs	r1, #1
 8003f80:	438a      	bics	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fa4e 	bl	8004430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	0018      	movs	r0, r3
 8003f98:	f000 f8cc 	bl	8004134 <UART_SetConfig>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e01c      	b.n	8003fe0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	490d      	ldr	r1, [pc, #52]	; (8003fe8 <HAL_UART_Init+0xa8>)
 8003fb2:	400a      	ands	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	212a      	movs	r1, #42	; 0x2a
 8003fc2:	438a      	bics	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fadd 	bl	8004598 <UART_CheckIdleState>
 8003fde:	0003      	movs	r3, r0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b002      	add	sp, #8
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	ffffb7ff 	.word	0xffffb7ff

08003fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	; 0x28
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	1dbb      	adds	r3, r7, #6
 8003ffa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2288      	movs	r2, #136	; 0x88
 8004000:	589b      	ldr	r3, [r3, r2]
 8004002:	2b20      	cmp	r3, #32
 8004004:	d000      	beq.n	8004008 <HAL_UART_Transmit+0x1c>
 8004006:	e090      	b.n	800412a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_UART_Transmit+0x2a>
 800400e:	1dbb      	adds	r3, r7, #6
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e088      	b.n	800412c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	015b      	lsls	r3, r3, #5
 8004022:	429a      	cmp	r2, r3
 8004024:	d109      	bne.n	800403a <HAL_UART_Transmit+0x4e>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d105      	bne.n	800403a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2201      	movs	r2, #1
 8004032:	4013      	ands	r3, r2
 8004034:	d001      	beq.n	800403a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e078      	b.n	800412c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2290      	movs	r2, #144	; 0x90
 800403e:	2100      	movs	r1, #0
 8004040:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2288      	movs	r2, #136	; 0x88
 8004046:	2121      	movs	r1, #33	; 0x21
 8004048:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800404a:	f7fd f8d7 	bl	80011fc <HAL_GetTick>
 800404e:	0003      	movs	r3, r0
 8004050:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1dba      	adds	r2, r7, #6
 8004056:	2154      	movs	r1, #84	; 0x54
 8004058:	8812      	ldrh	r2, [r2, #0]
 800405a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1dba      	adds	r2, r7, #6
 8004060:	2156      	movs	r1, #86	; 0x56
 8004062:	8812      	ldrh	r2, [r2, #0]
 8004064:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	2380      	movs	r3, #128	; 0x80
 800406c:	015b      	lsls	r3, r3, #5
 800406e:	429a      	cmp	r2, r3
 8004070:	d108      	bne.n	8004084 <HAL_UART_Transmit+0x98>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d104      	bne.n	8004084 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e003      	b.n	800408c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800408c:	e030      	b.n	80040f0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	0013      	movs	r3, r2
 8004098:	2200      	movs	r2, #0
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	f000 fb26 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 80040a0:	1e03      	subs	r3, r0, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2288      	movs	r2, #136	; 0x88
 80040a8:	2120      	movs	r1, #32
 80040aa:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e03d      	b.n	800412c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10b      	bne.n	80040ce <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	001a      	movs	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	05d2      	lsls	r2, r2, #23
 80040c2:	0dd2      	lsrs	r2, r2, #23
 80040c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	3302      	adds	r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e007      	b.n	80040de <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3301      	adds	r3, #1
 80040dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2256      	movs	r2, #86	; 0x56
 80040e2:	5a9b      	ldrh	r3, [r3, r2]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	3b01      	subs	r3, #1
 80040e8:	b299      	uxth	r1, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2256      	movs	r2, #86	; 0x56
 80040ee:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2256      	movs	r2, #86	; 0x56
 80040f4:	5a9b      	ldrh	r3, [r3, r2]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1c8      	bne.n	800408e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	0013      	movs	r3, r2
 8004106:	2200      	movs	r2, #0
 8004108:	2140      	movs	r1, #64	; 0x40
 800410a:	f000 faef 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d005      	beq.n	800411e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2288      	movs	r2, #136	; 0x88
 8004116:	2120      	movs	r1, #32
 8004118:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e006      	b.n	800412c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2288      	movs	r2, #136	; 0x88
 8004122:	2120      	movs	r1, #32
 8004124:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e000      	b.n	800412c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800412a:	2302      	movs	r3, #2
  }
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b008      	add	sp, #32
 8004132:	bd80      	pop	{r7, pc}

08004134 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800413c:	231e      	movs	r3, #30
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2200      	movs	r2, #0
 8004142:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4aab      	ldr	r2, [pc, #684]	; (8004410 <UART_SetConfig+0x2dc>)
 8004164:	4013      	ands	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4aa6      	ldr	r2, [pc, #664]	; (8004414 <UART_SetConfig+0x2e0>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	4a9d      	ldr	r2, [pc, #628]	; (8004418 <UART_SetConfig+0x2e4>)
 80041a2:	4013      	ands	r3, r2
 80041a4:	0019      	movs	r1, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	220f      	movs	r2, #15
 80041b8:	4393      	bics	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a93      	ldr	r2, [pc, #588]	; (800441c <UART_SetConfig+0x2e8>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d127      	bne.n	8004222 <UART_SetConfig+0xee>
 80041d2:	4b93      	ldr	r3, [pc, #588]	; (8004420 <UART_SetConfig+0x2ec>)
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	2203      	movs	r2, #3
 80041d8:	4013      	ands	r3, r2
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d017      	beq.n	800420e <UART_SetConfig+0xda>
 80041de:	d81b      	bhi.n	8004218 <UART_SetConfig+0xe4>
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d00a      	beq.n	80041fa <UART_SetConfig+0xc6>
 80041e4:	d818      	bhi.n	8004218 <UART_SetConfig+0xe4>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <UART_SetConfig+0xbc>
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d00a      	beq.n	8004204 <UART_SetConfig+0xd0>
 80041ee:	e013      	b.n	8004218 <UART_SetConfig+0xe4>
 80041f0:	231f      	movs	r3, #31
 80041f2:	18fb      	adds	r3, r7, r3
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e021      	b.n	800423e <UART_SetConfig+0x10a>
 80041fa:	231f      	movs	r3, #31
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	2202      	movs	r2, #2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	e01c      	b.n	800423e <UART_SetConfig+0x10a>
 8004204:	231f      	movs	r3, #31
 8004206:	18fb      	adds	r3, r7, r3
 8004208:	2204      	movs	r2, #4
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	e017      	b.n	800423e <UART_SetConfig+0x10a>
 800420e:	231f      	movs	r3, #31
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	2208      	movs	r2, #8
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	e012      	b.n	800423e <UART_SetConfig+0x10a>
 8004218:	231f      	movs	r3, #31
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2210      	movs	r2, #16
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x10a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7f      	ldr	r2, [pc, #508]	; (8004424 <UART_SetConfig+0x2f0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d104      	bne.n	8004236 <UART_SetConfig+0x102>
 800422c:	231f      	movs	r3, #31
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2200      	movs	r2, #0
 8004232:	701a      	strb	r2, [r3, #0]
 8004234:	e003      	b.n	800423e <UART_SetConfig+0x10a>
 8004236:	231f      	movs	r3, #31
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	2210      	movs	r2, #16
 800423c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	429a      	cmp	r2, r3
 8004248:	d000      	beq.n	800424c <UART_SetConfig+0x118>
 800424a:	e06f      	b.n	800432c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800424c:	231f      	movs	r3, #31
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	2b08      	cmp	r3, #8
 8004254:	d01f      	beq.n	8004296 <UART_SetConfig+0x162>
 8004256:	dc22      	bgt.n	800429e <UART_SetConfig+0x16a>
 8004258:	2b04      	cmp	r3, #4
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x158>
 800425c:	dc1f      	bgt.n	800429e <UART_SetConfig+0x16a>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x134>
 8004262:	2b02      	cmp	r3, #2
 8004264:	d005      	beq.n	8004272 <UART_SetConfig+0x13e>
 8004266:	e01a      	b.n	800429e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004268:	f7fe fd40 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 800426c:	0003      	movs	r3, r0
 800426e:	61bb      	str	r3, [r7, #24]
        break;
 8004270:	e01c      	b.n	80042ac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004272:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <UART_SetConfig+0x2ec>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	095b      	lsrs	r3, r3, #5
 8004278:	2207      	movs	r2, #7
 800427a:	4013      	ands	r3, r2
 800427c:	3301      	adds	r3, #1
 800427e:	0019      	movs	r1, r3
 8004280:	4869      	ldr	r0, [pc, #420]	; (8004428 <UART_SetConfig+0x2f4>)
 8004282:	f7fb ff53 	bl	800012c <__udivsi3>
 8004286:	0003      	movs	r3, r0
 8004288:	61bb      	str	r3, [r7, #24]
        break;
 800428a:	e00f      	b.n	80042ac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800428c:	f7fe fce4 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004290:	0003      	movs	r3, r0
 8004292:	61bb      	str	r3, [r7, #24]
        break;
 8004294:	e00a      	b.n	80042ac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	61bb      	str	r3, [r7, #24]
        break;
 800429c:	e006      	b.n	80042ac <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042a2:	231e      	movs	r3, #30
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
        break;
 80042aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d100      	bne.n	80042b4 <UART_SetConfig+0x180>
 80042b2:	e097      	b.n	80043e4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042b8:	4b5c      	ldr	r3, [pc, #368]	; (800442c <UART_SetConfig+0x2f8>)
 80042ba:	0052      	lsls	r2, r2, #1
 80042bc:	5ad3      	ldrh	r3, [r2, r3]
 80042be:	0019      	movs	r1, r3
 80042c0:	69b8      	ldr	r0, [r7, #24]
 80042c2:	f7fb ff33 	bl	800012c <__udivsi3>
 80042c6:	0003      	movs	r3, r0
 80042c8:	005a      	lsls	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	18d2      	adds	r2, r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	0019      	movs	r1, r3
 80042d8:	0010      	movs	r0, r2
 80042da:	f7fb ff27 	bl	800012c <__udivsi3>
 80042de:	0003      	movs	r3, r0
 80042e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b0f      	cmp	r3, #15
 80042e6:	d91c      	bls.n	8004322 <UART_SetConfig+0x1ee>
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	2380      	movs	r3, #128	; 0x80
 80042ec:	025b      	lsls	r3, r3, #9
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d217      	bcs.n	8004322 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	200e      	movs	r0, #14
 80042f8:	183b      	adds	r3, r7, r0
 80042fa:	210f      	movs	r1, #15
 80042fc:	438a      	bics	r2, r1
 80042fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	2207      	movs	r2, #7
 8004308:	4013      	ands	r3, r2
 800430a:	b299      	uxth	r1, r3
 800430c:	183b      	adds	r3, r7, r0
 800430e:	183a      	adds	r2, r7, r0
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	430a      	orrs	r2, r1
 8004314:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	183a      	adds	r2, r7, r0
 800431c:	8812      	ldrh	r2, [r2, #0]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	e060      	b.n	80043e4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004322:	231e      	movs	r3, #30
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	2201      	movs	r2, #1
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	e05b      	b.n	80043e4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800432c:	231f      	movs	r3, #31
 800432e:	18fb      	adds	r3, r7, r3
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b08      	cmp	r3, #8
 8004334:	d01f      	beq.n	8004376 <UART_SetConfig+0x242>
 8004336:	dc22      	bgt.n	800437e <UART_SetConfig+0x24a>
 8004338:	2b04      	cmp	r3, #4
 800433a:	d017      	beq.n	800436c <UART_SetConfig+0x238>
 800433c:	dc1f      	bgt.n	800437e <UART_SetConfig+0x24a>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <UART_SetConfig+0x214>
 8004342:	2b02      	cmp	r3, #2
 8004344:	d005      	beq.n	8004352 <UART_SetConfig+0x21e>
 8004346:	e01a      	b.n	800437e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004348:	f7fe fcd0 	bl	8002cec <HAL_RCC_GetPCLK1Freq>
 800434c:	0003      	movs	r3, r0
 800434e:	61bb      	str	r3, [r7, #24]
        break;
 8004350:	e01c      	b.n	800438c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <UART_SetConfig+0x2ec>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2207      	movs	r2, #7
 800435a:	4013      	ands	r3, r2
 800435c:	3301      	adds	r3, #1
 800435e:	0019      	movs	r1, r3
 8004360:	4831      	ldr	r0, [pc, #196]	; (8004428 <UART_SetConfig+0x2f4>)
 8004362:	f7fb fee3 	bl	800012c <__udivsi3>
 8004366:	0003      	movs	r3, r0
 8004368:	61bb      	str	r3, [r7, #24]
        break;
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800436c:	f7fe fc74 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8004370:	0003      	movs	r3, r0
 8004372:	61bb      	str	r3, [r7, #24]
        break;
 8004374:	e00a      	b.n	800438c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004376:	2380      	movs	r3, #128	; 0x80
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	61bb      	str	r3, [r7, #24]
        break;
 800437c:	e006      	b.n	800438c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004382:	231e      	movs	r3, #30
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	2201      	movs	r2, #1
 8004388:	701a      	strb	r2, [r3, #0]
        break;
 800438a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d028      	beq.n	80043e4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004396:	4b25      	ldr	r3, [pc, #148]	; (800442c <UART_SetConfig+0x2f8>)
 8004398:	0052      	lsls	r2, r2, #1
 800439a:	5ad3      	ldrh	r3, [r2, r3]
 800439c:	0019      	movs	r1, r3
 800439e:	69b8      	ldr	r0, [r7, #24]
 80043a0:	f7fb fec4 	bl	800012c <__udivsi3>
 80043a4:	0003      	movs	r3, r0
 80043a6:	001a      	movs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	18d2      	adds	r2, r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0019      	movs	r1, r3
 80043b6:	0010      	movs	r0, r2
 80043b8:	f7fb feb8 	bl	800012c <__udivsi3>
 80043bc:	0003      	movs	r3, r0
 80043be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b0f      	cmp	r3, #15
 80043c4:	d90a      	bls.n	80043dc <UART_SetConfig+0x2a8>
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	2380      	movs	r3, #128	; 0x80
 80043ca:	025b      	lsls	r3, r3, #9
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d205      	bcs.n	80043dc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e003      	b.n	80043e4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80043dc:	231e      	movs	r3, #30
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	226a      	movs	r2, #106	; 0x6a
 80043e8:	2101      	movs	r1, #1
 80043ea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2268      	movs	r2, #104	; 0x68
 80043f0:	2101      	movs	r1, #1
 80043f2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004400:	231e      	movs	r3, #30
 8004402:	18fb      	adds	r3, r7, r3
 8004404:	781b      	ldrb	r3, [r3, #0]
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b008      	add	sp, #32
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	cfff69f3 	.word	0xcfff69f3
 8004414:	ffffcfff 	.word	0xffffcfff
 8004418:	11fff4ff 	.word	0x11fff4ff
 800441c:	40013800 	.word	0x40013800
 8004420:	40021000 	.word	0x40021000
 8004424:	40004400 	.word	0x40004400
 8004428:	02dc6c00 	.word	0x02dc6c00
 800442c:	08005308 	.word	0x08005308

08004430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	2208      	movs	r2, #8
 800443e:	4013      	ands	r3, r2
 8004440:	d00b      	beq.n	800445a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a4a      	ldr	r2, [pc, #296]	; (8004574 <UART_AdvFeatureConfig+0x144>)
 800444a:	4013      	ands	r3, r2
 800444c:	0019      	movs	r1, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	2201      	movs	r2, #1
 8004460:	4013      	ands	r3, r2
 8004462:	d00b      	beq.n	800447c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	4a43      	ldr	r2, [pc, #268]	; (8004578 <UART_AdvFeatureConfig+0x148>)
 800446c:	4013      	ands	r3, r2
 800446e:	0019      	movs	r1, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	2202      	movs	r2, #2
 8004482:	4013      	ands	r3, r2
 8004484:	d00b      	beq.n	800449e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a3b      	ldr	r2, [pc, #236]	; (800457c <UART_AdvFeatureConfig+0x14c>)
 800448e:	4013      	ands	r3, r2
 8004490:	0019      	movs	r1, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	2204      	movs	r2, #4
 80044a4:	4013      	ands	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a34      	ldr	r2, [pc, #208]	; (8004580 <UART_AdvFeatureConfig+0x150>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	0019      	movs	r1, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	2210      	movs	r2, #16
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4a2c      	ldr	r2, [pc, #176]	; (8004584 <UART_AdvFeatureConfig+0x154>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	2220      	movs	r2, #32
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	4a25      	ldr	r2, [pc, #148]	; (8004588 <UART_AdvFeatureConfig+0x158>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004508:	2240      	movs	r2, #64	; 0x40
 800450a:	4013      	ands	r3, r2
 800450c:	d01d      	beq.n	800454a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a1d      	ldr	r2, [pc, #116]	; (800458c <UART_AdvFeatureConfig+0x15c>)
 8004516:	4013      	ands	r3, r2
 8004518:	0019      	movs	r1, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	035b      	lsls	r3, r3, #13
 800452e:	429a      	cmp	r2, r3
 8004530:	d10b      	bne.n	800454a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	4a15      	ldr	r2, [pc, #84]	; (8004590 <UART_AdvFeatureConfig+0x160>)
 800453a:	4013      	ands	r3, r2
 800453c:	0019      	movs	r1, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	4013      	ands	r3, r2
 8004552:	d00b      	beq.n	800456c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a0e      	ldr	r2, [pc, #56]	; (8004594 <UART_AdvFeatureConfig+0x164>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }
}
 800456c:	46c0      	nop			; (mov r8, r8)
 800456e:	46bd      	mov	sp, r7
 8004570:	b002      	add	sp, #8
 8004572:	bd80      	pop	{r7, pc}
 8004574:	ffff7fff 	.word	0xffff7fff
 8004578:	fffdffff 	.word	0xfffdffff
 800457c:	fffeffff 	.word	0xfffeffff
 8004580:	fffbffff 	.word	0xfffbffff
 8004584:	ffffefff 	.word	0xffffefff
 8004588:	ffffdfff 	.word	0xffffdfff
 800458c:	ffefffff 	.word	0xffefffff
 8004590:	ff9fffff 	.word	0xff9fffff
 8004594:	fff7ffff 	.word	0xfff7ffff

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b092      	sub	sp, #72	; 0x48
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2290      	movs	r2, #144	; 0x90
 80045a4:	2100      	movs	r1, #0
 80045a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fe28 	bl	80011fc <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2208      	movs	r2, #8
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d12d      	bne.n	800461a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c0:	2280      	movs	r2, #128	; 0x80
 80045c2:	0391      	lsls	r1, r2, #14
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	4a47      	ldr	r2, [pc, #284]	; (80046e4 <UART_CheckIdleState+0x14c>)
 80045c8:	9200      	str	r2, [sp, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f000 f88e 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 80045d0:	1e03      	subs	r3, r0, #0
 80045d2:	d022      	beq.n	800461a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045d4:	f3ef 8310 	mrs	r3, PRIMASK
 80045d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80045de:	2301      	movs	r3, #1
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e4:	f383 8810 	msr	PRIMASK, r3
}
 80045e8:	46c0      	nop			; (mov r8, r8)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2180      	movs	r1, #128	; 0x80
 80045f6:	438a      	bics	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	f383 8810 	msr	PRIMASK, r3
}
 8004604:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2288      	movs	r2, #136	; 0x88
 800460a:	2120      	movs	r1, #32
 800460c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2284      	movs	r2, #132	; 0x84
 8004612:	2100      	movs	r1, #0
 8004614:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e060      	b.n	80046dc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2204      	movs	r2, #4
 8004622:	4013      	ands	r3, r2
 8004624:	2b04      	cmp	r3, #4
 8004626:	d146      	bne.n	80046b6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	03d1      	lsls	r1, r2, #15
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <UART_CheckIdleState+0x14c>)
 8004632:	9200      	str	r2, [sp, #0]
 8004634:	2200      	movs	r2, #0
 8004636:	f000 f859 	bl	80046ec <UART_WaitOnFlagUntilTimeout>
 800463a:	1e03      	subs	r3, r0, #0
 800463c:	d03b      	beq.n	80046b6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	60fb      	str	r3, [r7, #12]
  return(result);
 8004644:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
 8004648:	2301      	movs	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4922      	ldr	r1, [pc, #136]	; (80046e8 <UART_CheckIdleState+0x150>)
 8004660:	400a      	ands	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004670:	f3ef 8310 	mrs	r3, PRIMASK
 8004674:	61bb      	str	r3, [r7, #24]
  return(result);
 8004676:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004678:	633b      	str	r3, [r7, #48]	; 0x30
 800467a:	2301      	movs	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	f383 8810 	msr	PRIMASK, r3
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2101      	movs	r1, #1
 8004692:	438a      	bics	r2, r1
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	f383 8810 	msr	PRIMASK, r3
}
 80046a0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	228c      	movs	r2, #140	; 0x8c
 80046a6:	2120      	movs	r1, #32
 80046a8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2284      	movs	r2, #132	; 0x84
 80046ae:	2100      	movs	r1, #0
 80046b0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e012      	b.n	80046dc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2288      	movs	r2, #136	; 0x88
 80046ba:	2120      	movs	r1, #32
 80046bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	228c      	movs	r2, #140	; 0x8c
 80046c2:	2120      	movs	r1, #32
 80046c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2284      	movs	r2, #132	; 0x84
 80046d6:	2100      	movs	r1, #0
 80046d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b010      	add	sp, #64	; 0x40
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	01ffffff 	.word	0x01ffffff
 80046e8:	fffffedf 	.word	0xfffffedf

080046ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	1dfb      	adds	r3, r7, #7
 80046fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fc:	e04b      	b.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	3301      	adds	r3, #1
 8004702:	d048      	beq.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7fc fd7a 	bl	80011fc <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e04b      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2204      	movs	r2, #4
 8004726:	4013      	ands	r3, r2
 8004728:	d035      	beq.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2208      	movs	r2, #8
 8004732:	4013      	ands	r3, r2
 8004734:	2b08      	cmp	r3, #8
 8004736:	d111      	bne.n	800475c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2208      	movs	r2, #8
 800473e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 f83c 	bl	80047c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2290      	movs	r2, #144	; 0x90
 800474c:	2108      	movs	r1, #8
 800474e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2284      	movs	r2, #132	; 0x84
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e02c      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	69da      	ldr	r2, [r3, #28]
 8004762:	2380      	movs	r3, #128	; 0x80
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	401a      	ands	r2, r3
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	429a      	cmp	r2, r3
 800476e:	d112      	bne.n	8004796 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2280      	movs	r2, #128	; 0x80
 8004776:	0112      	lsls	r2, r2, #4
 8004778:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 f81f 	bl	80047c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2290      	movs	r2, #144	; 0x90
 8004786:	2120      	movs	r1, #32
 8004788:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2284      	movs	r2, #132	; 0x84
 800478e:	2100      	movs	r1, #0
 8004790:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e00f      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	4013      	ands	r3, r2
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	425a      	negs	r2, r3
 80047a6:	4153      	adcs	r3, r2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	001a      	movs	r2, r3
 80047ac:	1dfb      	adds	r3, r7, #7
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d0a4      	beq.n	80046fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	0018      	movs	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	b004      	add	sp, #16
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047c8:	f3ef 8310 	mrs	r3, PRIMASK
 80047cc:	617b      	str	r3, [r7, #20]
  return(result);
 80047ce:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34
 80047d2:	2301      	movs	r3, #1
 80047d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4926      	ldr	r1, [pc, #152]	; (8004884 <UART_EndRxTransfer+0xc4>)
 80047ea:	400a      	ands	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80047fa:	f3ef 8310 	mrs	r3, PRIMASK
 80047fe:	623b      	str	r3, [r7, #32]
  return(result);
 8004800:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004802:	633b      	str	r3, [r7, #48]	; 0x30
 8004804:	2301      	movs	r3, #1
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	f383 8810 	msr	PRIMASK, r3
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	491b      	ldr	r1, [pc, #108]	; (8004888 <UART_EndRxTransfer+0xc8>)
 800481c:	400a      	ands	r2, r1
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004826:	f383 8810 	msr	PRIMASK, r3
}
 800482a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004830:	2b01      	cmp	r3, #1
 8004832:	d118      	bne.n	8004866 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004834:	f3ef 8310 	mrs	r3, PRIMASK
 8004838:	60bb      	str	r3, [r7, #8]
  return(result);
 800483a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800483e:	2301      	movs	r3, #1
 8004840:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f383 8810 	msr	PRIMASK, r3
}
 8004848:	46c0      	nop			; (mov r8, r8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2110      	movs	r1, #16
 8004856:	438a      	bics	r2, r1
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	f383 8810 	msr	PRIMASK, r3
}
 8004864:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	228c      	movs	r2, #140	; 0x8c
 800486a:	2120      	movs	r1, #32
 800486c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	675a      	str	r2, [r3, #116]	; 0x74
}
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	46bd      	mov	sp, r7
 800487e:	b00e      	add	sp, #56	; 0x38
 8004880:	bd80      	pop	{r7, pc}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	fffffedf 	.word	0xfffffedf
 8004888:	effffffe 	.word	0xeffffffe

0800488c <siprintf>:
 800488c:	b40e      	push	{r1, r2, r3}
 800488e:	b500      	push	{lr}
 8004890:	490b      	ldr	r1, [pc, #44]	; (80048c0 <siprintf+0x34>)
 8004892:	b09c      	sub	sp, #112	; 0x70
 8004894:	ab1d      	add	r3, sp, #116	; 0x74
 8004896:	9002      	str	r0, [sp, #8]
 8004898:	9006      	str	r0, [sp, #24]
 800489a:	9107      	str	r1, [sp, #28]
 800489c:	9104      	str	r1, [sp, #16]
 800489e:	4809      	ldr	r0, [pc, #36]	; (80048c4 <siprintf+0x38>)
 80048a0:	4909      	ldr	r1, [pc, #36]	; (80048c8 <siprintf+0x3c>)
 80048a2:	cb04      	ldmia	r3!, {r2}
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	a902      	add	r1, sp, #8
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	f000 f9a2 	bl	8004bf4 <_svfiprintf_r>
 80048b0:	2200      	movs	r2, #0
 80048b2:	9b02      	ldr	r3, [sp, #8]
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	; 0x70
 80048b8:	bc08      	pop	{r3}
 80048ba:	b003      	add	sp, #12
 80048bc:	4718      	bx	r3
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	7fffffff 	.word	0x7fffffff
 80048c4:	20000058 	.word	0x20000058
 80048c8:	ffff0208 	.word	0xffff0208

080048cc <memset>:
 80048cc:	0003      	movs	r3, r0
 80048ce:	1882      	adds	r2, r0, r2
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d100      	bne.n	80048d6 <memset+0xa>
 80048d4:	4770      	bx	lr
 80048d6:	7019      	strb	r1, [r3, #0]
 80048d8:	3301      	adds	r3, #1
 80048da:	e7f9      	b.n	80048d0 <memset+0x4>

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	20000058 	.word	0x20000058

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2600      	movs	r6, #0
 80048ec:	4c0c      	ldr	r4, [pc, #48]	; (8004920 <__libc_init_array+0x38>)
 80048ee:	4d0d      	ldr	r5, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048f0:	1b64      	subs	r4, r4, r5
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	2600      	movs	r6, #0
 80048fa:	f000 fc6d 	bl	80051d8 <_init>
 80048fe:	4c0a      	ldr	r4, [pc, #40]	; (8004928 <__libc_init_array+0x40>)
 8004900:	4d0a      	ldr	r5, [pc, #40]	; (800492c <__libc_init_array+0x44>)
 8004902:	1b64      	subs	r4, r4, r5
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	00b3      	lsls	r3, r6, #2
 800490e:	58eb      	ldr	r3, [r5, r3]
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	00b3      	lsls	r3, r6, #2
 8004918:	58eb      	ldr	r3, [r5, r3]
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	08005354 	.word	0x08005354
 8004924:	08005354 	.word	0x08005354
 8004928:	08005358 	.word	0x08005358
 800492c:	08005354 	.word	0x08005354

08004930 <__retarget_lock_acquire_recursive>:
 8004930:	4770      	bx	lr

08004932 <__retarget_lock_release_recursive>:
 8004932:	4770      	bx	lr

08004934 <_free_r>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	0005      	movs	r5, r0
 8004938:	2900      	cmp	r1, #0
 800493a:	d010      	beq.n	800495e <_free_r+0x2a>
 800493c:	1f0c      	subs	r4, r1, #4
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	da00      	bge.n	8004946 <_free_r+0x12>
 8004944:	18e4      	adds	r4, r4, r3
 8004946:	0028      	movs	r0, r5
 8004948:	f000 f8e2 	bl	8004b10 <__malloc_lock>
 800494c:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <_free_r+0x90>)
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <_free_r+0x2c>
 8004954:	6063      	str	r3, [r4, #4]
 8004956:	6014      	str	r4, [r2, #0]
 8004958:	0028      	movs	r0, r5
 800495a:	f000 f8e1 	bl	8004b20 <__malloc_unlock>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	42a3      	cmp	r3, r4
 8004962:	d908      	bls.n	8004976 <_free_r+0x42>
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	1821      	adds	r1, r4, r0
 8004968:	428b      	cmp	r3, r1
 800496a:	d1f3      	bne.n	8004954 <_free_r+0x20>
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	1809      	adds	r1, r1, r0
 8004972:	6021      	str	r1, [r4, #0]
 8004974:	e7ee      	b.n	8004954 <_free_r+0x20>
 8004976:	001a      	movs	r2, r3
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <_free_r+0x4e>
 800497e:	42a3      	cmp	r3, r4
 8004980:	d9f9      	bls.n	8004976 <_free_r+0x42>
 8004982:	6811      	ldr	r1, [r2, #0]
 8004984:	1850      	adds	r0, r2, r1
 8004986:	42a0      	cmp	r0, r4
 8004988:	d10b      	bne.n	80049a2 <_free_r+0x6e>
 800498a:	6820      	ldr	r0, [r4, #0]
 800498c:	1809      	adds	r1, r1, r0
 800498e:	1850      	adds	r0, r2, r1
 8004990:	6011      	str	r1, [r2, #0]
 8004992:	4283      	cmp	r3, r0
 8004994:	d1e0      	bne.n	8004958 <_free_r+0x24>
 8004996:	6818      	ldr	r0, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	1841      	adds	r1, r0, r1
 800499c:	6011      	str	r1, [r2, #0]
 800499e:	6053      	str	r3, [r2, #4]
 80049a0:	e7da      	b.n	8004958 <_free_r+0x24>
 80049a2:	42a0      	cmp	r0, r4
 80049a4:	d902      	bls.n	80049ac <_free_r+0x78>
 80049a6:	230c      	movs	r3, #12
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	e7d5      	b.n	8004958 <_free_r+0x24>
 80049ac:	6820      	ldr	r0, [r4, #0]
 80049ae:	1821      	adds	r1, r4, r0
 80049b0:	428b      	cmp	r3, r1
 80049b2:	d103      	bne.n	80049bc <_free_r+0x88>
 80049b4:	6819      	ldr	r1, [r3, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	1809      	adds	r1, r1, r0
 80049ba:	6021      	str	r1, [r4, #0]
 80049bc:	6063      	str	r3, [r4, #4]
 80049be:	6054      	str	r4, [r2, #4]
 80049c0:	e7ca      	b.n	8004958 <_free_r+0x24>
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	2000038c 	.word	0x2000038c

080049c8 <sbrk_aligned>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	4e0f      	ldr	r6, [pc, #60]	; (8004a08 <sbrk_aligned+0x40>)
 80049cc:	000d      	movs	r5, r1
 80049ce:	6831      	ldr	r1, [r6, #0]
 80049d0:	0004      	movs	r4, r0
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d102      	bne.n	80049dc <sbrk_aligned+0x14>
 80049d6:	f000 fba1 	bl	800511c <_sbrk_r>
 80049da:	6030      	str	r0, [r6, #0]
 80049dc:	0029      	movs	r1, r5
 80049de:	0020      	movs	r0, r4
 80049e0:	f000 fb9c 	bl	800511c <_sbrk_r>
 80049e4:	1c43      	adds	r3, r0, #1
 80049e6:	d00a      	beq.n	80049fe <sbrk_aligned+0x36>
 80049e8:	2303      	movs	r3, #3
 80049ea:	1cc5      	adds	r5, r0, #3
 80049ec:	439d      	bics	r5, r3
 80049ee:	42a8      	cmp	r0, r5
 80049f0:	d007      	beq.n	8004a02 <sbrk_aligned+0x3a>
 80049f2:	1a29      	subs	r1, r5, r0
 80049f4:	0020      	movs	r0, r4
 80049f6:	f000 fb91 	bl	800511c <_sbrk_r>
 80049fa:	3001      	adds	r0, #1
 80049fc:	d101      	bne.n	8004a02 <sbrk_aligned+0x3a>
 80049fe:	2501      	movs	r5, #1
 8004a00:	426d      	negs	r5, r5
 8004a02:	0028      	movs	r0, r5
 8004a04:	bd70      	pop	{r4, r5, r6, pc}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20000390 	.word	0x20000390

08004a0c <_malloc_r>:
 8004a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a0e:	2203      	movs	r2, #3
 8004a10:	1ccb      	adds	r3, r1, #3
 8004a12:	4393      	bics	r3, r2
 8004a14:	3308      	adds	r3, #8
 8004a16:	0006      	movs	r6, r0
 8004a18:	001f      	movs	r7, r3
 8004a1a:	2b0c      	cmp	r3, #12
 8004a1c:	d238      	bcs.n	8004a90 <_malloc_r+0x84>
 8004a1e:	270c      	movs	r7, #12
 8004a20:	42b9      	cmp	r1, r7
 8004a22:	d837      	bhi.n	8004a94 <_malloc_r+0x88>
 8004a24:	0030      	movs	r0, r6
 8004a26:	f000 f873 	bl	8004b10 <__malloc_lock>
 8004a2a:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <_malloc_r+0x100>)
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	001c      	movs	r4, r3
 8004a32:	2c00      	cmp	r4, #0
 8004a34:	d133      	bne.n	8004a9e <_malloc_r+0x92>
 8004a36:	0039      	movs	r1, r7
 8004a38:	0030      	movs	r0, r6
 8004a3a:	f7ff ffc5 	bl	80049c8 <sbrk_aligned>
 8004a3e:	0004      	movs	r4, r0
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d15e      	bne.n	8004b02 <_malloc_r+0xf6>
 8004a44:	9b00      	ldr	r3, [sp, #0]
 8004a46:	681c      	ldr	r4, [r3, #0]
 8004a48:	0025      	movs	r5, r4
 8004a4a:	2d00      	cmp	r5, #0
 8004a4c:	d14e      	bne.n	8004aec <_malloc_r+0xe0>
 8004a4e:	2c00      	cmp	r4, #0
 8004a50:	d051      	beq.n	8004af6 <_malloc_r+0xea>
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	0029      	movs	r1, r5
 8004a56:	18e3      	adds	r3, r4, r3
 8004a58:	0030      	movs	r0, r6
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	f000 fb5e 	bl	800511c <_sbrk_r>
 8004a60:	9b01      	ldr	r3, [sp, #4]
 8004a62:	4283      	cmp	r3, r0
 8004a64:	d147      	bne.n	8004af6 <_malloc_r+0xea>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0030      	movs	r0, r6
 8004a6a:	1aff      	subs	r7, r7, r3
 8004a6c:	0039      	movs	r1, r7
 8004a6e:	f7ff ffab 	bl	80049c8 <sbrk_aligned>
 8004a72:	3001      	adds	r0, #1
 8004a74:	d03f      	beq.n	8004af6 <_malloc_r+0xea>
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	19db      	adds	r3, r3, r7
 8004a7a:	6023      	str	r3, [r4, #0]
 8004a7c:	9b00      	ldr	r3, [sp, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d040      	beq.n	8004b06 <_malloc_r+0xfa>
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	42a2      	cmp	r2, r4
 8004a88:	d133      	bne.n	8004af2 <_malloc_r+0xe6>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	e014      	b.n	8004aba <_malloc_r+0xae>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	dac5      	bge.n	8004a20 <_malloc_r+0x14>
 8004a94:	230c      	movs	r3, #12
 8004a96:	2500      	movs	r5, #0
 8004a98:	6033      	str	r3, [r6, #0]
 8004a9a:	0028      	movs	r0, r5
 8004a9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a9e:	6821      	ldr	r1, [r4, #0]
 8004aa0:	1bc9      	subs	r1, r1, r7
 8004aa2:	d420      	bmi.n	8004ae6 <_malloc_r+0xda>
 8004aa4:	290b      	cmp	r1, #11
 8004aa6:	d918      	bls.n	8004ada <_malloc_r+0xce>
 8004aa8:	19e2      	adds	r2, r4, r7
 8004aaa:	6027      	str	r7, [r4, #0]
 8004aac:	42a3      	cmp	r3, r4
 8004aae:	d112      	bne.n	8004ad6 <_malloc_r+0xca>
 8004ab0:	9b00      	ldr	r3, [sp, #0]
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	6863      	ldr	r3, [r4, #4]
 8004ab6:	6011      	str	r1, [r2, #0]
 8004ab8:	6053      	str	r3, [r2, #4]
 8004aba:	0030      	movs	r0, r6
 8004abc:	0025      	movs	r5, r4
 8004abe:	f000 f82f 	bl	8004b20 <__malloc_unlock>
 8004ac2:	2207      	movs	r2, #7
 8004ac4:	350b      	adds	r5, #11
 8004ac6:	1d23      	adds	r3, r4, #4
 8004ac8:	4395      	bics	r5, r2
 8004aca:	1aea      	subs	r2, r5, r3
 8004acc:	429d      	cmp	r5, r3
 8004ace:	d0e4      	beq.n	8004a9a <_malloc_r+0x8e>
 8004ad0:	1b5b      	subs	r3, r3, r5
 8004ad2:	50a3      	str	r3, [r4, r2]
 8004ad4:	e7e1      	b.n	8004a9a <_malloc_r+0x8e>
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	e7ec      	b.n	8004ab4 <_malloc_r+0xa8>
 8004ada:	6862      	ldr	r2, [r4, #4]
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d1d5      	bne.n	8004a8c <_malloc_r+0x80>
 8004ae0:	9b00      	ldr	r3, [sp, #0]
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	e7e9      	b.n	8004aba <_malloc_r+0xae>
 8004ae6:	0023      	movs	r3, r4
 8004ae8:	6864      	ldr	r4, [r4, #4]
 8004aea:	e7a2      	b.n	8004a32 <_malloc_r+0x26>
 8004aec:	002c      	movs	r4, r5
 8004aee:	686d      	ldr	r5, [r5, #4]
 8004af0:	e7ab      	b.n	8004a4a <_malloc_r+0x3e>
 8004af2:	0013      	movs	r3, r2
 8004af4:	e7c4      	b.n	8004a80 <_malloc_r+0x74>
 8004af6:	230c      	movs	r3, #12
 8004af8:	0030      	movs	r0, r6
 8004afa:	6033      	str	r3, [r6, #0]
 8004afc:	f000 f810 	bl	8004b20 <__malloc_unlock>
 8004b00:	e7cb      	b.n	8004a9a <_malloc_r+0x8e>
 8004b02:	6027      	str	r7, [r4, #0]
 8004b04:	e7d9      	b.n	8004aba <_malloc_r+0xae>
 8004b06:	605b      	str	r3, [r3, #4]
 8004b08:	deff      	udf	#255	; 0xff
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	2000038c 	.word	0x2000038c

08004b10 <__malloc_lock>:
 8004b10:	b510      	push	{r4, lr}
 8004b12:	4802      	ldr	r0, [pc, #8]	; (8004b1c <__malloc_lock+0xc>)
 8004b14:	f7ff ff0c 	bl	8004930 <__retarget_lock_acquire_recursive>
 8004b18:	bd10      	pop	{r4, pc}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	20000388 	.word	0x20000388

08004b20 <__malloc_unlock>:
 8004b20:	b510      	push	{r4, lr}
 8004b22:	4802      	ldr	r0, [pc, #8]	; (8004b2c <__malloc_unlock+0xc>)
 8004b24:	f7ff ff05 	bl	8004932 <__retarget_lock_release_recursive>
 8004b28:	bd10      	pop	{r4, pc}
 8004b2a:	46c0      	nop			; (mov r8, r8)
 8004b2c:	20000388 	.word	0x20000388

08004b30 <__ssputs_r>:
 8004b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b32:	b085      	sub	sp, #20
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	9203      	str	r2, [sp, #12]
 8004b38:	688e      	ldr	r6, [r1, #8]
 8004b3a:	9a01      	ldr	r2, [sp, #4]
 8004b3c:	0007      	movs	r7, r0
 8004b3e:	000c      	movs	r4, r1
 8004b40:	680b      	ldr	r3, [r1, #0]
 8004b42:	4296      	cmp	r6, r2
 8004b44:	d831      	bhi.n	8004baa <__ssputs_r+0x7a>
 8004b46:	898a      	ldrh	r2, [r1, #12]
 8004b48:	2190      	movs	r1, #144	; 0x90
 8004b4a:	00c9      	lsls	r1, r1, #3
 8004b4c:	420a      	tst	r2, r1
 8004b4e:	d029      	beq.n	8004ba4 <__ssputs_r+0x74>
 8004b50:	2003      	movs	r0, #3
 8004b52:	6921      	ldr	r1, [r4, #16]
 8004b54:	1a5b      	subs	r3, r3, r1
 8004b56:	9302      	str	r3, [sp, #8]
 8004b58:	6963      	ldr	r3, [r4, #20]
 8004b5a:	4343      	muls	r3, r0
 8004b5c:	0fdd      	lsrs	r5, r3, #31
 8004b5e:	18ed      	adds	r5, r5, r3
 8004b60:	9b01      	ldr	r3, [sp, #4]
 8004b62:	9802      	ldr	r0, [sp, #8]
 8004b64:	3301      	adds	r3, #1
 8004b66:	181b      	adds	r3, r3, r0
 8004b68:	106d      	asrs	r5, r5, #1
 8004b6a:	42ab      	cmp	r3, r5
 8004b6c:	d900      	bls.n	8004b70 <__ssputs_r+0x40>
 8004b6e:	001d      	movs	r5, r3
 8004b70:	0552      	lsls	r2, r2, #21
 8004b72:	d529      	bpl.n	8004bc8 <__ssputs_r+0x98>
 8004b74:	0029      	movs	r1, r5
 8004b76:	0038      	movs	r0, r7
 8004b78:	f7ff ff48 	bl	8004a0c <_malloc_r>
 8004b7c:	1e06      	subs	r6, r0, #0
 8004b7e:	d02d      	beq.n	8004bdc <__ssputs_r+0xac>
 8004b80:	9a02      	ldr	r2, [sp, #8]
 8004b82:	6921      	ldr	r1, [r4, #16]
 8004b84:	f000 fae7 	bl	8005156 <memcpy>
 8004b88:	89a2      	ldrh	r2, [r4, #12]
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <__ssputs_r+0xc0>)
 8004b8c:	401a      	ands	r2, r3
 8004b8e:	2380      	movs	r3, #128	; 0x80
 8004b90:	4313      	orrs	r3, r2
 8004b92:	81a3      	strh	r3, [r4, #12]
 8004b94:	9b02      	ldr	r3, [sp, #8]
 8004b96:	6126      	str	r6, [r4, #16]
 8004b98:	18f6      	adds	r6, r6, r3
 8004b9a:	6026      	str	r6, [r4, #0]
 8004b9c:	6165      	str	r5, [r4, #20]
 8004b9e:	9e01      	ldr	r6, [sp, #4]
 8004ba0:	1aed      	subs	r5, r5, r3
 8004ba2:	60a5      	str	r5, [r4, #8]
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	429e      	cmp	r6, r3
 8004ba8:	d900      	bls.n	8004bac <__ssputs_r+0x7c>
 8004baa:	9e01      	ldr	r6, [sp, #4]
 8004bac:	0032      	movs	r2, r6
 8004bae:	9903      	ldr	r1, [sp, #12]
 8004bb0:	6820      	ldr	r0, [r4, #0]
 8004bb2:	f000 fa9f 	bl	80050f4 <memmove>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	68a3      	ldr	r3, [r4, #8]
 8004bba:	1b9b      	subs	r3, r3, r6
 8004bbc:	60a3      	str	r3, [r4, #8]
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	199b      	adds	r3, r3, r6
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	b005      	add	sp, #20
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc8:	002a      	movs	r2, r5
 8004bca:	0038      	movs	r0, r7
 8004bcc:	f000 facc 	bl	8005168 <_realloc_r>
 8004bd0:	1e06      	subs	r6, r0, #0
 8004bd2:	d1df      	bne.n	8004b94 <__ssputs_r+0x64>
 8004bd4:	0038      	movs	r0, r7
 8004bd6:	6921      	ldr	r1, [r4, #16]
 8004bd8:	f7ff feac 	bl	8004934 <_free_r>
 8004bdc:	230c      	movs	r3, #12
 8004bde:	2001      	movs	r0, #1
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	89a2      	ldrh	r2, [r4, #12]
 8004be4:	3334      	adds	r3, #52	; 0x34
 8004be6:	4313      	orrs	r3, r2
 8004be8:	81a3      	strh	r3, [r4, #12]
 8004bea:	4240      	negs	r0, r0
 8004bec:	e7ea      	b.n	8004bc4 <__ssputs_r+0x94>
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	fffffb7f 	.word	0xfffffb7f

08004bf4 <_svfiprintf_r>:
 8004bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bf6:	b0a1      	sub	sp, #132	; 0x84
 8004bf8:	9003      	str	r0, [sp, #12]
 8004bfa:	001d      	movs	r5, r3
 8004bfc:	898b      	ldrh	r3, [r1, #12]
 8004bfe:	000f      	movs	r7, r1
 8004c00:	0016      	movs	r6, r2
 8004c02:	061b      	lsls	r3, r3, #24
 8004c04:	d511      	bpl.n	8004c2a <_svfiprintf_r+0x36>
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10e      	bne.n	8004c2a <_svfiprintf_r+0x36>
 8004c0c:	2140      	movs	r1, #64	; 0x40
 8004c0e:	f7ff fefd 	bl	8004a0c <_malloc_r>
 8004c12:	6038      	str	r0, [r7, #0]
 8004c14:	6138      	str	r0, [r7, #16]
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d105      	bne.n	8004c26 <_svfiprintf_r+0x32>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	9a03      	ldr	r2, [sp, #12]
 8004c1e:	3801      	subs	r0, #1
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	b021      	add	sp, #132	; 0x84
 8004c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	617b      	str	r3, [r7, #20]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	ac08      	add	r4, sp, #32
 8004c2e:	6163      	str	r3, [r4, #20]
 8004c30:	3320      	adds	r3, #32
 8004c32:	7663      	strb	r3, [r4, #25]
 8004c34:	3310      	adds	r3, #16
 8004c36:	76a3      	strb	r3, [r4, #26]
 8004c38:	9507      	str	r5, [sp, #28]
 8004c3a:	0035      	movs	r5, r6
 8004c3c:	782b      	ldrb	r3, [r5, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <_svfiprintf_r+0x52>
 8004c42:	2b25      	cmp	r3, #37	; 0x25
 8004c44:	d148      	bne.n	8004cd8 <_svfiprintf_r+0xe4>
 8004c46:	1bab      	subs	r3, r5, r6
 8004c48:	9305      	str	r3, [sp, #20]
 8004c4a:	42b5      	cmp	r5, r6
 8004c4c:	d00b      	beq.n	8004c66 <_svfiprintf_r+0x72>
 8004c4e:	0032      	movs	r2, r6
 8004c50:	0039      	movs	r1, r7
 8004c52:	9803      	ldr	r0, [sp, #12]
 8004c54:	f7ff ff6c 	bl	8004b30 <__ssputs_r>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d100      	bne.n	8004c5e <_svfiprintf_r+0x6a>
 8004c5c:	e0af      	b.n	8004dbe <_svfiprintf_r+0x1ca>
 8004c5e:	6963      	ldr	r3, [r4, #20]
 8004c60:	9a05      	ldr	r2, [sp, #20]
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	6163      	str	r3, [r4, #20]
 8004c66:	782b      	ldrb	r3, [r5, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d100      	bne.n	8004c6e <_svfiprintf_r+0x7a>
 8004c6c:	e0a7      	b.n	8004dbe <_svfiprintf_r+0x1ca>
 8004c6e:	2201      	movs	r2, #1
 8004c70:	2300      	movs	r3, #0
 8004c72:	4252      	negs	r2, r2
 8004c74:	6062      	str	r2, [r4, #4]
 8004c76:	a904      	add	r1, sp, #16
 8004c78:	3254      	adds	r2, #84	; 0x54
 8004c7a:	1852      	adds	r2, r2, r1
 8004c7c:	1c6e      	adds	r6, r5, #1
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	60e3      	str	r3, [r4, #12]
 8004c82:	60a3      	str	r3, [r4, #8]
 8004c84:	7013      	strb	r3, [r2, #0]
 8004c86:	65a3      	str	r3, [r4, #88]	; 0x58
 8004c88:	4b55      	ldr	r3, [pc, #340]	; (8004de0 <_svfiprintf_r+0x1ec>)
 8004c8a:	2205      	movs	r2, #5
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	7831      	ldrb	r1, [r6, #0]
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	f000 fa55 	bl	8005140 <memchr>
 8004c96:	1c75      	adds	r5, r6, #1
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d11f      	bne.n	8004cdc <_svfiprintf_r+0xe8>
 8004c9c:	6822      	ldr	r2, [r4, #0]
 8004c9e:	06d3      	lsls	r3, r2, #27
 8004ca0:	d504      	bpl.n	8004cac <_svfiprintf_r+0xb8>
 8004ca2:	2353      	movs	r3, #83	; 0x53
 8004ca4:	a904      	add	r1, sp, #16
 8004ca6:	185b      	adds	r3, r3, r1
 8004ca8:	2120      	movs	r1, #32
 8004caa:	7019      	strb	r1, [r3, #0]
 8004cac:	0713      	lsls	r3, r2, #28
 8004cae:	d504      	bpl.n	8004cba <_svfiprintf_r+0xc6>
 8004cb0:	2353      	movs	r3, #83	; 0x53
 8004cb2:	a904      	add	r1, sp, #16
 8004cb4:	185b      	adds	r3, r3, r1
 8004cb6:	212b      	movs	r1, #43	; 0x2b
 8004cb8:	7019      	strb	r1, [r3, #0]
 8004cba:	7833      	ldrb	r3, [r6, #0]
 8004cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004cbe:	d016      	beq.n	8004cee <_svfiprintf_r+0xfa>
 8004cc0:	0035      	movs	r5, r6
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	200a      	movs	r0, #10
 8004cc6:	68e3      	ldr	r3, [r4, #12]
 8004cc8:	782a      	ldrb	r2, [r5, #0]
 8004cca:	1c6e      	adds	r6, r5, #1
 8004ccc:	3a30      	subs	r2, #48	; 0x30
 8004cce:	2a09      	cmp	r2, #9
 8004cd0:	d94e      	bls.n	8004d70 <_svfiprintf_r+0x17c>
 8004cd2:	2900      	cmp	r1, #0
 8004cd4:	d111      	bne.n	8004cfa <_svfiprintf_r+0x106>
 8004cd6:	e017      	b.n	8004d08 <_svfiprintf_r+0x114>
 8004cd8:	3501      	adds	r5, #1
 8004cda:	e7af      	b.n	8004c3c <_svfiprintf_r+0x48>
 8004cdc:	9b05      	ldr	r3, [sp, #20]
 8004cde:	6822      	ldr	r2, [r4, #0]
 8004ce0:	1ac0      	subs	r0, r0, r3
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	4083      	lsls	r3, r0
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	002e      	movs	r6, r5
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	e7cc      	b.n	8004c88 <_svfiprintf_r+0x94>
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	1d19      	adds	r1, r3, #4
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	9107      	str	r1, [sp, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db01      	blt.n	8004cfe <_svfiprintf_r+0x10a>
 8004cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cfc:	e004      	b.n	8004d08 <_svfiprintf_r+0x114>
 8004cfe:	425b      	negs	r3, r3
 8004d00:	60e3      	str	r3, [r4, #12]
 8004d02:	2302      	movs	r3, #2
 8004d04:	4313      	orrs	r3, r2
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	782b      	ldrb	r3, [r5, #0]
 8004d0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004d0c:	d10a      	bne.n	8004d24 <_svfiprintf_r+0x130>
 8004d0e:	786b      	ldrb	r3, [r5, #1]
 8004d10:	2b2a      	cmp	r3, #42	; 0x2a
 8004d12:	d135      	bne.n	8004d80 <_svfiprintf_r+0x18c>
 8004d14:	9b07      	ldr	r3, [sp, #28]
 8004d16:	3502      	adds	r5, #2
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	9207      	str	r2, [sp, #28]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	db2b      	blt.n	8004d7a <_svfiprintf_r+0x186>
 8004d22:	9309      	str	r3, [sp, #36]	; 0x24
 8004d24:	4e2f      	ldr	r6, [pc, #188]	; (8004de4 <_svfiprintf_r+0x1f0>)
 8004d26:	2203      	movs	r2, #3
 8004d28:	0030      	movs	r0, r6
 8004d2a:	7829      	ldrb	r1, [r5, #0]
 8004d2c:	f000 fa08 	bl	8005140 <memchr>
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d006      	beq.n	8004d42 <_svfiprintf_r+0x14e>
 8004d34:	2340      	movs	r3, #64	; 0x40
 8004d36:	1b80      	subs	r0, r0, r6
 8004d38:	4083      	lsls	r3, r0
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	3501      	adds	r5, #1
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	6023      	str	r3, [r4, #0]
 8004d42:	7829      	ldrb	r1, [r5, #0]
 8004d44:	2206      	movs	r2, #6
 8004d46:	4828      	ldr	r0, [pc, #160]	; (8004de8 <_svfiprintf_r+0x1f4>)
 8004d48:	1c6e      	adds	r6, r5, #1
 8004d4a:	7621      	strb	r1, [r4, #24]
 8004d4c:	f000 f9f8 	bl	8005140 <memchr>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d03c      	beq.n	8004dce <_svfiprintf_r+0x1da>
 8004d54:	4b25      	ldr	r3, [pc, #148]	; (8004dec <_svfiprintf_r+0x1f8>)
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d125      	bne.n	8004da6 <_svfiprintf_r+0x1b2>
 8004d5a:	2207      	movs	r2, #7
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	3307      	adds	r3, #7
 8004d60:	4393      	bics	r3, r2
 8004d62:	3308      	adds	r3, #8
 8004d64:	9307      	str	r3, [sp, #28]
 8004d66:	6963      	ldr	r3, [r4, #20]
 8004d68:	9a04      	ldr	r2, [sp, #16]
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	6163      	str	r3, [r4, #20]
 8004d6e:	e764      	b.n	8004c3a <_svfiprintf_r+0x46>
 8004d70:	4343      	muls	r3, r0
 8004d72:	0035      	movs	r5, r6
 8004d74:	2101      	movs	r1, #1
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	e7a6      	b.n	8004cc8 <_svfiprintf_r+0xd4>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	e7d0      	b.n	8004d22 <_svfiprintf_r+0x12e>
 8004d80:	2300      	movs	r3, #0
 8004d82:	200a      	movs	r0, #10
 8004d84:	001a      	movs	r2, r3
 8004d86:	3501      	adds	r5, #1
 8004d88:	6063      	str	r3, [r4, #4]
 8004d8a:	7829      	ldrb	r1, [r5, #0]
 8004d8c:	1c6e      	adds	r6, r5, #1
 8004d8e:	3930      	subs	r1, #48	; 0x30
 8004d90:	2909      	cmp	r1, #9
 8004d92:	d903      	bls.n	8004d9c <_svfiprintf_r+0x1a8>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0c5      	beq.n	8004d24 <_svfiprintf_r+0x130>
 8004d98:	9209      	str	r2, [sp, #36]	; 0x24
 8004d9a:	e7c3      	b.n	8004d24 <_svfiprintf_r+0x130>
 8004d9c:	4342      	muls	r2, r0
 8004d9e:	0035      	movs	r5, r6
 8004da0:	2301      	movs	r3, #1
 8004da2:	1852      	adds	r2, r2, r1
 8004da4:	e7f1      	b.n	8004d8a <_svfiprintf_r+0x196>
 8004da6:	aa07      	add	r2, sp, #28
 8004da8:	9200      	str	r2, [sp, #0]
 8004daa:	0021      	movs	r1, r4
 8004dac:	003a      	movs	r2, r7
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <_svfiprintf_r+0x1fc>)
 8004db0:	9803      	ldr	r0, [sp, #12]
 8004db2:	e000      	b.n	8004db6 <_svfiprintf_r+0x1c2>
 8004db4:	bf00      	nop
 8004db6:	9004      	str	r0, [sp, #16]
 8004db8:	9b04      	ldr	r3, [sp, #16]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	d1d3      	bne.n	8004d66 <_svfiprintf_r+0x172>
 8004dbe:	89bb      	ldrh	r3, [r7, #12]
 8004dc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004dc2:	065b      	lsls	r3, r3, #25
 8004dc4:	d400      	bmi.n	8004dc8 <_svfiprintf_r+0x1d4>
 8004dc6:	e72c      	b.n	8004c22 <_svfiprintf_r+0x2e>
 8004dc8:	2001      	movs	r0, #1
 8004dca:	4240      	negs	r0, r0
 8004dcc:	e729      	b.n	8004c22 <_svfiprintf_r+0x2e>
 8004dce:	aa07      	add	r2, sp, #28
 8004dd0:	9200      	str	r2, [sp, #0]
 8004dd2:	0021      	movs	r1, r4
 8004dd4:	003a      	movs	r2, r7
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <_svfiprintf_r+0x1fc>)
 8004dd8:	9803      	ldr	r0, [sp, #12]
 8004dda:	f000 f87b 	bl	8004ed4 <_printf_i>
 8004dde:	e7ea      	b.n	8004db6 <_svfiprintf_r+0x1c2>
 8004de0:	08005320 	.word	0x08005320
 8004de4:	08005326 	.word	0x08005326
 8004de8:	0800532a 	.word	0x0800532a
 8004dec:	00000000 	.word	0x00000000
 8004df0:	08004b31 	.word	0x08004b31

08004df4 <_printf_common>:
 8004df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004df6:	0016      	movs	r6, r2
 8004df8:	9301      	str	r3, [sp, #4]
 8004dfa:	688a      	ldr	r2, [r1, #8]
 8004dfc:	690b      	ldr	r3, [r1, #16]
 8004dfe:	000c      	movs	r4, r1
 8004e00:	9000      	str	r0, [sp, #0]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	da00      	bge.n	8004e08 <_printf_common+0x14>
 8004e06:	0013      	movs	r3, r2
 8004e08:	0022      	movs	r2, r4
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	3243      	adds	r2, #67	; 0x43
 8004e0e:	7812      	ldrb	r2, [r2, #0]
 8004e10:	2a00      	cmp	r2, #0
 8004e12:	d001      	beq.n	8004e18 <_printf_common+0x24>
 8004e14:	3301      	adds	r3, #1
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	d502      	bpl.n	8004e24 <_printf_common+0x30>
 8004e1e:	6833      	ldr	r3, [r6, #0]
 8004e20:	3302      	adds	r3, #2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	2306      	movs	r3, #6
 8004e28:	0015      	movs	r5, r2
 8004e2a:	401d      	ands	r5, r3
 8004e2c:	421a      	tst	r2, r3
 8004e2e:	d027      	beq.n	8004e80 <_printf_common+0x8c>
 8004e30:	0023      	movs	r3, r4
 8004e32:	3343      	adds	r3, #67	; 0x43
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	1e5a      	subs	r2, r3, #1
 8004e38:	4193      	sbcs	r3, r2
 8004e3a:	6822      	ldr	r2, [r4, #0]
 8004e3c:	0692      	lsls	r2, r2, #26
 8004e3e:	d430      	bmi.n	8004ea2 <_printf_common+0xae>
 8004e40:	0022      	movs	r2, r4
 8004e42:	9901      	ldr	r1, [sp, #4]
 8004e44:	9800      	ldr	r0, [sp, #0]
 8004e46:	9d08      	ldr	r5, [sp, #32]
 8004e48:	3243      	adds	r2, #67	; 0x43
 8004e4a:	47a8      	blx	r5
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d025      	beq.n	8004e9c <_printf_common+0xa8>
 8004e50:	2206      	movs	r2, #6
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	2500      	movs	r5, #0
 8004e56:	4013      	ands	r3, r2
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d105      	bne.n	8004e68 <_printf_common+0x74>
 8004e5c:	6833      	ldr	r3, [r6, #0]
 8004e5e:	68e5      	ldr	r5, [r4, #12]
 8004e60:	1aed      	subs	r5, r5, r3
 8004e62:	43eb      	mvns	r3, r5
 8004e64:	17db      	asrs	r3, r3, #31
 8004e66:	401d      	ands	r5, r3
 8004e68:	68a3      	ldr	r3, [r4, #8]
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	dd01      	ble.n	8004e74 <_printf_common+0x80>
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	18ed      	adds	r5, r5, r3
 8004e74:	2600      	movs	r6, #0
 8004e76:	42b5      	cmp	r5, r6
 8004e78:	d120      	bne.n	8004ebc <_printf_common+0xc8>
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e010      	b.n	8004ea0 <_printf_common+0xac>
 8004e7e:	3501      	adds	r5, #1
 8004e80:	68e3      	ldr	r3, [r4, #12]
 8004e82:	6832      	ldr	r2, [r6, #0]
 8004e84:	1a9b      	subs	r3, r3, r2
 8004e86:	42ab      	cmp	r3, r5
 8004e88:	ddd2      	ble.n	8004e30 <_printf_common+0x3c>
 8004e8a:	0022      	movs	r2, r4
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	9901      	ldr	r1, [sp, #4]
 8004e90:	9800      	ldr	r0, [sp, #0]
 8004e92:	9f08      	ldr	r7, [sp, #32]
 8004e94:	3219      	adds	r2, #25
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1f0      	bne.n	8004e7e <_printf_common+0x8a>
 8004e9c:	2001      	movs	r0, #1
 8004e9e:	4240      	negs	r0, r0
 8004ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ea2:	2030      	movs	r0, #48	; 0x30
 8004ea4:	18e1      	adds	r1, r4, r3
 8004ea6:	3143      	adds	r1, #67	; 0x43
 8004ea8:	7008      	strb	r0, [r1, #0]
 8004eaa:	0021      	movs	r1, r4
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	3145      	adds	r1, #69	; 0x45
 8004eb0:	7809      	ldrb	r1, [r1, #0]
 8004eb2:	18a2      	adds	r2, r4, r2
 8004eb4:	3243      	adds	r2, #67	; 0x43
 8004eb6:	3302      	adds	r3, #2
 8004eb8:	7011      	strb	r1, [r2, #0]
 8004eba:	e7c1      	b.n	8004e40 <_printf_common+0x4c>
 8004ebc:	0022      	movs	r2, r4
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	9901      	ldr	r1, [sp, #4]
 8004ec2:	9800      	ldr	r0, [sp, #0]
 8004ec4:	9f08      	ldr	r7, [sp, #32]
 8004ec6:	321a      	adds	r2, #26
 8004ec8:	47b8      	blx	r7
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d0e6      	beq.n	8004e9c <_printf_common+0xa8>
 8004ece:	3601      	adds	r6, #1
 8004ed0:	e7d1      	b.n	8004e76 <_printf_common+0x82>
	...

08004ed4 <_printf_i>:
 8004ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed6:	b08b      	sub	sp, #44	; 0x2c
 8004ed8:	9206      	str	r2, [sp, #24]
 8004eda:	000a      	movs	r2, r1
 8004edc:	3243      	adds	r2, #67	; 0x43
 8004ede:	9307      	str	r3, [sp, #28]
 8004ee0:	9005      	str	r0, [sp, #20]
 8004ee2:	9204      	str	r2, [sp, #16]
 8004ee4:	7e0a      	ldrb	r2, [r1, #24]
 8004ee6:	000c      	movs	r4, r1
 8004ee8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004eea:	2a78      	cmp	r2, #120	; 0x78
 8004eec:	d809      	bhi.n	8004f02 <_printf_i+0x2e>
 8004eee:	2a62      	cmp	r2, #98	; 0x62
 8004ef0:	d80b      	bhi.n	8004f0a <_printf_i+0x36>
 8004ef2:	2a00      	cmp	r2, #0
 8004ef4:	d100      	bne.n	8004ef8 <_printf_i+0x24>
 8004ef6:	e0be      	b.n	8005076 <_printf_i+0x1a2>
 8004ef8:	497c      	ldr	r1, [pc, #496]	; (80050ec <_printf_i+0x218>)
 8004efa:	9103      	str	r1, [sp, #12]
 8004efc:	2a58      	cmp	r2, #88	; 0x58
 8004efe:	d100      	bne.n	8004f02 <_printf_i+0x2e>
 8004f00:	e093      	b.n	800502a <_printf_i+0x156>
 8004f02:	0026      	movs	r6, r4
 8004f04:	3642      	adds	r6, #66	; 0x42
 8004f06:	7032      	strb	r2, [r6, #0]
 8004f08:	e022      	b.n	8004f50 <_printf_i+0x7c>
 8004f0a:	0010      	movs	r0, r2
 8004f0c:	3863      	subs	r0, #99	; 0x63
 8004f0e:	2815      	cmp	r0, #21
 8004f10:	d8f7      	bhi.n	8004f02 <_printf_i+0x2e>
 8004f12:	f7fb f901 	bl	8000118 <__gnu_thumb1_case_shi>
 8004f16:	0016      	.short	0x0016
 8004f18:	fff6001f 	.word	0xfff6001f
 8004f1c:	fff6fff6 	.word	0xfff6fff6
 8004f20:	001ffff6 	.word	0x001ffff6
 8004f24:	fff6fff6 	.word	0xfff6fff6
 8004f28:	fff6fff6 	.word	0xfff6fff6
 8004f2c:	003600a3 	.word	0x003600a3
 8004f30:	fff60083 	.word	0xfff60083
 8004f34:	00b4fff6 	.word	0x00b4fff6
 8004f38:	0036fff6 	.word	0x0036fff6
 8004f3c:	fff6fff6 	.word	0xfff6fff6
 8004f40:	0087      	.short	0x0087
 8004f42:	0026      	movs	r6, r4
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	3642      	adds	r6, #66	; 0x42
 8004f48:	1d11      	adds	r1, r2, #4
 8004f4a:	6019      	str	r1, [r3, #0]
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	7033      	strb	r3, [r6, #0]
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0a2      	b.n	800509a <_printf_i+0x1c6>
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	6809      	ldr	r1, [r1, #0]
 8004f58:	1d02      	adds	r2, r0, #4
 8004f5a:	060d      	lsls	r5, r1, #24
 8004f5c:	d50b      	bpl.n	8004f76 <_printf_i+0xa2>
 8004f5e:	6805      	ldr	r5, [r0, #0]
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	da03      	bge.n	8004f6e <_printf_i+0x9a>
 8004f66:	232d      	movs	r3, #45	; 0x2d
 8004f68:	9a04      	ldr	r2, [sp, #16]
 8004f6a:	426d      	negs	r5, r5
 8004f6c:	7013      	strb	r3, [r2, #0]
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	; (80050ec <_printf_i+0x218>)
 8004f70:	270a      	movs	r7, #10
 8004f72:	9303      	str	r3, [sp, #12]
 8004f74:	e01b      	b.n	8004fae <_printf_i+0xda>
 8004f76:	6805      	ldr	r5, [r0, #0]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	0649      	lsls	r1, r1, #25
 8004f7c:	d5f1      	bpl.n	8004f62 <_printf_i+0x8e>
 8004f7e:	b22d      	sxth	r5, r5
 8004f80:	e7ef      	b.n	8004f62 <_printf_i+0x8e>
 8004f82:	680d      	ldr	r5, [r1, #0]
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	1d08      	adds	r0, r1, #4
 8004f88:	6018      	str	r0, [r3, #0]
 8004f8a:	062e      	lsls	r6, r5, #24
 8004f8c:	d501      	bpl.n	8004f92 <_printf_i+0xbe>
 8004f8e:	680d      	ldr	r5, [r1, #0]
 8004f90:	e003      	b.n	8004f9a <_printf_i+0xc6>
 8004f92:	066d      	lsls	r5, r5, #25
 8004f94:	d5fb      	bpl.n	8004f8e <_printf_i+0xba>
 8004f96:	680d      	ldr	r5, [r1, #0]
 8004f98:	b2ad      	uxth	r5, r5
 8004f9a:	4b54      	ldr	r3, [pc, #336]	; (80050ec <_printf_i+0x218>)
 8004f9c:	2708      	movs	r7, #8
 8004f9e:	9303      	str	r3, [sp, #12]
 8004fa0:	2a6f      	cmp	r2, #111	; 0x6f
 8004fa2:	d000      	beq.n	8004fa6 <_printf_i+0xd2>
 8004fa4:	3702      	adds	r7, #2
 8004fa6:	0023      	movs	r3, r4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	3343      	adds	r3, #67	; 0x43
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	6863      	ldr	r3, [r4, #4]
 8004fb0:	60a3      	str	r3, [r4, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	db03      	blt.n	8004fbe <_printf_i+0xea>
 8004fb6:	2104      	movs	r1, #4
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	438a      	bics	r2, r1
 8004fbc:	6022      	str	r2, [r4, #0]
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	d102      	bne.n	8004fc8 <_printf_i+0xf4>
 8004fc2:	9e04      	ldr	r6, [sp, #16]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <_printf_i+0x10e>
 8004fc8:	9e04      	ldr	r6, [sp, #16]
 8004fca:	0028      	movs	r0, r5
 8004fcc:	0039      	movs	r1, r7
 8004fce:	f7fb f933 	bl	8000238 <__aeabi_uidivmod>
 8004fd2:	9b03      	ldr	r3, [sp, #12]
 8004fd4:	3e01      	subs	r6, #1
 8004fd6:	5c5b      	ldrb	r3, [r3, r1]
 8004fd8:	7033      	strb	r3, [r6, #0]
 8004fda:	002b      	movs	r3, r5
 8004fdc:	0005      	movs	r5, r0
 8004fde:	429f      	cmp	r7, r3
 8004fe0:	d9f3      	bls.n	8004fca <_printf_i+0xf6>
 8004fe2:	2f08      	cmp	r7, #8
 8004fe4:	d109      	bne.n	8004ffa <_printf_i+0x126>
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	d506      	bpl.n	8004ffa <_printf_i+0x126>
 8004fec:	6862      	ldr	r2, [r4, #4]
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	dc02      	bgt.n	8004ffa <_printf_i+0x126>
 8004ff4:	2330      	movs	r3, #48	; 0x30
 8004ff6:	3e01      	subs	r6, #1
 8004ff8:	7033      	strb	r3, [r6, #0]
 8004ffa:	9b04      	ldr	r3, [sp, #16]
 8004ffc:	1b9b      	subs	r3, r3, r6
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	9b07      	ldr	r3, [sp, #28]
 8005002:	0021      	movs	r1, r4
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	9805      	ldr	r0, [sp, #20]
 8005008:	9b06      	ldr	r3, [sp, #24]
 800500a:	aa09      	add	r2, sp, #36	; 0x24
 800500c:	f7ff fef2 	bl	8004df4 <_printf_common>
 8005010:	3001      	adds	r0, #1
 8005012:	d147      	bne.n	80050a4 <_printf_i+0x1d0>
 8005014:	2001      	movs	r0, #1
 8005016:	4240      	negs	r0, r0
 8005018:	b00b      	add	sp, #44	; 0x2c
 800501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800501c:	2220      	movs	r2, #32
 800501e:	6809      	ldr	r1, [r1, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	6022      	str	r2, [r4, #0]
 8005024:	2278      	movs	r2, #120	; 0x78
 8005026:	4932      	ldr	r1, [pc, #200]	; (80050f0 <_printf_i+0x21c>)
 8005028:	9103      	str	r1, [sp, #12]
 800502a:	0021      	movs	r1, r4
 800502c:	3145      	adds	r1, #69	; 0x45
 800502e:	700a      	strb	r2, [r1, #0]
 8005030:	6819      	ldr	r1, [r3, #0]
 8005032:	6822      	ldr	r2, [r4, #0]
 8005034:	c920      	ldmia	r1!, {r5}
 8005036:	0610      	lsls	r0, r2, #24
 8005038:	d402      	bmi.n	8005040 <_printf_i+0x16c>
 800503a:	0650      	lsls	r0, r2, #25
 800503c:	d500      	bpl.n	8005040 <_printf_i+0x16c>
 800503e:	b2ad      	uxth	r5, r5
 8005040:	6019      	str	r1, [r3, #0]
 8005042:	07d3      	lsls	r3, r2, #31
 8005044:	d502      	bpl.n	800504c <_printf_i+0x178>
 8005046:	2320      	movs	r3, #32
 8005048:	4313      	orrs	r3, r2
 800504a:	6023      	str	r3, [r4, #0]
 800504c:	2710      	movs	r7, #16
 800504e:	2d00      	cmp	r5, #0
 8005050:	d1a9      	bne.n	8004fa6 <_printf_i+0xd2>
 8005052:	2220      	movs	r2, #32
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	4393      	bics	r3, r2
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	e7a4      	b.n	8004fa6 <_printf_i+0xd2>
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	680d      	ldr	r5, [r1, #0]
 8005060:	1d10      	adds	r0, r2, #4
 8005062:	6949      	ldr	r1, [r1, #20]
 8005064:	6018      	str	r0, [r3, #0]
 8005066:	6813      	ldr	r3, [r2, #0]
 8005068:	062e      	lsls	r6, r5, #24
 800506a:	d501      	bpl.n	8005070 <_printf_i+0x19c>
 800506c:	6019      	str	r1, [r3, #0]
 800506e:	e002      	b.n	8005076 <_printf_i+0x1a2>
 8005070:	066d      	lsls	r5, r5, #25
 8005072:	d5fb      	bpl.n	800506c <_printf_i+0x198>
 8005074:	8019      	strh	r1, [r3, #0]
 8005076:	2300      	movs	r3, #0
 8005078:	9e04      	ldr	r6, [sp, #16]
 800507a:	6123      	str	r3, [r4, #16]
 800507c:	e7c0      	b.n	8005000 <_printf_i+0x12c>
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	1d11      	adds	r1, r2, #4
 8005082:	6019      	str	r1, [r3, #0]
 8005084:	6816      	ldr	r6, [r2, #0]
 8005086:	2100      	movs	r1, #0
 8005088:	0030      	movs	r0, r6
 800508a:	6862      	ldr	r2, [r4, #4]
 800508c:	f000 f858 	bl	8005140 <memchr>
 8005090:	2800      	cmp	r0, #0
 8005092:	d001      	beq.n	8005098 <_printf_i+0x1c4>
 8005094:	1b80      	subs	r0, r0, r6
 8005096:	6060      	str	r0, [r4, #4]
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	6123      	str	r3, [r4, #16]
 800509c:	2300      	movs	r3, #0
 800509e:	9a04      	ldr	r2, [sp, #16]
 80050a0:	7013      	strb	r3, [r2, #0]
 80050a2:	e7ad      	b.n	8005000 <_printf_i+0x12c>
 80050a4:	0032      	movs	r2, r6
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	9906      	ldr	r1, [sp, #24]
 80050aa:	9805      	ldr	r0, [sp, #20]
 80050ac:	9d07      	ldr	r5, [sp, #28]
 80050ae:	47a8      	blx	r5
 80050b0:	3001      	adds	r0, #1
 80050b2:	d0af      	beq.n	8005014 <_printf_i+0x140>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d415      	bmi.n	80050e6 <_printf_i+0x212>
 80050ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050bc:	68e0      	ldr	r0, [r4, #12]
 80050be:	4298      	cmp	r0, r3
 80050c0:	daaa      	bge.n	8005018 <_printf_i+0x144>
 80050c2:	0018      	movs	r0, r3
 80050c4:	e7a8      	b.n	8005018 <_printf_i+0x144>
 80050c6:	0022      	movs	r2, r4
 80050c8:	2301      	movs	r3, #1
 80050ca:	9906      	ldr	r1, [sp, #24]
 80050cc:	9805      	ldr	r0, [sp, #20]
 80050ce:	9e07      	ldr	r6, [sp, #28]
 80050d0:	3219      	adds	r2, #25
 80050d2:	47b0      	blx	r6
 80050d4:	3001      	adds	r0, #1
 80050d6:	d09d      	beq.n	8005014 <_printf_i+0x140>
 80050d8:	3501      	adds	r5, #1
 80050da:	68e3      	ldr	r3, [r4, #12]
 80050dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	42ab      	cmp	r3, r5
 80050e2:	dcf0      	bgt.n	80050c6 <_printf_i+0x1f2>
 80050e4:	e7e9      	b.n	80050ba <_printf_i+0x1e6>
 80050e6:	2500      	movs	r5, #0
 80050e8:	e7f7      	b.n	80050da <_printf_i+0x206>
 80050ea:	46c0      	nop			; (mov r8, r8)
 80050ec:	08005331 	.word	0x08005331
 80050f0:	08005342 	.word	0x08005342

080050f4 <memmove>:
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4288      	cmp	r0, r1
 80050f8:	d902      	bls.n	8005100 <memmove+0xc>
 80050fa:	188b      	adds	r3, r1, r2
 80050fc:	4298      	cmp	r0, r3
 80050fe:	d303      	bcc.n	8005108 <memmove+0x14>
 8005100:	2300      	movs	r3, #0
 8005102:	e007      	b.n	8005114 <memmove+0x20>
 8005104:	5c8b      	ldrb	r3, [r1, r2]
 8005106:	5483      	strb	r3, [r0, r2]
 8005108:	3a01      	subs	r2, #1
 800510a:	d2fb      	bcs.n	8005104 <memmove+0x10>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	5ccc      	ldrb	r4, [r1, r3]
 8005110:	54c4      	strb	r4, [r0, r3]
 8005112:	3301      	adds	r3, #1
 8005114:	429a      	cmp	r2, r3
 8005116:	d1fa      	bne.n	800510e <memmove+0x1a>
 8005118:	e7f8      	b.n	800510c <memmove+0x18>
	...

0800511c <_sbrk_r>:
 800511c:	2300      	movs	r3, #0
 800511e:	b570      	push	{r4, r5, r6, lr}
 8005120:	4d06      	ldr	r5, [pc, #24]	; (800513c <_sbrk_r+0x20>)
 8005122:	0004      	movs	r4, r0
 8005124:	0008      	movs	r0, r1
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	f7fb ff8a 	bl	8001040 <_sbrk>
 800512c:	1c43      	adds	r3, r0, #1
 800512e:	d103      	bne.n	8005138 <_sbrk_r+0x1c>
 8005130:	682b      	ldr	r3, [r5, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d000      	beq.n	8005138 <_sbrk_r+0x1c>
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	bd70      	pop	{r4, r5, r6, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	20000384 	.word	0x20000384

08005140 <memchr>:
 8005140:	b2c9      	uxtb	r1, r1
 8005142:	1882      	adds	r2, r0, r2
 8005144:	4290      	cmp	r0, r2
 8005146:	d101      	bne.n	800514c <memchr+0xc>
 8005148:	2000      	movs	r0, #0
 800514a:	4770      	bx	lr
 800514c:	7803      	ldrb	r3, [r0, #0]
 800514e:	428b      	cmp	r3, r1
 8005150:	d0fb      	beq.n	800514a <memchr+0xa>
 8005152:	3001      	adds	r0, #1
 8005154:	e7f6      	b.n	8005144 <memchr+0x4>

08005156 <memcpy>:
 8005156:	2300      	movs	r3, #0
 8005158:	b510      	push	{r4, lr}
 800515a:	429a      	cmp	r2, r3
 800515c:	d100      	bne.n	8005160 <memcpy+0xa>
 800515e:	bd10      	pop	{r4, pc}
 8005160:	5ccc      	ldrb	r4, [r1, r3]
 8005162:	54c4      	strb	r4, [r0, r3]
 8005164:	3301      	adds	r3, #1
 8005166:	e7f8      	b.n	800515a <memcpy+0x4>

08005168 <_realloc_r>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	0007      	movs	r7, r0
 800516c:	000e      	movs	r6, r1
 800516e:	0014      	movs	r4, r2
 8005170:	2900      	cmp	r1, #0
 8005172:	d105      	bne.n	8005180 <_realloc_r+0x18>
 8005174:	0011      	movs	r1, r2
 8005176:	f7ff fc49 	bl	8004a0c <_malloc_r>
 800517a:	0005      	movs	r5, r0
 800517c:	0028      	movs	r0, r5
 800517e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005180:	2a00      	cmp	r2, #0
 8005182:	d103      	bne.n	800518c <_realloc_r+0x24>
 8005184:	f7ff fbd6 	bl	8004934 <_free_r>
 8005188:	0025      	movs	r5, r4
 800518a:	e7f7      	b.n	800517c <_realloc_r+0x14>
 800518c:	f000 f81b 	bl	80051c6 <_malloc_usable_size_r>
 8005190:	9001      	str	r0, [sp, #4]
 8005192:	4284      	cmp	r4, r0
 8005194:	d803      	bhi.n	800519e <_realloc_r+0x36>
 8005196:	0035      	movs	r5, r6
 8005198:	0843      	lsrs	r3, r0, #1
 800519a:	42a3      	cmp	r3, r4
 800519c:	d3ee      	bcc.n	800517c <_realloc_r+0x14>
 800519e:	0021      	movs	r1, r4
 80051a0:	0038      	movs	r0, r7
 80051a2:	f7ff fc33 	bl	8004a0c <_malloc_r>
 80051a6:	1e05      	subs	r5, r0, #0
 80051a8:	d0e8      	beq.n	800517c <_realloc_r+0x14>
 80051aa:	9b01      	ldr	r3, [sp, #4]
 80051ac:	0022      	movs	r2, r4
 80051ae:	429c      	cmp	r4, r3
 80051b0:	d900      	bls.n	80051b4 <_realloc_r+0x4c>
 80051b2:	001a      	movs	r2, r3
 80051b4:	0031      	movs	r1, r6
 80051b6:	0028      	movs	r0, r5
 80051b8:	f7ff ffcd 	bl	8005156 <memcpy>
 80051bc:	0031      	movs	r1, r6
 80051be:	0038      	movs	r0, r7
 80051c0:	f7ff fbb8 	bl	8004934 <_free_r>
 80051c4:	e7da      	b.n	800517c <_realloc_r+0x14>

080051c6 <_malloc_usable_size_r>:
 80051c6:	1f0b      	subs	r3, r1, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1f18      	subs	r0, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	da01      	bge.n	80051d4 <_malloc_usable_size_r+0xe>
 80051d0:	580b      	ldr	r3, [r1, r0]
 80051d2:	18c0      	adds	r0, r0, r3
 80051d4:	4770      	bx	lr
	...

080051d8 <_init>:
 80051d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051de:	bc08      	pop	{r3}
 80051e0:	469e      	mov	lr, r3
 80051e2:	4770      	bx	lr

080051e4 <_fini>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	46c0      	nop			; (mov r8, r8)
 80051e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ea:	bc08      	pop	{r3}
 80051ec:	469e      	mov	lr, r3
 80051ee:	4770      	bx	lr
