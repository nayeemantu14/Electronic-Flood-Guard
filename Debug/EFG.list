
EFG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800508c  0800508c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800508c  0800508c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800508c  0800508c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005090  08005090  00015090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000005c  080050f0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080050f0  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 13 .debug_info   000114ae  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002370  00000000  00000000  00031575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000338e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd9  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015748  00000000  00000000  000353e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f05  00000000  00000000  0004ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a1b8  00000000  00000000  0005ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ba4  00000000  00000000  000e6be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ea78c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f10 	.word	0x08004f10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004f10 	.word	0x08004f10

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <app_main>:
uint16_t measureBattery(void);        		// Function to measure battery voltage
void console(char *log);              		// Function to transmit messages via UART

// Main application function
void app_main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b085      	sub	sp, #20
 8000248:	af00      	add	r7, sp, #0
    // Initialize message buffer with default message
    strcpy(message, "EFloodGuard\r\n");
 800024a:	4b6d      	ldr	r3, [pc, #436]	; (8000400 <app_main+0x1bc>)
 800024c:	4a6d      	ldr	r2, [pc, #436]	; (8000404 <app_main+0x1c0>)
 800024e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000250:	c313      	stmia	r3!, {r0, r1, r4}
 8000252:	8812      	ldrh	r2, [r2, #0]
 8000254:	801a      	strh	r2, [r3, #0]
    // Send initialization message
    console(message);
 8000256:	4b6a      	ldr	r3, [pc, #424]	; (8000400 <app_main+0x1bc>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 f9fb 	bl	8000654 <console>

    // Check if the flood flag is set
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 800025e:	4b6a      	ldr	r3, [pc, #424]	; (8000408 <app_main+0x1c4>)
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	0018      	movs	r0, r3
 8000264:	f002 f862 	bl	800232c <HAL_GPIO_ReadPin>
 8000268:	0003      	movs	r3, r0
 800026a:	2b01      	cmp	r3, #1
 800026c:	d103      	bne.n	8000276 <app_main+0x32>
    {
        floodFlag = 0;
 800026e:	4b67      	ldr	r3, [pc, #412]	; (800040c <app_main+0x1c8>)
 8000270:	2200      	movs	r2, #0
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	e002      	b.n	800027c <app_main+0x38>
    }
    else
    {
        floodFlag = 1;
 8000276:	4b65      	ldr	r3, [pc, #404]	; (800040c <app_main+0x1c8>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
    }
    HAL_Delay(500);
 800027c:	23fa      	movs	r3, #250	; 0xfa
 800027e:	005b      	lsls	r3, r3, #1
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fec3 	bl	800100c <HAL_Delay>
    valve_open = !floodFlag;
 8000286:	4b61      	ldr	r3, [pc, #388]	; (800040c <app_main+0x1c8>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	425a      	negs	r2, r3
 800028e:	4153      	adcs	r3, r2
 8000290:	b2db      	uxtb	r3, r3
 8000292:	001a      	movs	r2, r3
 8000294:	4b5e      	ldr	r3, [pc, #376]	; (8000410 <app_main+0x1cc>)
 8000296:	701a      	strb	r2, [r3, #0]
    alert();
 8000298:	f000 f9c4 	bl	8000624 <alert>
    // Main loop
    while(1)
    {
        // Get current time
        uint32_t now;
        now = HAL_GetTick();
 800029c:	f000 feac 	bl	8000ff8 <HAL_GetTick>
 80002a0:	0003      	movs	r3, r0
 80002a2:	60bb      	str	r3, [r7, #8]

        // Check button hold duration
        if (now - holdTime >= 1500 && buttonState == 1)
 80002a4:	4b5b      	ldr	r3, [pc, #364]	; (8000414 <app_main+0x1d0>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	68ba      	ldr	r2, [r7, #8]
 80002aa:	1ad3      	subs	r3, r2, r3
 80002ac:	4a5a      	ldr	r2, [pc, #360]	; (8000418 <app_main+0x1d4>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d92b      	bls.n	800030a <app_main+0xc6>
 80002b2:	4b5a      	ldr	r3, [pc, #360]	; (800041c <app_main+0x1d8>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2b01      	cmp	r3, #1
 80002ba:	d126      	bne.n	800030a <app_main+0xc6>
        {
        	// Check if the button is pressed and the valve is open
        	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET)
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	019b      	lsls	r3, r3, #6
 80002c0:	4a57      	ldr	r2, [pc, #348]	; (8000420 <app_main+0x1dc>)
 80002c2:	0019      	movs	r1, r3
 80002c4:	0010      	movs	r0, r2
 80002c6:	f002 f831 	bl	800232c <HAL_GPIO_ReadPin>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d119      	bne.n	8000302 <app_main+0xbe>
 80002ce:	4b4e      	ldr	r3, [pc, #312]	; (8000408 <app_main+0x1c4>)
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 f82a 	bl	800232c <HAL_GPIO_ReadPin>
 80002d8:	0003      	movs	r3, r0
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d111      	bne.n	8000302 <app_main+0xbe>
        	{
        		openValve();            // Open the valve
 80002de:	f000 f8e7 	bl	80004b0 <openValve>
        		strcpy(message, "valve open\r\n");
 80002e2:	4b47      	ldr	r3, [pc, #284]	; (8000400 <app_main+0x1bc>)
 80002e4:	4a4f      	ldr	r2, [pc, #316]	; (8000424 <app_main+0x1e0>)
 80002e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002e8:	c313      	stmia	r3!, {r0, r1, r4}
 80002ea:	7812      	ldrb	r2, [r2, #0]
 80002ec:	701a      	strb	r2, [r3, #0]
        		console(message);
 80002ee:	4b44      	ldr	r3, [pc, #272]	; (8000400 <app_main+0x1bc>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f000 f9af 	bl	8000654 <console>
        		floodFlag = 0;          // Clear the flood flag
 80002f6:	4b45      	ldr	r3, [pc, #276]	; (800040c <app_main+0x1c8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
        		buttonState = 0;        // Reset the button state
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <app_main+0x1d8>)
 80002fe:	2200      	movs	r2, #0
 8000300:	701a      	strb	r2, [r3, #0]
        	}
        	holdTime = 0;               // Reset the hold time
 8000302:	4b44      	ldr	r3, [pc, #272]	; (8000414 <app_main+0x1d0>)
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	e007      	b.n	800031a <app_main+0xd6>
        }
        else if(buttonState > 1)
 800030a:	4b44      	ldr	r3, [pc, #272]	; (800041c <app_main+0x1d8>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b01      	cmp	r3, #1
 8000312:	d902      	bls.n	800031a <app_main+0xd6>
        {
        	buttonState = 0;            // Reset button state if it exceeds 2
 8000314:	4b41      	ldr	r3, [pc, #260]	; (800041c <app_main+0x1d8>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
        }

        // Close the valve if the flood flag is set
        if (floodFlag)
 800031a:	4b3c      	ldr	r3, [pc, #240]	; (800040c <app_main+0x1c8>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d035      	beq.n	8000390 <app_main+0x14c>
        {
        	if(valve_open)
 8000324:	4b3a      	ldr	r3, [pc, #232]	; (8000410 <app_main+0x1cc>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	b2db      	uxtb	r3, r3
 800032a:	2b00      	cmp	r3, #0
 800032c:	d01c      	beq.n	8000368 <app_main+0x124>
        	{
        		for(int i=0; i<=1;i++)
 800032e:	2300      	movs	r3, #0
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e007      	b.n	8000344 <app_main+0x100>
        		{
        			closeValve();
 8000334:	f000 f8f4 	bl	8000520 <closeValve>
        			HAL_Delay(5);
 8000338:	2005      	movs	r0, #5
 800033a:	f000 fe67 	bl	800100c <HAL_Delay>
        		for(int i=0; i<=1;i++)
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	3301      	adds	r3, #1
 8000342:	60fb      	str	r3, [r7, #12]
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2b01      	cmp	r3, #1
 8000348:	ddf4      	ble.n	8000334 <app_main+0xf0>
        		}

        		strcpy(message, "valve closed\r\n");
 800034a:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <app_main+0x1bc>)
 800034c:	4a36      	ldr	r2, [pc, #216]	; (8000428 <app_main+0x1e4>)
 800034e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000350:	c313      	stmia	r3!, {r0, r1, r4}
 8000352:	8811      	ldrh	r1, [r2, #0]
 8000354:	8019      	strh	r1, [r3, #0]
 8000356:	7892      	ldrb	r2, [r2, #2]
 8000358:	709a      	strb	r2, [r3, #2]
        		console(message);
 800035a:	4b29      	ldr	r3, [pc, #164]	; (8000400 <app_main+0x1bc>)
 800035c:	0018      	movs	r0, r3
 800035e:	f000 f979 	bl	8000654 <console>
        		alert();
 8000362:	f000 f95f 	bl	8000624 <alert>
 8000366:	e013      	b.n	8000390 <app_main+0x14c>
        	}
        	else
        	{
        		if(now - alert_time > 5000)
 8000368:	4b30      	ldr	r3, [pc, #192]	; (800042c <app_main+0x1e8>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	68ba      	ldr	r2, [r7, #8]
 800036e:	1ad3      	subs	r3, r2, r3
 8000370:	4a2f      	ldr	r2, [pc, #188]	; (8000430 <app_main+0x1ec>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d90c      	bls.n	8000390 <app_main+0x14c>
        		{
                	strcpy(message, "Flood\r\n");
 8000376:	4b22      	ldr	r3, [pc, #136]	; (8000400 <app_main+0x1bc>)
 8000378:	4a2e      	ldr	r2, [pc, #184]	; (8000434 <app_main+0x1f0>)
 800037a:	ca03      	ldmia	r2!, {r0, r1}
 800037c:	c303      	stmia	r3!, {r0, r1}
                	console(message);
 800037e:	4b20      	ldr	r3, [pc, #128]	; (8000400 <app_main+0x1bc>)
 8000380:	0018      	movs	r0, r3
 8000382:	f000 f967 	bl	8000654 <console>
        			alert();
 8000386:	f000 f94d 	bl	8000624 <alert>
        			alert_time = now;
 800038a:	4b28      	ldr	r3, [pc, #160]	; (800042c <app_main+0x1e8>)
 800038c:	68ba      	ldr	r2, [r7, #8]
 800038e:	601a      	str	r2, [r3, #0]
        	}

        }

        // Measure battery voltage periodically
        if (now - last_batt_time > 5000) {
 8000390:	4b29      	ldr	r3, [pc, #164]	; (8000438 <app_main+0x1f4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	1ad3      	subs	r3, r2, r3
 8000398:	4a25      	ldr	r2, [pc, #148]	; (8000430 <app_main+0x1ec>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d912      	bls.n	80003c4 <app_main+0x180>
            uint16_t vBatt = measureBattery();            			// Measure battery voltage
 800039e:	1dbc      	adds	r4, r7, #6
 80003a0:	f000 f8f6 	bl	8000590 <measureBattery>
 80003a4:	0003      	movs	r3, r0
 80003a6:	8023      	strh	r3, [r4, #0]
            sprintf(message, "Battery Voltage = %d\r\n", vBatt); 	// Format battery voltage message
 80003a8:	1dbb      	adds	r3, r7, #6
 80003aa:	881a      	ldrh	r2, [r3, #0]
 80003ac:	4923      	ldr	r1, [pc, #140]	; (800043c <app_main+0x1f8>)
 80003ae:	4b14      	ldr	r3, [pc, #80]	; (8000400 <app_main+0x1bc>)
 80003b0:	0018      	movs	r0, r3
 80003b2:	f004 f907 	bl	80045c4 <siprintf>
            console(message);                             			// Send battery voltage message via UART
 80003b6:	4b12      	ldr	r3, [pc, #72]	; (8000400 <app_main+0x1bc>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 f94b 	bl	8000654 <console>
            last_batt_time = now;                          			// Update last battery reading time
 80003be:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <app_main+0x1f4>)
 80003c0:	68ba      	ldr	r2, [r7, #8]
 80003c2:	601a      	str	r2, [r3, #0]
        }
        // Enter sleep mode after a specific period if no flood is detected
        if(now - sleep_time >= 15000 && !floodFlag)
 80003c4:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <app_main+0x1fc>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	1ad3      	subs	r3, r2, r3
 80003cc:	4a1d      	ldr	r2, [pc, #116]	; (8000444 <app_main+0x200>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d800      	bhi.n	80003d4 <app_main+0x190>
 80003d2:	e763      	b.n	800029c <app_main+0x58>
 80003d4:	4b0d      	ldr	r3, [pc, #52]	; (800040c <app_main+0x1c8>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d000      	beq.n	80003e0 <app_main+0x19c>
 80003de:	e75d      	b.n	800029c <app_main+0x58>
        {
        	strcpy(message, "Entering Sleep\r\n");
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <app_main+0x1bc>)
 80003e2:	4a19      	ldr	r2, [pc, #100]	; (8000448 <app_main+0x204>)
 80003e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003e6:	c313      	stmia	r3!, {r0, r1, r4}
 80003e8:	6811      	ldr	r1, [r2, #0]
 80003ea:	6019      	str	r1, [r3, #0]
 80003ec:	7912      	ldrb	r2, [r2, #4]
 80003ee:	711a      	strb	r2, [r3, #4]
        	console(message);
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <app_main+0x1bc>)
 80003f2:	0018      	movs	r0, r3
 80003f4:	f000 f92e 	bl	8000654 <console>
        	HAL_PWR_EnableSleepOnExit();   // Enable sleep mode
 80003f8:	f002 f806 	bl	8002408 <HAL_PWR_EnableSleepOnExit>
    {
 80003fc:	e74e      	b.n	800029c <app_main+0x58>
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	20000078 	.word	0x20000078
 8000404:	08004f28 	.word	0x08004f28
 8000408:	50000400 	.word	0x50000400
 800040c:	200000a1 	.word	0x200000a1
 8000410:	200000a0 	.word	0x200000a0
 8000414:	200000a4 	.word	0x200000a4
 8000418:	000005db 	.word	0x000005db
 800041c:	200000a2 	.word	0x200000a2
 8000420:	50000800 	.word	0x50000800
 8000424:	08004f38 	.word	0x08004f38
 8000428:	08004f48 	.word	0x08004f48
 800042c:	200000b0 	.word	0x200000b0
 8000430:	00001388 	.word	0x00001388
 8000434:	08004f58 	.word	0x08004f58
 8000438:	200000a8 	.word	0x200000a8
 800043c:	08004f60 	.word	0x08004f60
 8000440:	200000ac 	.word	0x200000ac
 8000444:	00003a97 	.word	0x00003a97
 8000448:	08004f78 	.word	0x08004f78

0800044c <HAL_GPIO_EXTI_Falling_Callback>:
    }
}

// GPIO EXTI interrupt callback
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	0002      	movs	r2, r0
 8000454:	1dbb      	adds	r3, r7, #6
 8000456:	801a      	strh	r2, [r3, #0]
    HAL_PWR_DisableSleepOnExit();      	// Disable sleep mode
 8000458:	f001 ffe4 	bl	8002424 <HAL_PWR_DisableSleepOnExit>
    sleep_time = HAL_GetTick();         // Update sleep time
 800045c:	f000 fdcc 	bl	8000ff8 <HAL_GetTick>
 8000460:	0002      	movs	r2, r0
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 8000464:	601a      	str	r2, [r3, #0]

    // Handle button press
    if(GPIO_Pin == GPIO_PIN_13)
 8000466:	1dbb      	adds	r3, r7, #6
 8000468:	881a      	ldrh	r2, [r3, #0]
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	019b      	lsls	r3, r3, #6
 800046e:	429a      	cmp	r2, r3
 8000470:	d10b      	bne.n	800048a <HAL_GPIO_EXTI_Falling_Callback+0x3e>
    {
        buttonState++;      			// Increment button state
 8000472:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	3301      	adds	r3, #1
 800047a:	b2da      	uxtb	r2, r3
 800047c:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 800047e:	701a      	strb	r2, [r3, #0]
        holdTime = HAL_GetTick(); 		// Record button hold time
 8000480:	f000 fdba 	bl	8000ff8 <HAL_GetTick>
 8000484:	0002      	movs	r2, r0
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8000488:	601a      	str	r2, [r3, #0]
    }
    // Handle flood flag
    if(GPIO_Pin == GPIO_PIN_6)
 800048a:	1dbb      	adds	r3, r7, #6
 800048c:	881b      	ldrh	r3, [r3, #0]
 800048e:	2b40      	cmp	r3, #64	; 0x40
 8000490:	d102      	bne.n	8000498 <HAL_GPIO_EXTI_Falling_Callback+0x4c>
    {
        floodFlag = 1; // Set flood flag
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_GPIO_EXTI_Falling_Callback+0x60>)
 8000494:	2201      	movs	r2, #1
 8000496:	701a      	strb	r2, [r3, #0]
    }
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	200000ac 	.word	0x200000ac
 80004a4:	200000a2 	.word	0x200000a2
 80004a8:	200000a4 	.word	0x200000a4
 80004ac:	200000a1 	.word	0x200000a1

080004b0 <openValve>:

// Function to open the valve
void openValve()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	0099      	lsls	r1, r3, #2
 80004b8:	23a0      	movs	r3, #160	; 0xa0
 80004ba:	05db      	lsls	r3, r3, #23
 80004bc:	2201      	movs	r2, #1
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 ff51 	bl	8002366 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <openValve+0x64>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	0018      	movs	r0, r3
 80004ca:	f002 fca7 	bl	8002e1c <HAL_TIM_PWM_Start>
    HAL_Delay(5);
 80004ce:	2005      	movs	r0, #5
 80004d0:	f000 fd9c 	bl	800100c <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1100);   	// Set PWM duty cycle for valve opening
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <openValve+0x64>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	; (8000518 <openValve+0x68>)
 80004da:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(5);
 80004dc:	2005      	movs	r0, #5
 80004de:	f000 fd95 	bl	800100c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <openValve+0x64>)
 80004e4:	2100      	movs	r1, #0
 80004e6:	0018      	movs	r0, r3
 80004e8:	f002 fd70 	bl	8002fcc <HAL_TIM_PWM_Stop>
    HAL_Delay(500);
 80004ec:	23fa      	movs	r3, #250	; 0xfa
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fd8b 	bl	800100c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 80004f6:	2380      	movs	r3, #128	; 0x80
 80004f8:	0099      	lsls	r1, r3, #2
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	2200      	movs	r2, #0
 8000500:	0018      	movs	r0, r3
 8000502:	f001 ff30 	bl	8002366 <HAL_GPIO_WritePin>
    valve_open = 1;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <openValve+0x6c>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000118 	.word	0x20000118
 8000518:	0000044c 	.word	0x0000044c
 800051c:	200000a0 	.word	0x200000a0

08000520 <closeValve>:

// Function to close the valve
void closeValve()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);    	// Activate valve
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	0099      	lsls	r1, r3, #2
 8000528:	23a0      	movs	r3, #160	; 0xa0
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2201      	movs	r2, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f001 ff19 	bl	8002366 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);             	// Start PWM signal for valve control
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <closeValve+0x64>)
 8000536:	2100      	movs	r1, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f002 fc6f 	bl	8002e1c <HAL_TIM_PWM_Start>
    HAL_Delay(5);
 800053e:	2005      	movs	r0, #5
 8000540:	f000 fd64 	bl	800100c <HAL_Delay>
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2050);   	// Set PWM duty cycle for valve closing
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <closeValve+0x64>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <closeValve+0x68>)
 800054a:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_Delay(5);
 800054c:	2005      	movs	r0, #5
 800054e:	f000 fd5d 	bl	800100c <HAL_Delay>
    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);              	// Stop PWM signal
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <closeValve+0x64>)
 8000554:	2100      	movs	r1, #0
 8000556:	0018      	movs	r0, r3
 8000558:	f002 fd38 	bl	8002fcc <HAL_TIM_PWM_Stop>
    HAL_Delay(500);
 800055c:	23fa      	movs	r3, #250	; 0xfa
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	0018      	movs	r0, r3
 8000562:	f000 fd53 	bl	800100c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);  	// Deactivate valve
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	0099      	lsls	r1, r3, #2
 800056a:	23a0      	movs	r3, #160	; 0xa0
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	2200      	movs	r2, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fef8 	bl	8002366 <HAL_GPIO_WritePin>
    valve_open = 0;
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <closeValve+0x6c>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	20000118 	.word	0x20000118
 8000588:	00000802 	.word	0x00000802
 800058c:	200000a0 	.word	0x200000a0

08000590 <measureBattery>:

// Function to measure battery voltage
uint16_t measureBattery(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);           	// Enable battery voltage measurement
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	481f      	ldr	r0, [pc, #124]	; (8000618 <measureBattery+0x88>)
 800059c:	2201      	movs	r2, #1
 800059e:	0019      	movs	r1, r3
 80005a0:	f001 fee1 	bl	8002366 <HAL_GPIO_WritePin>
    HAL_ADC_Start(&hadc1);                                	// Start ADC conversion
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <measureBattery+0x8c>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 f864 	bl	8001674 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1000);              	// Wait for ADC conversion to complete
 80005ac:	23fa      	movs	r3, #250	; 0xfa
 80005ae:	009a      	lsls	r2, r3, #2
 80005b0:	4b1a      	ldr	r3, [pc, #104]	; (800061c <measureBattery+0x8c>)
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 f8e7 	bl	8001788 <HAL_ADC_PollForConversion>
    uint16_t analogbatt = HAL_ADC_GetValue(&hadc1);       	// Read ADC value
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <measureBattery+0x8c>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f971 	bl	80018a4 <HAL_ADC_GetValue>
 80005c2:	0002      	movs	r2, r0
 80005c4:	1dbb      	adds	r3, r7, #6
 80005c6:	801a      	strh	r2, [r3, #0]
    HAL_Delay(5);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f000 fd1f 	bl	800100c <HAL_Delay>
    HAL_ADC_Stop(&hadc1);                                 	// Stop ADC conversion
 80005ce:	4b13      	ldr	r3, [pc, #76]	; (800061c <measureBattery+0x8c>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 f89d 	bl	8001710 <HAL_ADC_Stop>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);         	// Disable battery voltage measurement
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	480f      	ldr	r0, [pc, #60]	; (8000618 <measureBattery+0x88>)
 80005dc:	2200      	movs	r2, #0
 80005de:	0019      	movs	r1, r3
 80005e0:	f001 fec1 	bl	8002366 <HAL_GPIO_WritePin>

    // Check battery voltage threshold
    if(analogbatt < 2500)
 80005e4:	1dbb      	adds	r3, r7, #6
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <measureBattery+0x90>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d80e      	bhi.n	800060c <measureBattery+0x7c>
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);        	// Trigger alert if battery voltage is below threshold
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <measureBattery+0x88>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	2180      	movs	r1, #128	; 0x80
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 feb6 	bl	8002366 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 80005fa:	20c8      	movs	r0, #200	; 0xc8
 80005fc:	f000 fd06 	bl	800100c <HAL_Delay>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <measureBattery+0x88>)
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fead 	bl	8002366 <HAL_GPIO_WritePin>
    }
    return analogbatt;  // Return battery voltage reading
 800060c:	1dbb      	adds	r3, r7, #6
 800060e:	881b      	ldrh	r3, [r3, #0]
}
 8000610:	0018      	movs	r0, r3
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	50000400 	.word	0x50000400
 800061c:	200000b4 	.word	0x200000b4
 8000620:	000009c3 	.word	0x000009c3

08000624 <alert>:

void alert(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000628:	23a0      	movs	r3, #160	; 0xa0
 800062a:	05db      	lsls	r3, r3, #23
 800062c:	2201      	movs	r2, #1
 800062e:	2120      	movs	r1, #32
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fe98 	bl	8002366 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fce6 	bl	800100c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2200      	movs	r2, #0
 8000646:	2120      	movs	r1, #32
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fe8c 	bl	8002366 <HAL_GPIO_WritePin>
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <console>:

// Function to transmit messages via UART
void console(char *log)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)log, strlen(log), HAL_MAX_DELAY);  // Transmit message via UART
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff fd52 	bl	8000108 <strlen>
 8000664:	0003      	movs	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	2301      	movs	r3, #1
 800066a:	425b      	negs	r3, r3
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	480a      	ldr	r0, [pc, #40]	; (8000698 <console+0x44>)
 8000670:	f003 fb58 	bl	8003d24 <HAL_UART_Transmit>
    HAL_Delay(10);
 8000674:	200a      	movs	r0, #10
 8000676:	f000 fcc9 	bl	800100c <HAL_Delay>
    memset(log, '\0', strlen(log));  // Clear message buffer
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff fd43 	bl	8000108 <strlen>
 8000682:	0002      	movs	r2, r0
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f003 ffbb 	bl	8004604 <memset>
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	200001b0 	.word	0x200001b0

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a0:	f000 fc37 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a4:	f000 f80d 	bl	80006c2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a8:	f000 f97c 	bl	80009a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80006ac:	f000 f8ba 	bl	8000824 <MX_TIM3_Init>
  MX_ADC1_Init();
 80006b0:	f000 f84c 	bl	800074c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006b4:	f000 f942 	bl	800093c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80006b8:	f000 f916 	bl	80008e8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 80006bc:	f7ff fdc2 	bl	8000244 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <main+0x24>

080006c2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c2:	b590      	push	{r4, r7, lr}
 80006c4:	b08d      	sub	sp, #52	; 0x34
 80006c6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c8:	2414      	movs	r4, #20
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	0018      	movs	r0, r3
 80006ce:	231c      	movs	r3, #28
 80006d0:	001a      	movs	r2, r3
 80006d2:	2100      	movs	r1, #0
 80006d4:	f003 ff96 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	003b      	movs	r3, r7
 80006da:	0018      	movs	r0, r3
 80006dc:	2314      	movs	r3, #20
 80006de:	001a      	movs	r2, r3
 80006e0:	2100      	movs	r1, #0
 80006e2:	f003 ff8f 	bl	8004604 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2202      	movs	r2, #2
 80006ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	0052      	lsls	r2, r2, #1
 80006f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0152      	lsls	r2, r2, #5
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2240      	movs	r2, #64	; 0x40
 8000700:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	193b      	adds	r3, r7, r4
 8000704:	0018      	movs	r0, r3
 8000706:	f001 fe9b 	bl	8002440 <HAL_RCC_OscConfig>
 800070a:	1e03      	subs	r3, r0, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800070e:	f000 f9f7 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	003b      	movs	r3, r7
 8000714:	2207      	movs	r2, #7
 8000716:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000718:	003b      	movs	r3, r7
 800071a:	2200      	movs	r2, #0
 800071c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	003b      	movs	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000724:	003b      	movs	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800072a:	003b      	movs	r3, r7
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	003b      	movs	r3, r7
 8000732:	2100      	movs	r1, #0
 8000734:	0018      	movs	r0, r3
 8000736:	f002 f867 	bl	8002808 <HAL_RCC_ClockConfig>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800073e:	f000 f9df 	bl	8000b00 <Error_Handler>
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00d      	add	sp, #52	; 0x34
 8000748:	bd90      	pop	{r4, r7, pc}
	...

0800074c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	0018      	movs	r0, r3
 8000756:	230c      	movs	r3, #12
 8000758:	001a      	movs	r2, r3
 800075a:	2100      	movs	r1, #0
 800075c:	f003 ff52 	bl	8004604 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000760:	4b2d      	ldr	r3, [pc, #180]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000762:	4a2e      	ldr	r2, [pc, #184]	; (800081c <MX_ADC1_Init+0xd0>)
 8000764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000766:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000768:	22c0      	movs	r2, #192	; 0xc0
 800076a:	0612      	lsls	r2, r2, #24
 800076c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000774:	4b28      	ldr	r3, [pc, #160]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_ADC1_Init+0xcc>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000780:	4b25      	ldr	r3, [pc, #148]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000782:	2204      	movs	r2, #4
 8000784:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_ADC1_Init+0xcc>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000794:	2200      	movs	r2, #0
 8000796:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000798:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_ADC1_Init+0xcc>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007a0:	2220      	movs	r2, #32
 80007a2:	2100      	movs	r1, #0
 80007a4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007b4:	222c      	movs	r2, #44	; 0x2c
 80007b6:	2100      	movs	r1, #0
 80007b8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007bc:	2200      	movs	r2, #0
 80007be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007ce:	223c      	movs	r2, #60	; 0x3c
 80007d0:	2100      	movs	r1, #0
 80007d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_ADC1_Init+0xcc>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 fda3 	bl	8001328 <HAL_ADC_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80007e6:	f000 f98b 	bl	8000b00 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <MX_ADC1_Init+0xd4>)
 80007ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <MX_ADC1_Init+0xcc>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f001 f85a 	bl	80018bc <HAL_ADC_ConfigChannel>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 800080c:	f000 f978 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b004      	add	sp, #16
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200000b4 	.word	0x200000b4
 800081c:	40012400 	.word	0x40012400
 8000820:	30001000 	.word	0x30001000

08000824 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	231c      	movs	r3, #28
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	230c      	movs	r3, #12
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f003 fee5 	bl	8004604 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	003b      	movs	r3, r7
 800083c:	0018      	movs	r0, r3
 800083e:	231c      	movs	r3, #28
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f003 fede 	bl	8004604 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_TIM3_Init+0xb8>)
 800084a:	4a25      	ldr	r2, [pc, #148]	; (80008e0 <MX_TIM3_Init+0xbc>)
 800084c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 12;
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_TIM3_Init+0xb8>)
 8000850:	220c      	movs	r2, #12
 8000852:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000854:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_TIM3_Init+0xb8>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2100;
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_TIM3_Init+0xb8>)
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_TIM3_Init+0xc0>)
 800085e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_TIM3_Init+0xb8>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_TIM3_Init+0xb8>)
 8000868:	2280      	movs	r2, #128	; 0x80
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_TIM3_Init+0xb8>)
 800086e:	0018      	movs	r0, r3
 8000870:	f002 fa7c 	bl	8002d6c <HAL_TIM_PWM_Init>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000878:	f000 f942 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	211c      	movs	r1, #28
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800088a:	187a      	adds	r2, r7, r1
 800088c:	4b13      	ldr	r3, [pc, #76]	; (80008dc <MX_TIM3_Init+0xb8>)
 800088e:	0011      	movs	r1, r2
 8000890:	0018      	movs	r0, r3
 8000892:	f003 f977 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8000896:	1e03      	subs	r3, r0, #0
 8000898:	d001      	beq.n	800089e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800089a:	f000 f931 	bl	8000b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089e:	003b      	movs	r3, r7
 80008a0:	2260      	movs	r2, #96	; 0x60
 80008a2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	0039      	movs	r1, r7
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_TIM3_Init+0xb8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 fd0d 	bl	80032dc <HAL_TIM_PWM_ConfigChannel>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80008c6:	f000 f91b 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <MX_TIM3_Init+0xb8>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 f9eb 	bl	8000ca8 <HAL_TIM_MspPostInit>

}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b00a      	add	sp, #40	; 0x28
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	20000118 	.word	0x20000118
 80008e0:	40000400 	.word	0x40000400
 80008e4:	00000834 	.word	0x00000834

080008e8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_TIM16_Init+0x44>)
 80008ee:	4a10      	ldr	r2, [pc, #64]	; (8000930 <MX_TIM16_Init+0x48>)
 80008f0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 551;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <MX_TIM16_Init+0x44>)
 80008f4:	4a0f      	ldr	r2, [pc, #60]	; (8000934 <MX_TIM16_Init+0x4c>)
 80008f6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_TIM16_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65216;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_TIM16_Init+0x44>)
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <MX_TIM16_Init+0x50>)
 8000902:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_TIM16_Init+0x44>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800090a:	4b08      	ldr	r3, [pc, #32]	; (800092c <MX_TIM16_Init+0x44>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_TIM16_Init+0x44>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <MX_TIM16_Init+0x44>)
 8000918:	0018      	movs	r0, r3
 800091a:	f002 f9cf 	bl	8002cbc <HAL_TIM_Base_Init>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000922:	f000 f8ed 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000164 	.word	0x20000164
 8000930:	40014400 	.word	0x40014400
 8000934:	00000227 	.word	0x00000227
 8000938:	0000fec0 	.word	0x0000fec0

0800093c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000940:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_USART2_UART_Init+0x64>)
 8000944:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000948:	22e1      	movs	r2, #225	; 0xe1
 800094a:	0252      	lsls	r2, r2, #9
 800094c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_USART2_UART_Init+0x60>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART2_UART_Init+0x60>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART2_UART_Init+0x60>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_USART2_UART_Init+0x60>)
 8000986:	0018      	movs	r0, r3
 8000988:	f003 f976 	bl	8003c78 <HAL_UART_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000990:	f000 f8b6 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	200001b0 	.word	0x200001b0
 80009a0:	40004400 	.word	0x40004400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	240c      	movs	r4, #12
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2314      	movs	r3, #20
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fe25 	bl	8004604 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b4b      	ldr	r3, [pc, #300]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009c0:	2104      	movs	r1, #4
 80009c2:	430a      	orrs	r2, r1
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
 80009c6:	4b48      	ldr	r3, [pc, #288]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ca:	2204      	movs	r2, #4
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b45      	ldr	r3, [pc, #276]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d6:	4b44      	ldr	r3, [pc, #272]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009d8:	2101      	movs	r1, #1
 80009da:	430a      	orrs	r2, r1
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
 80009de:	4b42      	ldr	r3, [pc, #264]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	2201      	movs	r2, #1
 80009e4:	4013      	ands	r3, r2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b3f      	ldr	r3, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009ee:	4b3e      	ldr	r3, [pc, #248]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009f0:	2102      	movs	r1, #2
 80009f2:	430a      	orrs	r2, r1
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
 80009f6:	4b3c      	ldr	r3, [pc, #240]	; (8000ae8 <MX_GPIO_Init+0x144>)
 80009f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009fa:	2202      	movs	r2, #2
 80009fc:	4013      	ands	r3, r2
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a02:	2388      	movs	r3, #136	; 0x88
 8000a04:	0099      	lsls	r1, r3, #2
 8000a06:	23a0      	movs	r3, #160	; 0xa0
 8000a08:	05db      	lsls	r3, r3, #23
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fcaa 	bl	8002366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000a12:	4936      	ldr	r1, [pc, #216]	; (8000aec <MX_GPIO_Init+0x148>)
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fca4 	bl	8002366 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0192      	lsls	r2, r2, #6
 8000a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2201      	movs	r2, #1
 8000a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <MX_GPIO_Init+0x154>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f001 fb05 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2288      	movs	r2, #136	; 0x88
 8000a44:	0092      	lsls	r2, r2, #2
 8000a46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	000c      	movs	r4, r1
 8000a4a:	193b      	adds	r3, r7, r4
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	193b      	adds	r3, r7, r4
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	193a      	adds	r2, r7, r4
 8000a5e:	23a0      	movs	r3, #160	; 0xa0
 8000a60:	05db      	lsls	r3, r3, #23
 8000a62:	0011      	movs	r1, r2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f001 faef 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <MX_GPIO_Init+0x148>)
 8000a6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2201      	movs	r2, #1
 8000a74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000a86:	0019      	movs	r1, r3
 8000a88:	0010      	movs	r0, r2
 8000a8a:	f001 fadd 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0212      	lsls	r2, r2, #8
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_GPIO_Init+0x158>)
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa2:	193a      	adds	r2, r7, r4
 8000aa4:	23a0      	movs	r3, #160	; 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 facc 	bl	8002048 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	4a0e      	ldr	r2, [pc, #56]	; (8000af4 <MX_GPIO_Init+0x150>)
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	4a0a      	ldr	r2, [pc, #40]	; (8000af0 <MX_GPIO_Init+0x14c>)
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	0010      	movs	r0, r2
 8000aca:	f001 fabd 	bl	8002048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2007      	movs	r0, #7
 8000ad4:	f001 fa86 	bl	8001fe4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ad8:	2007      	movs	r0, #7
 8000ada:	f001 fa98 	bl	800200e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b009      	add	sp, #36	; 0x24
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	00008380 	.word	0x00008380
 8000af0:	50000400 	.word	0x50000400
 8000af4:	10210000 	.word	0x10210000
 8000af8:	50000800 	.word	0x50000800
 8000afc:	10110000 	.word	0x10110000

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x44>)
 8000b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_MspInit+0x44>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x44>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	2201      	movs	r2, #1
 8000b24:	4013      	ands	r3, r2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x44>)
 8000b2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_MspInit+0x44>)
 8000b30:	2180      	movs	r1, #128	; 0x80
 8000b32:	0549      	lsls	r1, r1, #21
 8000b34:	430a      	orrs	r2, r1
 8000b36:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_MspInit+0x44>)
 8000b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	055b      	lsls	r3, r3, #21
 8000b40:	4013      	ands	r3, r2
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b091      	sub	sp, #68	; 0x44
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	232c      	movs	r3, #44	; 0x2c
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f003 fd4c 	bl	8004604 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	2410      	movs	r4, #16
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	0018      	movs	r0, r3
 8000b72:	231c      	movs	r3, #28
 8000b74:	001a      	movs	r2, r3
 8000b76:	2100      	movs	r1, #0
 8000b78:	f003 fd44 	bl	8004604 <memset>
  if(hadc->Instance==ADC1)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a20      	ldr	r2, [pc, #128]	; (8000c04 <HAL_ADC_MspInit+0xb0>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d13a      	bne.n	8000bfc <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	01d2      	lsls	r2, r2, #7
 8000b8c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 ffa2 	bl	8002ae0 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ba0:	f7ff ffae 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	0349      	lsls	r1, r1, #13
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	035b      	lsls	r3, r3, #13
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc4:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0xb4>)
 8000bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA12 [PA10]     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000bd8:	212c      	movs	r1, #44	; 0x2c
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	0152      	lsls	r2, r2, #5
 8000be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2203      	movs	r2, #3
 8000be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	23a0      	movs	r3, #160	; 0xa0
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	0011      	movs	r1, r2
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fa26 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b011      	add	sp, #68	; 0x44
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	40012400 	.word	0x40012400
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_TIM_PWM_MspInit+0x44>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d113      	bne.n	8000c46 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_TIM_PWM_MspInit+0x48>)
 8000c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c22:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <HAL_TIM_PWM_MspInit+0x48>)
 8000c24:	2102      	movs	r1, #2
 8000c26:	430a      	orrs	r2, r1
 8000c28:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_TIM_PWM_MspInit+0x48>)
 8000c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c2e:	2202      	movs	r2, #2
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	2010      	movs	r0, #16
 8000c3c:	f001 f9d2 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c40:	2010      	movs	r0, #16
 8000c42:	f001 f9e4 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b004      	add	sp, #16
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40000400 	.word	0x40000400
 8000c54:	40021000 	.word	0x40021000

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d115      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0289      	lsls	r1, r1, #10
 8000c74:	430a      	orrs	r2, r1
 8000c76:	641a      	str	r2, [r3, #64]	; 0x40
 8000c78:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_TIM_Base_MspInit+0x4c>)
 8000c7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2015      	movs	r0, #21
 8000c8c:	f001 f9aa 	bl	8001fe4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c90:	2015      	movs	r0, #21
 8000c92:	f001 f9bc 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b004      	add	sp, #16
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	40014400 	.word	0x40014400
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	240c      	movs	r4, #12
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	2314      	movs	r3, #20
 8000cb8:	001a      	movs	r2, r3
 8000cba:	2100      	movs	r1, #0
 8000cbc:	f003 fca2 	bl	8004604 <memset>
  if(htim->Instance==TIM3)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a14      	ldr	r2, [pc, #80]	; (8000d18 <HAL_TIM_MspPostInit+0x70>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d121      	bne.n	8000d0e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <HAL_TIM_MspPostInit+0x74>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <HAL_TIM_MspPostInit+0x74>)
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_TIM_MspPostInit+0x74>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	2204      	movs	r2, #4
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	2202      	movs	r2, #2
 8000cee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2201      	movs	r2, #1
 8000d00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_TIM_MspPostInit+0x78>)
 8000d06:	0019      	movs	r1, r3
 8000d08:	0010      	movs	r0, r2
 8000d0a:	f001 f99d 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46bd      	mov	sp, r7
 8000d12:	b009      	add	sp, #36	; 0x24
 8000d14:	bd90      	pop	{r4, r7, pc}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	50000800 	.word	0x50000800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	2414      	movs	r4, #20
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f003 fc64 	bl	8004604 <memset>
  if(huart->Instance==USART2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1b      	ldr	r2, [pc, #108]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d130      	bne.n	8000da8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d4c:	2180      	movs	r1, #128	; 0x80
 8000d4e:	0289      	lsls	r1, r1, #10
 8000d50:	430a      	orrs	r2, r1
 8000d52:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	029b      	lsls	r3, r3, #10
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d68:	2101      	movs	r1, #1
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x90>)
 8000d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d72:	2201      	movs	r2, #1
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2200      	movs	r2, #0
 8000d92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2201      	movs	r2, #1
 8000d98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	187a      	adds	r2, r7, r1
 8000d9c:	23a0      	movs	r3, #160	; 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 f950 	bl	8002048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b00b      	add	sp, #44	; 0x2c
 8000dae:	bd90      	pop	{r4, r7, pc}
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40021000 	.word	0x40021000

08000db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dbc:	e7fe      	b.n	8000dbc <NMI_Handler+0x4>

08000dbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc2:	e7fe      	b.n	8000dc2 <HardFault_Handler+0x4>

08000dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8fa 	bl	8000fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000dea:	2040      	movs	r0, #64	; 0x40
 8000dec:	f001 fad8 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	019b      	lsls	r3, r3, #6
 8000df4:	0018      	movs	r0, r3
 8000df6:	f001 fad3 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 face 	bl	80023a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e04:	46c0      	nop			; (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <TIM3_IRQHandler+0x14>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f002 f960 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	20000118 	.word	0x20000118

08000e24 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <TIM16_IRQHandler+0x14>)
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f002 f954 	bl	80030d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e30:	46c0      	nop			; (mov r8, r8)
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	20000164 	.word	0x20000164

08000e3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <_sbrk+0x5c>)
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <_sbrk+0x60>)
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d102      	bne.n	8000e5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x64>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <_sbrk+0x68>)
 8000e5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <_sbrk+0x64>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	18d3      	adds	r3, r2, r3
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d207      	bcs.n	8000e7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e6c:	f003 fbd2 	bl	8004614 <__errno>
 8000e70:	0003      	movs	r3, r0
 8000e72:	220c      	movs	r2, #12
 8000e74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	425b      	negs	r3, r3
 8000e7a:	e009      	b.n	8000e90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <_sbrk+0x64>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e82:	4b07      	ldr	r3, [pc, #28]	; (8000ea0 <_sbrk+0x64>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	18d2      	adds	r2, r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <_sbrk+0x64>)
 8000e8c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	0018      	movs	r0, r3
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b006      	add	sp, #24
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20003000 	.word	0x20003000
 8000e9c:	00000400 	.word	0x00000400
 8000ea0:	20000244 	.word	0x20000244
 8000ea4:	20000398 	.word	0x20000398

08000ea8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <SystemInit+0x14>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0512      	lsls	r2, r2, #20
 8000eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ec2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec4:	f7ff fff0 	bl	8000ea8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ec8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000eca:	e003      	b.n	8000ed4 <LoopCopyDataInit>

08000ecc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000ece:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ed0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ed2:	3104      	adds	r1, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ed4:	480a      	ldr	r0, [pc, #40]	; (8000f00 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ed8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000edc:	d3f6      	bcc.n	8000ecc <CopyDataInit>
  ldr r2, =_sbss
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <LoopForever+0x12>)
  b LoopFillZerobss
 8000ee0:	e002      	b.n	8000ee8 <LoopFillZerobss>

08000ee2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ee2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ee4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee6:	3204      	adds	r2, #4

08000ee8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ee8:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <LoopForever+0x16>)
  cmp r2, r3
 8000eea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000eec:	d3f9      	bcc.n	8000ee2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000eee:	f003 fb97 	bl	8004620 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef2:	f7ff fbd3 	bl	800069c <main>

08000ef6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef6:	e7fe      	b.n	8000ef6 <LoopForever>
  ldr   r0, =_estack
 8000ef8:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000efc:	08005094 	.word	0x08005094
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f04:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8000f08:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8000f0c:	20000394 	.word	0x20000394

08000f10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_IRQHandler>

08000f12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f18:	1dfb      	adds	r3, r7, #7
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f80e 	bl	8000f40 <HAL_InitTick>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d003      	beq.n	8000f30 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	701a      	strb	r2, [r3, #0]
 8000f2e:	e001      	b.n	8000f34 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f30:	f7ff fdec 	bl	8000b0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f34:	1dfb      	adds	r3, r7, #7
 8000f36:	781b      	ldrb	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b002      	add	sp, #8
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f48:	230f      	movs	r3, #15
 8000f4a:	18fb      	adds	r3, r7, r3
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_InitTick+0x88>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d02b      	beq.n	8000fb0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_InitTick+0x8c>)
 8000f5a:	681c      	ldr	r4, [r3, #0]
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <HAL_InitTick+0x88>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0019      	movs	r1, r3
 8000f62:	23fa      	movs	r3, #250	; 0xfa
 8000f64:	0098      	lsls	r0, r3, #2
 8000f66:	f7ff f8e1 	bl	800012c <__udivsi3>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f7ff f8dc 	bl	800012c <__udivsi3>
 8000f74:	0003      	movs	r3, r0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f001 f859 	bl	800202e <HAL_SYSTICK_Config>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d112      	bne.n	8000fa6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d80a      	bhi.n	8000f9c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f001 f828 	bl	8001fe4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x90>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	e00d      	b.n	8000fb8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	18fb      	adds	r3, r7, r3
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e008      	b.n	8000fb8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
 8000fae:	e003      	b.n	8000fb8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fb8:	230f      	movs	r3, #15
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	781b      	ldrb	r3, [r3, #0]
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b005      	add	sp, #20
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000000 	.word	0x20000000
 8000fd0:	20000004 	.word	0x20000004

08000fd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <HAL_IncTick+0x1c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	001a      	movs	r2, r3
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	18d2      	adds	r2, r2, r3
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <HAL_IncTick+0x20>)
 8000fe6:	601a      	str	r2, [r3, #0]
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	20000248 	.word	0x20000248

08000ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8000ffc:	4b02      	ldr	r3, [pc, #8]	; (8001008 <HAL_GetTick+0x10>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	0018      	movs	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	20000248 	.word	0x20000248

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff fff0 	bl	8000ff8 <HAL_GetTick>
 8001018:	0003      	movs	r3, r0
 800101a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	001a      	movs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	189b      	adds	r3, r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	f7ff ffe0 	bl	8000ff8 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000008 	.word	0x20000008

08001054 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001064:	401a      	ands	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	ff3fffff 	.word	0xff3fffff

0800107c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	23c0      	movs	r3, #192	; 0xc0
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	4013      	ands	r3, r2
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	2104      	movs	r1, #4
 80010aa:	400a      	ands	r2, r1
 80010ac:	2107      	movs	r1, #7
 80010ae:	4091      	lsls	r1, r2
 80010b0:	000a      	movs	r2, r1
 80010b2:	43d2      	mvns	r2, r2
 80010b4:	401a      	ands	r2, r3
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	2104      	movs	r1, #4
 80010ba:	400b      	ands	r3, r1
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4099      	lsls	r1, r3
 80010c0:	000b      	movs	r3, r1
 80010c2:	431a      	orrs	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80010c8:	46c0      	nop			; (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b004      	add	sp, #16
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	2104      	movs	r1, #4
 80010e2:	400a      	ands	r2, r1
 80010e4:	2107      	movs	r1, #7
 80010e6:	4091      	lsls	r1, r2
 80010e8:	000a      	movs	r2, r1
 80010ea:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2104      	movs	r1, #4
 80010f0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	0013      	movs	r3, r2
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}

080010fe <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	23c0      	movs	r3, #192	; 0xc0
 800110c:	011b      	lsls	r3, r3, #4
 800110e:	4013      	ands	r3, r2
 8001110:	d101      	bne.n	8001116 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001112:	2301      	movs	r3, #1
 8001114:	e000      	b.n	8001118 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001116:	2300      	movs	r3, #0
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b002      	add	sp, #8
 800111e:	bd80      	pop	{r7, pc}

08001120 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	211f      	movs	r1, #31
 8001134:	400a      	ands	r2, r1
 8001136:	210f      	movs	r1, #15
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	0e9b      	lsrs	r3, r3, #26
 8001144:	210f      	movs	r1, #15
 8001146:	4019      	ands	r1, r3
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	201f      	movs	r0, #31
 800114c:	4003      	ands	r3, r0
 800114e:	4099      	lsls	r1, r3
 8001150:	000b      	movs	r3, r1
 8001152:	431a      	orrs	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b004      	add	sp, #16
 800115e:	bd80      	pop	{r7, pc}

08001160 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	0a5b      	lsrs	r3, r3, #9
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	; 0x28
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b002      	add	sp, #8
 8001180:	bd80      	pop	{r7, pc}

08001182 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	0252      	lsls	r2, r2, #9
 8001194:	0a52      	lsrs	r2, r2, #9
 8001196:	43d2      	mvns	r2, r2
 8001198:	401a      	ands	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b002      	add	sp, #8
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	0212      	lsls	r2, r2, #8
 80011bc:	43d2      	mvns	r2, r2
 80011be:	401a      	ands	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	021b      	lsls	r3, r3, #8
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	400b      	ands	r3, r1
 80011c8:	4904      	ldr	r1, [pc, #16]	; (80011dc <LL_ADC_SetChannelSamplingTime+0x34>)
 80011ca:	400b      	ands	r3, r1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	7fffff00 	.word	0x7fffff00

080011e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4a05      	ldr	r2, [pc, #20]	; (8001204 <LL_ADC_EnableInternalRegulator+0x24>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0552      	lsls	r2, r2, #21
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b002      	add	sp, #8
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	6fffffe8 	.word	0x6fffffe8

08001208 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	055b      	lsls	r3, r3, #21
 8001218:	401a      	ands	r2, r3
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	055b      	lsls	r3, r3, #21
 800121e:	429a      	cmp	r2, r3
 8001220:	d101      	bne.n	8001226 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001222:	2301      	movs	r3, #1
 8001224:	e000      	b.n	8001228 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001226:	2300      	movs	r3, #0
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <LL_ADC_Enable+0x20>)
 800123e:	4013      	ands	r3, r2
 8001240:	2201      	movs	r2, #1
 8001242:	431a      	orrs	r2, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	7fffffe8 	.word	0x7fffffe8

08001254 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <LL_ADC_Disable+0x20>)
 8001262:	4013      	ands	r3, r2
 8001264:	2202      	movs	r2, #2
 8001266:	431a      	orrs	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	7fffffe8 	.word	0x7fffffe8

08001278 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2201      	movs	r2, #1
 8001286:	4013      	ands	r3, r2
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <LL_ADC_IsEnabled+0x18>
 800128c:	2301      	movs	r3, #1
 800128e:	e000      	b.n	8001292 <LL_ADC_IsEnabled+0x1a>
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d101      	bne.n	80012b2 <LL_ADC_IsDisableOngoing+0x18>
 80012ae:	2301      	movs	r3, #1
 80012b0:	e000      	b.n	80012b4 <LL_ADC_IsDisableOngoing+0x1a>
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}

080012bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <LL_ADC_REG_StartConversion+0x20>)
 80012ca:	4013      	ands	r3, r2
 80012cc:	2204      	movs	r2, #4
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	7fffffe8 	.word	0x7fffffe8

080012e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <LL_ADC_REG_StopConversion+0x20>)
 80012ee:	4013      	ands	r3, r2
 80012f0:	2210      	movs	r2, #16
 80012f2:	431a      	orrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	7fffffe8 	.word	0x7fffffe8

08001304 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	2204      	movs	r2, #4
 8001312:	4013      	ands	r3, r2
 8001314:	2b04      	cmp	r3, #4
 8001316:	d101      	bne.n	800131c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800131c:	2300      	movs	r3, #0
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001330:	231f      	movs	r3, #31
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e17e      	b.n	800164c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10a      	bne.n	800136c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff fbfb 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2254      	movs	r2, #84	; 0x54
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff49 	bl	8001208 <LL_ADC_IsInternalRegulatorEnabled>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d114      	bne.n	80013a4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	f7ff ff2e 	bl	80011e0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001384:	4bb3      	ldr	r3, [pc, #716]	; (8001654 <HAL_ADC_Init+0x32c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	49b3      	ldr	r1, [pc, #716]	; (8001658 <HAL_ADC_Init+0x330>)
 800138a:	0018      	movs	r0, r3
 800138c:	f7fe fece 	bl	800012c <__udivsi3>
 8001390:	0003      	movs	r3, r0
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001396:	e002      	b.n	800139e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f9      	bne.n	8001398 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ff2d 	bl	8001208 <LL_ADC_IsInternalRegulatorEnabled>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d10f      	bne.n	80013d2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	2210      	movs	r2, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c2:	2201      	movs	r2, #1
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80013ca:	231f      	movs	r3, #31
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff ff94 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e4:	2210      	movs	r2, #16
 80013e6:	4013      	ands	r3, r2
 80013e8:	d000      	beq.n	80013ec <HAL_ADC_Init+0xc4>
 80013ea:	e122      	b.n	8001632 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_Init+0xcc>
 80013f2:	e11e      	b.n	8001632 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	4a98      	ldr	r2, [pc, #608]	; (800165c <HAL_ADC_Init+0x334>)
 80013fa:	4013      	ands	r3, r2
 80013fc:	2202      	movs	r2, #2
 80013fe:	431a      	orrs	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff ff35 	bl	8001278 <LL_ADC_IsEnabled>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d000      	beq.n	8001414 <HAL_ADC_Init+0xec>
 8001412:	e0ad      	b.n	8001570 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	7e1b      	ldrb	r3, [r3, #24]
 800141c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800141e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7e5b      	ldrb	r3, [r3, #25]
 8001424:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001426:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7e9b      	ldrb	r3, [r3, #26]
 800142c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800142e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	2b00      	cmp	r3, #0
 8001436:	d002      	beq.n	800143e <HAL_ADC_Init+0x116>
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	015b      	lsls	r3, r3, #5
 800143c:	e000      	b.n	8001440 <HAL_ADC_Init+0x118>
 800143e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001440:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001446:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da04      	bge.n	800145a <HAL_ADC_Init+0x132>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	085b      	lsrs	r3, r3, #1
 8001458:	e001      	b.n	800145e <HAL_ADC_Init+0x136>
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 800145e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	212c      	movs	r1, #44	; 0x2c
 8001464:	5c5b      	ldrb	r3, [r3, r1]
 8001466:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001468:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2220      	movs	r2, #32
 8001474:	5c9b      	ldrb	r3, [r3, r2]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d115      	bne.n	80014a6 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e9b      	ldrb	r3, [r3, #26]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0252      	lsls	r2, r2, #9
 8001488:	4313      	orrs	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	e00b      	b.n	80014a6 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	2220      	movs	r2, #32
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00a      	beq.n	80014c4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b2:	23e0      	movs	r3, #224	; 0xe0
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80014bc:	4313      	orrs	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	4a65      	ldr	r2, [pc, #404]	; (8001660 <HAL_ADC_Init+0x338>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	0f9b      	lsrs	r3, r3, #30
 80014e0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223c      	movs	r2, #60	; 0x3c
 80014f2:	5c9b      	ldrb	r3, [r3, r2]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d111      	bne.n	800151c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	0f9b      	lsrs	r3, r3, #30
 80014fe:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001504:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800150a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001510:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	2201      	movs	r2, #1
 8001518:	4313      	orrs	r3, r2
 800151a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	4a50      	ldr	r2, [pc, #320]	; (8001664 <HAL_ADC_Init+0x33c>)
 8001524:	4013      	ands	r3, r2
 8001526:	0019      	movs	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	430a      	orrs	r2, r1
 8001530:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	429a      	cmp	r2, r3
 800153c:	d018      	beq.n	8001570 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	429a      	cmp	r2, r3
 8001548:	d012      	beq.n	8001570 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	429a      	cmp	r2, r3
 8001554:	d00c      	beq.n	8001570 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <HAL_ADC_Init+0x340>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_ADC_Init+0x344>)
 800155c:	4013      	ands	r3, r2
 800155e:	0019      	movs	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	23f0      	movs	r3, #240	; 0xf0
 8001566:	039b      	lsls	r3, r3, #14
 8001568:	401a      	ands	r2, r3
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_ADC_Init+0x340>)
 800156c:	430a      	orrs	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6818      	ldr	r0, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001578:	001a      	movs	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	f7ff fd8b 	bl	8001096 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001588:	4939      	ldr	r1, [pc, #228]	; (8001670 <HAL_ADC_Init+0x348>)
 800158a:	001a      	movs	r2, r3
 800158c:	f7ff fd83 	bl	8001096 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d109      	bne.n	80015ac <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2110      	movs	r1, #16
 80015a4:	4249      	negs	r1, r1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	629a      	str	r2, [r3, #40]	; 0x28
 80015aa:	e018      	b.n	80015de <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	039b      	lsls	r3, r3, #14
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d112      	bne.n	80015de <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	221c      	movs	r2, #28
 80015c8:	4013      	ands	r3, r2
 80015ca:	2210      	movs	r2, #16
 80015cc:	4252      	negs	r2, r2
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0011      	movs	r1, r2
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2100      	movs	r1, #0
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff fd73 	bl	80010d0 <LL_ADC_GetSamplingTimeCommonChannels>
 80015ea:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d10b      	bne.n	800160c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	2203      	movs	r2, #3
 8001600:	4393      	bics	r3, r2
 8001602:	2201      	movs	r2, #1
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800160a:	e01c      	b.n	8001646 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	2212      	movs	r2, #18
 8001612:	4393      	bics	r3, r2
 8001614:	2210      	movs	r2, #16
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001620:	2201      	movs	r2, #1
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001628:	231f      	movs	r3, #31
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001630:	e009      	b.n	8001646 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	2210      	movs	r2, #16
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800163e:	231f      	movs	r3, #31
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001646:	231f      	movs	r3, #31
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	781b      	ldrb	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b008      	add	sp, #32
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000000 	.word	0x20000000
 8001658:	00030d40 	.word	0x00030d40
 800165c:	fffffefd 	.word	0xfffffefd
 8001660:	ffde0201 	.word	0xffde0201
 8001664:	1ffffc02 	.word	0x1ffffc02
 8001668:	40012708 	.word	0x40012708
 800166c:	ffc3ffff 	.word	0xffc3ffff
 8001670:	7fffff04 	.word	0x7fffff04

08001674 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff fe3f 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d135      	bne.n	80016f6 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2254      	movs	r2, #84	; 0x54
 800168e:	5c9b      	ldrb	r3, [r3, r2]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_Start+0x24>
 8001694:	2302      	movs	r3, #2
 8001696:	e035      	b.n	8001704 <HAL_ADC_Start+0x90>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2254      	movs	r2, #84	; 0x54
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016a0:	250f      	movs	r5, #15
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f000 fb1a 	bl	8001ce0 <ADC_Enable>
 80016ac:	0003      	movs	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d119      	bne.n	80016ec <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a13      	ldr	r2, [pc, #76]	; (800170c <HAL_ADC_Start+0x98>)
 80016be:	4013      	ands	r3, r2
 80016c0:	2280      	movs	r2, #128	; 0x80
 80016c2:	0052      	lsls	r2, r2, #1
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	221c      	movs	r2, #28
 80016d6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2254      	movs	r2, #84	; 0x54
 80016dc:	2100      	movs	r1, #0
 80016de:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fde9 	bl	80012bc <LL_ADC_REG_StartConversion>
 80016ea:	e008      	b.n	80016fe <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2254      	movs	r2, #84	; 0x54
 80016f0:	2100      	movs	r1, #0
 80016f2:	5499      	strb	r1, [r3, r2]
 80016f4:	e003      	b.n	80016fe <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016f6:	230f      	movs	r3, #15
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	2202      	movs	r2, #2
 80016fc:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80016fe:	230f      	movs	r3, #15
 8001700:	18fb      	adds	r3, r7, r3
 8001702:	781b      	ldrb	r3, [r3, #0]
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b004      	add	sp, #16
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	fffff0fe 	.word	0xfffff0fe

08001710 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2254      	movs	r2, #84	; 0x54
 800171c:	5c9b      	ldrb	r3, [r3, r2]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d101      	bne.n	8001726 <HAL_ADC_Stop+0x16>
 8001722:	2302      	movs	r3, #2
 8001724:	e029      	b.n	800177a <HAL_ADC_Stop+0x6a>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2254      	movs	r2, #84	; 0x54
 800172a:	2101      	movs	r1, #1
 800172c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800172e:	250f      	movs	r5, #15
 8001730:	197c      	adds	r4, r7, r5
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	0018      	movs	r0, r3
 8001736:	f000 fa97 	bl	8001c68 <ADC_ConversionStop>
 800173a:	0003      	movs	r3, r0
 800173c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800173e:	197b      	adds	r3, r7, r5
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d112      	bne.n	800176c <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001746:	197c      	adds	r4, r7, r5
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fb46 	bl	8001ddc <ADC_Disable>
 8001750:	0003      	movs	r3, r0
 8001752:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001754:	197b      	adds	r3, r7, r5
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <HAL_ADC_Stop+0x74>)
 8001762:	4013      	ands	r3, r2
 8001764:	2201      	movs	r2, #1
 8001766:	431a      	orrs	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2254      	movs	r2, #84	; 0x54
 8001770:	2100      	movs	r1, #0
 8001772:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	781b      	ldrb	r3, [r3, #0]
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	fffffefe 	.word	0xfffffefe

08001788 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d102      	bne.n	80017a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800179a:	2308      	movs	r3, #8
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	e00f      	b.n	80017c0 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2201      	movs	r2, #1
 80017a8:	4013      	ands	r3, r2
 80017aa:	d007      	beq.n	80017bc <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	2220      	movs	r2, #32
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e06c      	b.n	8001896 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80017bc:	2304      	movs	r3, #4
 80017be:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017c0:	f7ff fc1a 	bl	8000ff8 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017c8:	e019      	b.n	80017fe <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	d016      	beq.n	80017fe <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017d0:	f7ff fc12 	bl	8000ff8 <HAL_GetTick>
 80017d4:	0002      	movs	r2, r0
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d302      	bcc.n	80017e6 <HAL_ADC_PollForConversion+0x5e>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	2204      	movs	r2, #4
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2254      	movs	r2, #84	; 0x54
 80017f6:	2100      	movs	r1, #0
 80017f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04b      	b.n	8001896 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4013      	ands	r3, r2
 8001808:	d0df      	beq.n	80017ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	2280      	movs	r2, #128	; 0x80
 8001810:	0092      	lsls	r2, r2, #2
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff fc6e 	bl	80010fe <LL_ADC_REG_IsTriggerSourceSWStart>
 8001822:	1e03      	subs	r3, r0, #0
 8001824:	d02e      	beq.n	8001884 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e9b      	ldrb	r3, [r3, #26]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d12a      	bne.n	8001884 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2208      	movs	r2, #8
 8001836:	4013      	ands	r3, r2
 8001838:	2b08      	cmp	r3, #8
 800183a:	d123      	bne.n	8001884 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	0018      	movs	r0, r3
 8001842:	f7ff fd5f 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d110      	bne.n	800186c <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	210c      	movs	r1, #12
 8001856:	438a      	bics	r2, r1
 8001858:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <HAL_ADC_PollForConversion+0x118>)
 8001860:	4013      	ands	r3, r2
 8001862:	2201      	movs	r2, #1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	659a      	str	r2, [r3, #88]	; 0x58
 800186a:	e00b      	b.n	8001884 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001870:	2220      	movs	r2, #32
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187c:	2201      	movs	r2, #1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7e1b      	ldrb	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d103      	bne.n	8001894 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	220c      	movs	r2, #12
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	0018      	movs	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	fffffefe 	.word	0xfffffefe

080018a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c6:	2317      	movs	r3, #23
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2254      	movs	r2, #84	; 0x54
 80018d6:	5c9b      	ldrb	r3, [r3, r2]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x24>
 80018dc:	2302      	movs	r3, #2
 80018de:	e1be      	b.n	8001c5e <HAL_ADC_ConfigChannel+0x3a2>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2254      	movs	r2, #84	; 0x54
 80018e4:	2101      	movs	r1, #1
 80018e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7ff fd09 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 80018f2:	1e03      	subs	r3, r0, #0
 80018f4:	d000      	beq.n	80018f8 <HAL_ADC_ConfigChannel+0x3c>
 80018f6:	e1a1      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d100      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x46>
 8001900:	e152      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	429a      	cmp	r2, r3
 800190c:	d004      	beq.n	8001918 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001912:	4ac2      	ldr	r2, [pc, #776]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d108      	bne.n	800192a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0019      	movs	r1, r3
 8001922:	0010      	movs	r0, r2
 8001924:	f7ff fc1c 	bl	8001160 <LL_ADC_REG_SetSequencerChAdd>
 8001928:	e0ed      	b.n	8001b06 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	211f      	movs	r1, #31
 8001934:	400b      	ands	r3, r1
 8001936:	210f      	movs	r1, #15
 8001938:	4099      	lsls	r1, r3
 800193a:	000b      	movs	r3, r1
 800193c:	43db      	mvns	r3, r3
 800193e:	4013      	ands	r3, r2
 8001940:	0019      	movs	r1, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	0a5b      	lsrs	r3, r3, #9
 800194a:	d105      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x9c>
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	0e9b      	lsrs	r3, r3, #26
 8001952:	221f      	movs	r2, #31
 8001954:	4013      	ands	r3, r2
 8001956:	e0bc      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_ConfigChannel+0xa8>
 8001962:	e0b5      	b.n	8001ad0 <HAL_ADC_ConfigChannel+0x214>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2202      	movs	r2, #2
 800196a:	4013      	ands	r3, r2
 800196c:	d000      	beq.n	8001970 <HAL_ADC_ConfigChannel+0xb4>
 800196e:	e0ad      	b.n	8001acc <HAL_ADC_ConfigChannel+0x210>
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2204      	movs	r2, #4
 8001976:	4013      	ands	r3, r2
 8001978:	d000      	beq.n	800197c <HAL_ADC_ConfigChannel+0xc0>
 800197a:	e0a5      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x20c>
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2208      	movs	r2, #8
 8001982:	4013      	ands	r3, r2
 8001984:	d000      	beq.n	8001988 <HAL_ADC_ConfigChannel+0xcc>
 8001986:	e09d      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x208>
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2210      	movs	r2, #16
 800198e:	4013      	ands	r3, r2
 8001990:	d000      	beq.n	8001994 <HAL_ADC_ConfigChannel+0xd8>
 8001992:	e095      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x204>
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2220      	movs	r2, #32
 800199a:	4013      	ands	r3, r2
 800199c:	d000      	beq.n	80019a0 <HAL_ADC_ConfigChannel+0xe4>
 800199e:	e08d      	b.n	8001abc <HAL_ADC_ConfigChannel+0x200>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	4013      	ands	r3, r2
 80019a8:	d000      	beq.n	80019ac <HAL_ADC_ConfigChannel+0xf0>
 80019aa:	e085      	b.n	8001ab8 <HAL_ADC_ConfigChannel+0x1fc>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	4013      	ands	r3, r2
 80019b4:	d000      	beq.n	80019b8 <HAL_ADC_ConfigChannel+0xfc>
 80019b6:	e07d      	b.n	8001ab4 <HAL_ADC_ConfigChannel+0x1f8>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	d000      	beq.n	80019c6 <HAL_ADC_ConfigChannel+0x10a>
 80019c4:	e074      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1f4>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d000      	beq.n	80019d4 <HAL_ADC_ConfigChannel+0x118>
 80019d2:	e06b      	b.n	8001aac <HAL_ADC_ConfigChannel+0x1f0>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4013      	ands	r3, r2
 80019de:	d000      	beq.n	80019e2 <HAL_ADC_ConfigChannel+0x126>
 80019e0:	e062      	b.n	8001aa8 <HAL_ADC_ConfigChannel+0x1ec>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4013      	ands	r3, r2
 80019ec:	d000      	beq.n	80019f0 <HAL_ADC_ConfigChannel+0x134>
 80019ee:	e059      	b.n	8001aa4 <HAL_ADC_ConfigChannel+0x1e8>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	015b      	lsls	r3, r3, #5
 80019f8:	4013      	ands	r3, r2
 80019fa:	d151      	bne.n	8001aa0 <HAL_ADC_ConfigChannel+0x1e4>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	019b      	lsls	r3, r3, #6
 8001a04:	4013      	ands	r3, r2
 8001a06:	d149      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1e0>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4013      	ands	r3, r2
 8001a12:	d141      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1dc>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d139      	bne.n	8001a94 <HAL_ADC_ConfigChannel+0x1d8>
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	025b      	lsls	r3, r3, #9
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d131      	bne.n	8001a90 <HAL_ADC_ConfigChannel+0x1d4>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	029b      	lsls	r3, r3, #10
 8001a34:	4013      	ands	r3, r2
 8001a36:	d129      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x1d0>
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	02db      	lsls	r3, r3, #11
 8001a40:	4013      	ands	r3, r2
 8001a42:	d121      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1cc>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	031b      	lsls	r3, r3, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d119      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x1c8>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	035b      	lsls	r3, r3, #13
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d111      	bne.n	8001a80 <HAL_ADC_ConfigChannel+0x1c4>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	039b      	lsls	r3, r3, #14
 8001a64:	4013      	ands	r3, r2
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_ConfigChannel+0x1c0>
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	03db      	lsls	r3, r3, #15
 8001a70:	4013      	ands	r3, r2
 8001a72:	d001      	beq.n	8001a78 <HAL_ADC_ConfigChannel+0x1bc>
 8001a74:	2316      	movs	r3, #22
 8001a76:	e02c      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e02a      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a7c:	2315      	movs	r3, #21
 8001a7e:	e028      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a80:	2314      	movs	r3, #20
 8001a82:	e026      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a84:	2313      	movs	r3, #19
 8001a86:	e024      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a88:	2312      	movs	r3, #18
 8001a8a:	e022      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a8c:	2311      	movs	r3, #17
 8001a8e:	e020      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a90:	2310      	movs	r3, #16
 8001a92:	e01e      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a94:	230f      	movs	r3, #15
 8001a96:	e01c      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a98:	230e      	movs	r3, #14
 8001a9a:	e01a      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001a9c:	230d      	movs	r3, #13
 8001a9e:	e018      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	e016      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001aa4:	230b      	movs	r3, #11
 8001aa6:	e014      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	e012      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001aac:	2309      	movs	r3, #9
 8001aae:	e010      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ab0:	2308      	movs	r3, #8
 8001ab2:	e00e      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ab4:	2307      	movs	r3, #7
 8001ab6:	e00c      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ab8:	2306      	movs	r3, #6
 8001aba:	e00a      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001abc:	2305      	movs	r3, #5
 8001abe:	e008      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	e006      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e004      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x216>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	6852      	ldr	r2, [r2, #4]
 8001ad6:	201f      	movs	r0, #31
 8001ad8:	4002      	ands	r2, r0
 8001ada:	4093      	lsls	r3, r2
 8001adc:	000a      	movs	r2, r1
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d808      	bhi.n	8001b06 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6859      	ldr	r1, [r3, #4]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	001a      	movs	r2, r3
 8001b02:	f7ff fb0d 	bl	8001120 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	001a      	movs	r2, r3
 8001b14:	f7ff fb48 	bl	80011a8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db00      	blt.n	8001b22 <HAL_ADC_ConfigChannel+0x266>
 8001b20:	e096      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b22:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff faa9 	bl	800107c <LL_ADC_GetCommonPathInternalCh>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3c      	ldr	r2, [pc, #240]	; (8001c24 <HAL_ADC_ConfigChannel+0x368>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d123      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b40:	d11e      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2280      	movs	r2, #128	; 0x80
 8001b46:	0412      	lsls	r2, r2, #16
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	4a35      	ldr	r2, [pc, #212]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0010      	movs	r0, r2
 8001b50:	f7ff fa80 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_ADC_ConfigChannel+0x36c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4934      	ldr	r1, [pc, #208]	; (8001c2c <HAL_ADC_ConfigChannel+0x370>)
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fae6 	bl	800012c <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	001a      	movs	r2, r3
 8001b64:	0013      	movs	r3, r2
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	189b      	adds	r3, r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b70:	e002      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f9      	bne.n	8001b72 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001b7e:	e067      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a2a      	ldr	r2, [pc, #168]	; (8001c30 <HAL_ADC_ConfigChannel+0x374>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d162      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	03db      	lsls	r3, r3, #15
 8001b90:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001b92:	d15d      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	03d2      	lsls	r2, r2, #15
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	4a20      	ldr	r2, [pc, #128]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	0010      	movs	r0, r2
 8001ba2:	f7ff fa57 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001ba6:	e053      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	2380      	movs	r3, #128	; 0x80
 8001bae:	061b      	lsls	r3, r3, #24
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d004      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bb8:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <HAL_ADC_ConfigChannel+0x360>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d107      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	0010      	movs	r0, r2
 8001bca:	f7ff fada 	bl	8001182 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	da3c      	bge.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fa4f 	bl	800107c <LL_ADC_GetCommonPathInternalCh>
 8001bde:	0003      	movs	r3, r0
 8001be0:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_ADC_ConfigChannel+0x368>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d108      	bne.n	8001bfe <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_ADC_ConfigChannel+0x378>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	4a0b      	ldr	r2, [pc, #44]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001bf4:	0019      	movs	r1, r3
 8001bf6:	0010      	movs	r0, r2
 8001bf8:	f7ff fa2c 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001bfc:	e028      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a0b      	ldr	r2, [pc, #44]	; (8001c30 <HAL_ADC_ConfigChannel+0x374>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d123      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_ADC_ConfigChannel+0x37c>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <HAL_ADC_ConfigChannel+0x364>)
 8001c10:	0019      	movs	r1, r3
 8001c12:	0010      	movs	r0, r2
 8001c14:	f7ff fa1e 	bl	8001054 <LL_ADC_SetCommonPathInternalCh>
 8001c18:	e01a      	b.n	8001c50 <HAL_ADC_ConfigChannel+0x394>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	80000004 	.word	0x80000004
 8001c20:	40012708 	.word	0x40012708
 8001c24:	a4000200 	.word	0xa4000200
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	00030d40 	.word	0x00030d40
 8001c30:	a8000400 	.word	0xa8000400
 8001c34:	ff7fffff 	.word	0xff7fffff
 8001c38:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	2220      	movs	r2, #32
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c48:	2317      	movs	r3, #23
 8001c4a:	18fb      	adds	r3, r7, r3
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2254      	movs	r2, #84	; 0x54
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001c58:	2317      	movs	r3, #23
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	781b      	ldrb	r3, [r3, #0]
}
 8001c5e:	0018      	movs	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	b006      	add	sp, #24
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)

08001c68 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	0018      	movs	r0, r3
 8001c76:	f7ff fb45 	bl	8001304 <LL_ADC_REG_IsConversionOngoing>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d02b      	beq.n	8001cd6 <ADC_ConversionStop+0x6e>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff fb09 	bl	800129a <LL_ADC_IsDisableOngoing>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d104      	bne.n	8001c96 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fb25 	bl	80012e0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c96:	f7ff f9af 	bl	8000ff8 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001c9e:	e014      	b.n	8001cca <ADC_ConversionStop+0x62>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ca0:	f7ff f9aa 	bl	8000ff8 <HAL_GetTick>
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d90d      	bls.n	8001cca <ADC_ConversionStop+0x62>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e006      	b.n	8001cd8 <ADC_ConversionStop+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1e4      	bne.n	8001ca0 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f7ff fac1 	bl	8001278 <LL_ADC_IsEnabled>
 8001cf6:	1e03      	subs	r3, r0, #0
 8001cf8:	d162      	bne.n	8001dc0 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <ADC_Enable+0xec>)
 8001d02:	4013      	ands	r3, r2
 8001d04:	d00d      	beq.n	8001d22 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	2201      	movs	r2, #1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e04f      	b.n	8001dc2 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f7ff fa82 	bl	8001230 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <ADC_Enable+0xf0>)
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7ff f9a4 	bl	800107c <LL_ADC_GetCommonPathInternalCh>
 8001d34:	0002      	movs	r2, r0
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	041b      	lsls	r3, r3, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d00f      	beq.n	8001d5e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001d3e:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <ADC_Enable+0xf4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4925      	ldr	r1, [pc, #148]	; (8001dd8 <ADC_Enable+0xf8>)
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7fe f9f1 	bl	800012c <__udivsi3>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d50:	e002      	b.n	8001d58 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	3b01      	subs	r3, #1
 8001d56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f9      	bne.n	8001d52 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7e5b      	ldrb	r3, [r3, #25]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d02c      	beq.n	8001dc0 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001d66:	f7ff f947 	bl	8000ff8 <HAL_GetTick>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001d6e:	e020      	b.n	8001db2 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fa7f 	bl	8001278 <LL_ADC_IsEnabled>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d104      	bne.n	8001d88 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	0018      	movs	r0, r3
 8001d84:	f7ff fa54 	bl	8001230 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d88:	f7ff f936 	bl	8000ff8 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d90d      	bls.n	8001db2 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9a:	2210      	movs	r2, #16
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da6:	2201      	movs	r2, #1
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e007      	b.n	8001dc2 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d1d7      	bne.n	8001d70 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	b004      	add	sp, #16
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	80000017 	.word	0x80000017
 8001dd0:	40012708 	.word	0x40012708
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	00030d40 	.word	0x00030d40

08001ddc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff fa56 	bl	800129a <LL_ADC_IsDisableOngoing>
 8001dee:	0003      	movs	r3, r0
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff fa3e 	bl	8001278 <LL_ADC_IsEnabled>
 8001dfc:	1e03      	subs	r3, r0, #0
 8001dfe:	d040      	beq.n	8001e82 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d13d      	bne.n	8001e82 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10d      	bne.n	8001e30 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0018      	movs	r0, r3
 8001e1a:	f7ff fa1b 	bl	8001254 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2203      	movs	r2, #3
 8001e24:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e26:	f7ff f8e7 	bl	8000ff8 <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e2e:	e022      	b.n	8001e76 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	2210      	movs	r2, #16
 8001e36:	431a      	orrs	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	2201      	movs	r2, #1
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e01b      	b.n	8001e84 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e4c:	f7ff f8d4 	bl	8000ff8 <HAL_GetTick>
 8001e50:	0002      	movs	r2, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d90d      	bls.n	8001e76 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	2210      	movs	r2, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e006      	b.n	8001e84 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d1e4      	bne.n	8001e4c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b004      	add	sp, #16
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	0002      	movs	r2, r0
 8001e94:	1dfb      	adds	r3, r7, #7
 8001e96:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e98:	1dfb      	adds	r3, r7, #7
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9e:	d809      	bhi.n	8001eb4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea0:	1dfb      	adds	r3, r7, #7
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	4b04      	ldr	r3, [pc, #16]	; (8001ebc <__NVIC_EnableIRQ+0x30>)
 8001eac:	2101      	movs	r1, #1
 8001eae:	4091      	lsls	r1, r2
 8001eb0:	000a      	movs	r2, r1
 8001eb2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001eb4:	46c0      	nop			; (mov r8, r8)
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b002      	add	sp, #8
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	0002      	movs	r2, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	1dfb      	adds	r3, r7, #7
 8001ecc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed4:	d828      	bhi.n	8001f28 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ed6:	4a2f      	ldr	r2, [pc, #188]	; (8001f94 <__NVIC_SetPriority+0xd4>)
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	089b      	lsrs	r3, r3, #2
 8001ee0:	33c0      	adds	r3, #192	; 0xc0
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	589b      	ldr	r3, [r3, r2]
 8001ee6:	1dfa      	adds	r2, r7, #7
 8001ee8:	7812      	ldrb	r2, [r2, #0]
 8001eea:	0011      	movs	r1, r2
 8001eec:	2203      	movs	r2, #3
 8001eee:	400a      	ands	r2, r1
 8001ef0:	00d2      	lsls	r2, r2, #3
 8001ef2:	21ff      	movs	r1, #255	; 0xff
 8001ef4:	4091      	lsls	r1, r2
 8001ef6:	000a      	movs	r2, r1
 8001ef8:	43d2      	mvns	r2, r2
 8001efa:	401a      	ands	r2, r3
 8001efc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	019b      	lsls	r3, r3, #6
 8001f02:	22ff      	movs	r2, #255	; 0xff
 8001f04:	401a      	ands	r2, r3
 8001f06:	1dfb      	adds	r3, r7, #7
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	4003      	ands	r3, r0
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f14:	481f      	ldr	r0, [pc, #124]	; (8001f94 <__NVIC_SetPriority+0xd4>)
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b25b      	sxtb	r3, r3
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	33c0      	adds	r3, #192	; 0xc0
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f26:	e031      	b.n	8001f8c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <__NVIC_SetPriority+0xd8>)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	0019      	movs	r1, r3
 8001f30:	230f      	movs	r3, #15
 8001f32:	400b      	ands	r3, r1
 8001f34:	3b08      	subs	r3, #8
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3306      	adds	r3, #6
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	18d3      	adds	r3, r2, r3
 8001f3e:	3304      	adds	r3, #4
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	1dfa      	adds	r2, r7, #7
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	0011      	movs	r1, r2
 8001f48:	2203      	movs	r2, #3
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	21ff      	movs	r1, #255	; 0xff
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	401a      	ands	r2, r3
 8001f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	401a      	ands	r2, r3
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	2303      	movs	r3, #3
 8001f6a:	4003      	ands	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <__NVIC_SetPriority+0xd8>)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	001c      	movs	r4, r3
 8001f78:	230f      	movs	r3, #15
 8001f7a:	4023      	ands	r3, r4
 8001f7c:	3b08      	subs	r3, #8
 8001f7e:	089b      	lsrs	r3, r3, #2
 8001f80:	430a      	orrs	r2, r1
 8001f82:	3306      	adds	r3, #6
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	18c3      	adds	r3, r0, r3
 8001f88:	3304      	adds	r3, #4
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b003      	add	sp, #12
 8001f92:	bd90      	pop	{r4, r7, pc}
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1e5a      	subs	r2, r3, #1
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	045b      	lsls	r3, r3, #17
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d301      	bcc.n	8001fb4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e010      	b.n	8001fd6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <SysTick_Config+0x44>)
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	425b      	negs	r3, r3
 8001fc0:	2103      	movs	r1, #3
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	f7ff ff7c 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fc8:	4b05      	ldr	r3, [pc, #20]	; (8001fe0 <SysTick_Config+0x44>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SysTick_Config+0x44>)
 8001fd0:	2207      	movs	r2, #7
 8001fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	e000e010 	.word	0xe000e010

08001fe4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	210f      	movs	r1, #15
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	1c02      	adds	r2, r0, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	187b      	adds	r3, r7, r1
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	0011      	movs	r1, r2
 8002000:	0018      	movs	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b004      	add	sp, #16
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	0002      	movs	r2, r0
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b25b      	sxtb	r3, r3
 8002020:	0018      	movs	r0, r3
 8002022:	f7ff ff33 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f7ff ffaf 	bl	8001f9c <SysTick_Config>
 800203e:	0003      	movs	r3, r0
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002056:	e153      	b.n	8002300 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2101      	movs	r1, #1
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4091      	lsls	r1, r2
 8002062:	000a      	movs	r2, r1
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d100      	bne.n	8002070 <HAL_GPIO_Init+0x28>
 800206e:	e144      	b.n	80022fa <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x38>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b12      	cmp	r3, #18
 800207e:	d125      	bne.n	80020cc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	58d3      	ldr	r3, [r2, r3]
 800208c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2207      	movs	r2, #7
 8002092:	4013      	ands	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	409a      	lsls	r2, r3
 800209a:	0013      	movs	r3, r2
 800209c:	43da      	mvns	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	4013      	ands	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	220f      	movs	r2, #15
 80020aa:	401a      	ands	r2, r3
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2107      	movs	r1, #7
 80020b0:	400b      	ands	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	409a      	lsls	r2, r3
 80020b6:	0013      	movs	r3, r2
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	0092      	lsls	r2, r2, #2
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	409a      	lsls	r2, r3
 80020da:	0013      	movs	r3, r2
 80020dc:	43da      	mvns	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	4013      	ands	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2203      	movs	r2, #3
 80020ea:	401a      	ands	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	409a      	lsls	r2, r3
 80020f2:	0013      	movs	r3, r2
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d00b      	beq.n	8002120 <HAL_GPIO_Init+0xd8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d007      	beq.n	8002120 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002114:	2b11      	cmp	r3, #17
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b12      	cmp	r3, #18
 800211e:	d130      	bne.n	8002182 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	409a      	lsls	r2, r3
 800212e:	0013      	movs	r3, r2
 8002130:	43da      	mvns	r2, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	409a      	lsls	r2, r3
 8002142:	0013      	movs	r3, r2
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	4313      	orrs	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002156:	2201      	movs	r2, #1
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	409a      	lsls	r2, r3
 800215c:	0013      	movs	r3, r2
 800215e:	43da      	mvns	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4013      	ands	r3, r2
 8002164:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	2201      	movs	r2, #1
 800216e:	401a      	ands	r2, r3
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	409a      	lsls	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	2b03      	cmp	r3, #3
 8002188:	d017      	beq.n	80021ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	43da      	mvns	r2, r3
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	4013      	ands	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	0013      	movs	r3, r2
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	055b      	lsls	r3, r3, #21
 80021c2:	4013      	ands	r3, r2
 80021c4:	d100      	bne.n	80021c8 <HAL_GPIO_Init+0x180>
 80021c6:	e098      	b.n	80022fa <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3318      	adds	r3, #24
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	589b      	ldr	r3, [r3, r2]
 80021d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2203      	movs	r2, #3
 80021da:	4013      	ands	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	220f      	movs	r2, #15
 80021e0:	409a      	lsls	r2, r3
 80021e2:	0013      	movs	r3, r2
 80021e4:	43da      	mvns	r2, r3
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4013      	ands	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	23a0      	movs	r3, #160	; 0xa0
 80021f0:	05db      	lsls	r3, r3, #23
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d019      	beq.n	800222a <HAL_GPIO_Init+0x1e2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a48      	ldr	r2, [pc, #288]	; (800231c <HAL_GPIO_Init+0x2d4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0x1de>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a47      	ldr	r2, [pc, #284]	; (8002320 <HAL_GPIO_Init+0x2d8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00d      	beq.n	8002222 <HAL_GPIO_Init+0x1da>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a46      	ldr	r2, [pc, #280]	; (8002324 <HAL_GPIO_Init+0x2dc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d007      	beq.n	800221e <HAL_GPIO_Init+0x1d6>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a45      	ldr	r2, [pc, #276]	; (8002328 <HAL_GPIO_Init+0x2e0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d101      	bne.n	800221a <HAL_GPIO_Init+0x1d2>
 8002216:	2305      	movs	r3, #5
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x1e4>
 800221a:	2306      	movs	r3, #6
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x1e4>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x1e4>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x1e4>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x1e4>
 800222a:	2300      	movs	r3, #0
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	2103      	movs	r1, #3
 8002230:	400a      	ands	r2, r1
 8002232:	00d2      	lsls	r2, r2, #3
 8002234:	4093      	lsls	r3, r2
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	4313      	orrs	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800223c:	4936      	ldr	r1, [pc, #216]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3318      	adds	r3, #24
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800224a:	4a33      	ldr	r2, [pc, #204]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800224c:	2380      	movs	r3, #128	; 0x80
 800224e:	58d3      	ldr	r3, [r2, r3]
 8002250:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	43da      	mvns	r2, r3
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	025b      	lsls	r3, r3, #9
 8002264:	4013      	ands	r3, r2
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002270:	4929      	ldr	r1, [pc, #164]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 800227a:	2384      	movs	r3, #132	; 0x84
 800227c:	58d3      	ldr	r3, [r2, r3]
 800227e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43da      	mvns	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	4013      	ands	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	4013      	ands	r3, r2
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800229e:	491e      	ldr	r1, [pc, #120]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022a0:	2284      	movs	r2, #132	; 0x84
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43da      	mvns	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4013      	ands	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685a      	ldr	r2, [r3, #4]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	035b      	lsls	r3, r3, #13
 80022be:	4013      	ands	r3, r2
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	43da      	mvns	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	039b      	lsls	r3, r3, #14
 80022e8:	4013      	ands	r3, r2
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80022f4:	4b08      	ldr	r3, [pc, #32]	; (8002318 <HAL_GPIO_Init+0x2d0>)
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	40da      	lsrs	r2, r3
 8002308:	1e13      	subs	r3, r2, #0
 800230a:	d000      	beq.n	800230e <HAL_GPIO_Init+0x2c6>
 800230c:	e6a4      	b.n	8002058 <HAL_GPIO_Init+0x10>
  }
}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	46c0      	nop			; (mov r8, r8)
 8002312:	46bd      	mov	sp, r7
 8002314:	b006      	add	sp, #24
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021800 	.word	0x40021800
 800231c:	50000400 	.word	0x50000400
 8002320:	50000800 	.word	0x50000800
 8002324:	50000c00 	.word	0x50000c00
 8002328:	50001400 	.word	0x50001400

0800232c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	000a      	movs	r2, r1
 8002336:	1cbb      	adds	r3, r7, #2
 8002338:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	1cba      	adds	r2, r7, #2
 8002340:	8812      	ldrh	r2, [r2, #0]
 8002342:	4013      	ands	r3, r2
 8002344:	d004      	beq.n	8002350 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002346:	230f      	movs	r3, #15
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e003      	b.n	8002358 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002350:	230f      	movs	r3, #15
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002358:	230f      	movs	r3, #15
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	781b      	ldrb	r3, [r3, #0]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b004      	add	sp, #16
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	0008      	movs	r0, r1
 8002370:	0011      	movs	r1, r2
 8002372:	1cbb      	adds	r3, r7, #2
 8002374:	1c02      	adds	r2, r0, #0
 8002376:	801a      	strh	r2, [r3, #0]
 8002378:	1c7b      	adds	r3, r7, #1
 800237a:	1c0a      	adds	r2, r1, #0
 800237c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800237e:	1c7b      	adds	r3, r7, #1
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002386:	1cbb      	adds	r3, r7, #2
 8002388:	881a      	ldrh	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800238e:	e003      	b.n	8002398 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002390:	1cbb      	adds	r3, r7, #2
 8002392:	881a      	ldrh	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b002      	add	sp, #8
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	1dbb      	adds	r3, r7, #6
 80023aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	1dba      	adds	r2, r7, #6
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	4013      	ands	r3, r2
 80023b6:	d008      	beq.n	80023ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80023b8:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023ba:	1dba      	adds	r2, r7, #6
 80023bc:	8812      	ldrh	r2, [r2, #0]
 80023be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80023c0:	1dbb      	adds	r3, r7, #6
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f815 	bl	80023f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	1dba      	adds	r2, r7, #6
 80023d0:	8812      	ldrh	r2, [r2, #0]
 80023d2:	4013      	ands	r3, r2
 80023d4:	d008      	beq.n	80023e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80023d8:	1dba      	adds	r2, r7, #6
 80023da:	8812      	ldrh	r2, [r2, #0]
 80023dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80023de:	1dbb      	adds	r3, r7, #6
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	0018      	movs	r0, r3
 80023e4:	f7fe f832 	bl	800044c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021800 	.word	0x40021800

080023f4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0002      	movs	r2, r0
 80023fc:	1dbb      	adds	r3, r7, #6
 80023fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002400:	46c0      	nop			; (mov r8, r8)
 8002402:	46bd      	mov	sp, r7
 8002404:	b002      	add	sp, #8
 8002406:	bd80      	pop	{r7, pc}

08002408 <HAL_PWR_EnableSleepOnExit>:
  *         useful when the processor is expected to run only on interruptions
  *         handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800240c:	4b04      	ldr	r3, [pc, #16]	; (8002420 <HAL_PWR_EnableSleepOnExit+0x18>)
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_PWR_EnableSleepOnExit+0x18>)
 8002412:	2102      	movs	r1, #2
 8002414:	430a      	orrs	r2, r1
 8002416:	611a      	str	r2, [r3, #16]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <HAL_PWR_DisableSleepOnExit>:
  *         processor enters SLEEP or DEEPSLEEP mode when an interruption
  *         handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <HAL_PWR_DisableSleepOnExit+0x18>)
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_PWR_DisableSleepOnExit+0x18>)
 800242e:	2102      	movs	r1, #2
 8002430:	438a      	bics	r2, r1
 8002432:	611a      	str	r2, [r3, #16]
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1d0      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2201      	movs	r2, #1
 8002458:	4013      	ands	r3, r2
 800245a:	d100      	bne.n	800245e <HAL_RCC_OscConfig+0x1e>
 800245c:	e069      	b.n	8002532 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800245e:	4bc8      	ldr	r3, [pc, #800]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2238      	movs	r2, #56	; 0x38
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	2b08      	cmp	r3, #8
 800246c:	d105      	bne.n	800247a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d15d      	bne.n	8002532 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e1bc      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	025b      	lsls	r3, r3, #9
 8002482:	429a      	cmp	r2, r3
 8002484:	d107      	bne.n	8002496 <HAL_RCC_OscConfig+0x56>
 8002486:	4bbe      	ldr	r3, [pc, #760]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	4bbd      	ldr	r3, [pc, #756]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	0249      	lsls	r1, r1, #9
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e020      	b.n	80024d8 <HAL_RCC_OscConfig+0x98>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	23a0      	movs	r3, #160	; 0xa0
 800249c:	02db      	lsls	r3, r3, #11
 800249e:	429a      	cmp	r2, r3
 80024a0:	d10e      	bne.n	80024c0 <HAL_RCC_OscConfig+0x80>
 80024a2:	4bb7      	ldr	r3, [pc, #732]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	4bb6      	ldr	r3, [pc, #728]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024a8:	2180      	movs	r1, #128	; 0x80
 80024aa:	02c9      	lsls	r1, r1, #11
 80024ac:	430a      	orrs	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	4bb3      	ldr	r3, [pc, #716]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	4bb2      	ldr	r3, [pc, #712]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0249      	lsls	r1, r1, #9
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024c0:	4baf      	ldr	r3, [pc, #700]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	4bae      	ldr	r3, [pc, #696]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024c6:	49af      	ldr	r1, [pc, #700]	; (8002784 <HAL_RCC_OscConfig+0x344>)
 80024c8:	400a      	ands	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	4bac      	ldr	r3, [pc, #688]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4bab      	ldr	r3, [pc, #684]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024d2:	49ad      	ldr	r1, [pc, #692]	; (8002788 <HAL_RCC_OscConfig+0x348>)
 80024d4:	400a      	ands	r2, r1
 80024d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fd8a 	bl	8000ff8 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80024ea:	f7fe fd85 	bl	8000ff8 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b64      	cmp	r3, #100	; 0x64
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e17b      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fc:	4ba0      	ldr	r3, [pc, #640]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	029b      	lsls	r3, r3, #10
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0xaa>
 8002508:	e013      	b.n	8002532 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fd75 	bl	8000ff8 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002514:	f7fe fd70 	bl	8000ff8 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b64      	cmp	r3, #100	; 0x64
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e166      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002526:	4b96      	ldr	r3, [pc, #600]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	2380      	movs	r3, #128	; 0x80
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2202      	movs	r2, #2
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0xfe>
 800253c:	e086      	b.n	800264c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4b90      	ldr	r3, [pc, #576]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2238      	movs	r2, #56	; 0x38
 8002544:	4013      	ands	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12f      	bne.n	80025ae <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e14c      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b89      	ldr	r3, [pc, #548]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	4a8b      	ldr	r2, [pc, #556]	; (800278c <HAL_RCC_OscConfig+0x34c>)
 8002560:	4013      	ands	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	021a      	lsls	r2, r3, #8
 800256a:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800256c:	430a      	orrs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d112      	bne.n	800259c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002576:	4b82      	ldr	r3, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a85      	ldr	r2, [pc, #532]	; (8002790 <HAL_RCC_OscConfig+0x350>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	4b7e      	ldr	r3, [pc, #504]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	0adb      	lsrs	r3, r3, #11
 8002590:	2207      	movs	r2, #7
 8002592:	4013      	ands	r3, r2
 8002594:	4a7f      	ldr	r2, [pc, #508]	; (8002794 <HAL_RCC_OscConfig+0x354>)
 8002596:	40da      	lsrs	r2, r3
 8002598:	4b7f      	ldr	r3, [pc, #508]	; (8002798 <HAL_RCC_OscConfig+0x358>)
 800259a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800259c:	4b7f      	ldr	r3, [pc, #508]	; (800279c <HAL_RCC_OscConfig+0x35c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f7fe fccd 	bl	8000f40 <HAL_InitTick>
 80025a6:	1e03      	subs	r3, r0, #0
 80025a8:	d050      	beq.n	800264c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e122      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d030      	beq.n	8002618 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80025b6:	4b72      	ldr	r3, [pc, #456]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a75      	ldr	r2, [pc, #468]	; (8002790 <HAL_RCC_OscConfig+0x350>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	4b6e      	ldr	r3, [pc, #440]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80025ca:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b6c      	ldr	r3, [pc, #432]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0049      	lsls	r1, r1, #1
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd0e 	bl	8000ff8 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80025e2:	f7fe fd09 	bl	8000ff8 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e0ff      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b5f      	ldr	r3, [pc, #380]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	4a61      	ldr	r2, [pc, #388]	; (800278c <HAL_RCC_OscConfig+0x34c>)
 8002606:	4013      	ands	r3, r2
 8002608:	0019      	movs	r1, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	021a      	lsls	r2, r3, #8
 8002610:	4b5b      	ldr	r3, [pc, #364]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002612:	430a      	orrs	r2, r1
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	e019      	b.n	800264c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002618:	4b59      	ldr	r3, [pc, #356]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b58      	ldr	r3, [pc, #352]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800261e:	4960      	ldr	r1, [pc, #384]	; (80027a0 <HAL_RCC_OscConfig+0x360>)
 8002620:	400a      	ands	r2, r1
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fce8 	bl	8000ff8 <HAL_GetTick>
 8002628:	0003      	movs	r3, r0
 800262a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800262c:	e008      	b.n	8002640 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800262e:	f7fe fce3 	bl	8000ff8 <HAL_GetTick>
 8002632:	0002      	movs	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b02      	cmp	r3, #2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e0d9      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4013      	ands	r3, r2
 800264a:	d1f0      	bne.n	800262e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2208      	movs	r2, #8
 8002652:	4013      	ands	r3, r2
 8002654:	d042      	beq.n	80026dc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002656:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2238      	movs	r2, #56	; 0x38
 800265c:	4013      	ands	r3, r2
 800265e:	2b18      	cmp	r3, #24
 8002660:	d105      	bne.n	800266e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d138      	bne.n	80026dc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0c2      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d019      	beq.n	80026aa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002676:	4b42      	ldr	r3, [pc, #264]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800267a:	4b41      	ldr	r3, [pc, #260]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800267c:	2101      	movs	r1, #1
 800267e:	430a      	orrs	r2, r1
 8002680:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7fe fcb9 	bl	8000ff8 <HAL_GetTick>
 8002686:	0003      	movs	r3, r0
 8002688:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800268c:	f7fe fcb4 	bl	8000ff8 <HAL_GetTick>
 8002690:	0002      	movs	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0aa      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800269e:	4b38      	ldr	r3, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80026a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a2:	2202      	movs	r2, #2
 80026a4:	4013      	ands	r3, r2
 80026a6:	d0f1      	beq.n	800268c <HAL_RCC_OscConfig+0x24c>
 80026a8:	e018      	b.n	80026dc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80026aa:	4b35      	ldr	r3, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80026ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ae:	4b34      	ldr	r3, [pc, #208]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80026b0:	2101      	movs	r1, #1
 80026b2:	438a      	bics	r2, r1
 80026b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc9f 	bl	8000ff8 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80026c0:	f7fe fc9a 	bl	8000ff8 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e090      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80026d2:	4b2b      	ldr	r3, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80026d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d6:	2202      	movs	r2, #2
 80026d8:	4013      	ands	r3, r2
 80026da:	d1f1      	bne.n	80026c0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d100      	bne.n	80026e8 <HAL_RCC_OscConfig+0x2a8>
 80026e6:	e084      	b.n	80027f2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e8:	230f      	movs	r3, #15
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2238      	movs	r2, #56	; 0x38
 80026f6:	4013      	ands	r3, r2
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d000      	beq.n	8002706 <HAL_RCC_OscConfig+0x2c6>
 8002704:	e075      	b.n	80027f2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e074      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d106      	bne.n	8002720 <HAL_RCC_OscConfig+0x2e0>
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002714:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002716:	4b1a      	ldr	r3, [pc, #104]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	65da      	str	r2, [r3, #92]	; 0x5c
 800271e:	e01c      	b.n	800275a <HAL_RCC_OscConfig+0x31a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d10c      	bne.n	8002742 <HAL_RCC_OscConfig+0x302>
 8002728:	4b15      	ldr	r3, [pc, #84]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800272a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800272c:	4b14      	ldr	r3, [pc, #80]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800272e:	2104      	movs	r1, #4
 8002730:	430a      	orrs	r2, r1
 8002732:	65da      	str	r2, [r3, #92]	; 0x5c
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002736:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002738:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 800273a:	2101      	movs	r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002740:	e00b      	b.n	800275a <HAL_RCC_OscConfig+0x31a>
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002744:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002746:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002748:	2101      	movs	r1, #1
 800274a:	438a      	bics	r2, r1
 800274c:	65da      	str	r2, [r3, #92]	; 0x5c
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x340>)
 8002754:	2104      	movs	r1, #4
 8002756:	438a      	bics	r2, r1
 8002758:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d028      	beq.n	80027b4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe fc49 	bl	8000ff8 <HAL_GetTick>
 8002766:	0003      	movs	r3, r0
 8002768:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fc44 	bl	8000ff8 <HAL_GetTick>
 8002770:	0002      	movs	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	4a0b      	ldr	r2, [pc, #44]	; (80027a4 <HAL_RCC_OscConfig+0x364>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d915      	bls.n	80027a8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e039      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
 8002780:	40021000 	.word	0x40021000
 8002784:	fffeffff 	.word	0xfffeffff
 8002788:	fffbffff 	.word	0xfffbffff
 800278c:	ffff80ff 	.word	0xffff80ff
 8002790:	ffffc7ff 	.word	0xffffc7ff
 8002794:	02dc6c00 	.word	0x02dc6c00
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004
 80027a0:	fffffeff 	.word	0xfffffeff
 80027a4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_RCC_OscConfig+0x3bc>)
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2202      	movs	r2, #2
 80027ae:	4013      	ands	r3, r2
 80027b0:	d0dc      	beq.n	800276c <HAL_RCC_OscConfig+0x32c>
 80027b2:	e013      	b.n	80027dc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fc20 	bl	8000ff8 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80027bc:	e009      	b.n	80027d2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7fe fc1b 	bl	8000ff8 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	4a0d      	ldr	r2, [pc, #52]	; (8002800 <HAL_RCC_OscConfig+0x3c0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e010      	b.n	80027f4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_RCC_OscConfig+0x3bc>)
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2202      	movs	r2, #2
 80027d8:	4013      	ands	r3, r2
 80027da:	d1f0      	bne.n	80027be <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80027dc:	230f      	movs	r3, #15
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d105      	bne.n	80027f2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80027e6:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_RCC_OscConfig+0x3bc>)
 80027e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_RCC_OscConfig+0x3bc>)
 80027ec:	4905      	ldr	r1, [pc, #20]	; (8002804 <HAL_RCC_OscConfig+0x3c4>)
 80027ee:	400a      	ands	r2, r1
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b006      	add	sp, #24
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	00001388 	.word	0x00001388
 8002804:	efffffff 	.word	0xefffffff

08002808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0e9      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800281c:	4b76      	ldr	r3, [pc, #472]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2207      	movs	r2, #7
 8002822:	4013      	ands	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d91e      	bls.n	8002868 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b73      	ldr	r3, [pc, #460]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2207      	movs	r2, #7
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	4b70      	ldr	r3, [pc, #448]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800283c:	f7fe fbdc 	bl	8000ff8 <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002844:	e009      	b.n	800285a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002846:	f7fe fbd7 	bl	8000ff8 <HAL_GetTick>
 800284a:	0002      	movs	r2, r0
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	4a6a      	ldr	r2, [pc, #424]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d901      	bls.n	800285a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e0ca      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800285a:	4b67      	ldr	r3, [pc, #412]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2207      	movs	r2, #7
 8002860:	4013      	ands	r3, r2
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d1ee      	bne.n	8002846 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d017      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2204      	movs	r2, #4
 8002878:	4013      	ands	r3, r2
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800287c:	4b60      	ldr	r3, [pc, #384]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a60      	ldr	r2, [pc, #384]	; (8002a04 <HAL_RCC_ClockConfig+0x1fc>)
 8002882:	401a      	ands	r2, r3
 8002884:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002886:	21b0      	movs	r1, #176	; 0xb0
 8002888:	0109      	lsls	r1, r1, #4
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4a5d      	ldr	r2, [pc, #372]	; (8002a08 <HAL_RCC_ClockConfig+0x200>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	4013      	ands	r3, r2
 80028aa:	d055      	beq.n	8002958 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80028ac:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	221c      	movs	r2, #28
 80028b2:	4393      	bics	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028c8:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	029b      	lsls	r3, r3, #10
 80028d0:	4013      	ands	r3, r2
 80028d2:	d11f      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e08b      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e0:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	4013      	ands	r3, r2
 80028ea:	d113      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e07f      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80028f8:	4b41      	ldr	r3, [pc, #260]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80028fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fc:	2202      	movs	r2, #2
 80028fe:	4013      	ands	r3, r2
 8002900:	d108      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e074      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002906:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2202      	movs	r2, #2
 800290c:	4013      	ands	r3, r2
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e06d      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002914:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2207      	movs	r2, #7
 800291a:	4393      	bics	r3, r2
 800291c:	0019      	movs	r1, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7fe fb66 	bl	8000ff8 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002930:	e009      	b.n	8002946 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002932:	f7fe fb61 	bl	8000ff8 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e054      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2238      	movs	r2, #56	; 0x38
 800294c:	401a      	ands	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	429a      	cmp	r2, r3
 8002956:	d1ec      	bne.n	8002932 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2207      	movs	r2, #7
 800295e:	4013      	ands	r3, r2
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d21e      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b24      	ldr	r3, [pc, #144]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2207      	movs	r2, #7
 800296c:	4393      	bics	r3, r2
 800296e:	0019      	movs	r1, r3
 8002970:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002978:	f7fe fb3e 	bl	8000ff8 <HAL_GetTick>
 800297c:	0003      	movs	r3, r0
 800297e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002980:	e009      	b.n	8002996 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002982:	f7fe fb39 	bl	8000ff8 <HAL_GetTick>
 8002986:	0002      	movs	r2, r0
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	4a1b      	ldr	r2, [pc, #108]	; (80029fc <HAL_RCC_ClockConfig+0x1f4>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e02c      	b.n	80029f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2207      	movs	r2, #7
 800299c:	4013      	ands	r3, r2
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2204      	movs	r2, #4
 80029aa:	4013      	ands	r3, r2
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_RCC_ClockConfig+0x204>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691a      	ldr	r2, [r3, #16]
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029be:	430a      	orrs	r2, r1
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029c2:	f000 f82b 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029c6:	0001      	movs	r1, r0
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_ClockConfig+0x1f8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	220f      	movs	r2, #15
 80029d0:	401a      	ands	r2, r3
 80029d2:	4b0f      	ldr	r3, [pc, #60]	; (8002a10 <HAL_RCC_ClockConfig+0x208>)
 80029d4:	0092      	lsls	r2, r2, #2
 80029d6:	58d3      	ldr	r3, [r2, r3]
 80029d8:	221f      	movs	r2, #31
 80029da:	4013      	ands	r3, r2
 80029dc:	000a      	movs	r2, r1
 80029de:	40da      	lsrs	r2, r3
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_RCC_ClockConfig+0x20c>)
 80029e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_RCC_ClockConfig+0x210>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7fe faa9 	bl	8000f40 <HAL_InitTick>
 80029ee:	0003      	movs	r3, r0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b004      	add	sp, #16
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40022000 	.word	0x40022000
 80029fc:	00001388 	.word	0x00001388
 8002a00:	40021000 	.word	0x40021000
 8002a04:	ffff84ff 	.word	0xffff84ff
 8002a08:	fffff0ff 	.word	0xfffff0ff
 8002a0c:	ffff8fff 	.word	0xffff8fff
 8002a10:	08004f8c 	.word	0x08004f8c
 8002a14:	20000000 	.word	0x20000000
 8002a18:	20000004 	.word	0x20000004

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a22:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x78>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2238      	movs	r2, #56	; 0x38
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d10f      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x78>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0adb      	lsrs	r3, r3, #11
 8002a32:	2207      	movs	r2, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	2201      	movs	r2, #1
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	0013      	movs	r3, r2
 8002a3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	4815      	ldr	r0, [pc, #84]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002a42:	f7fd fb73 	bl	800012c <__udivsi3>
 8002a46:	0003      	movs	r3, r0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	e01e      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a4c:	4b11      	ldr	r3, [pc, #68]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x78>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2238      	movs	r2, #56	; 0x38
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d102      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a58:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	e015      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002a5e:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x78>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2238      	movs	r2, #56	; 0x38
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d103      	bne.n	8002a72 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	021b      	lsls	r3, r3, #8
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	e00b      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002a72:	4b08      	ldr	r3, [pc, #32]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x78>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	2238      	movs	r2, #56	; 0x38
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b18      	cmp	r3, #24
 8002a7c:	d103      	bne.n	8002a86 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a7e:	23fa      	movs	r3, #250	; 0xfa
 8002a80:	01db      	lsls	r3, r3, #7
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	e001      	b.n	8002a8a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b002      	add	sp, #8
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	02dc6c00 	.word	0x02dc6c00

08002a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa0:	4b02      	ldr	r3, [pc, #8]	; (8002aac <HAL_RCC_GetHCLKFreq+0x10>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	46c0      	nop			; (mov r8, r8)
 8002aac:	20000000 	.word	0x20000000

08002ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8002ab4:	f7ff fff2 	bl	8002a9c <HAL_RCC_GetHCLKFreq>
 8002ab8:	0001      	movs	r1, r0
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	0b1b      	lsrs	r3, r3, #12
 8002ac0:	2207      	movs	r2, #7
 8002ac2:	401a      	ands	r2, r3
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	58d3      	ldr	r3, [r2, r3]
 8002aca:	221f      	movs	r2, #31
 8002acc:	4013      	ands	r3, r2
 8002ace:	40d9      	lsrs	r1, r3
 8002ad0:	000b      	movs	r3, r1
}
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	08004fcc 	.word	0x08004fcc

08002ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ae8:	2313      	movs	r3, #19
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2200      	movs	r2, #0
 8002aee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002af0:	2312      	movs	r3, #18
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	029b      	lsls	r3, r3, #10
 8002b00:	4013      	ands	r3, r2
 8002b02:	d100      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b04:	e079      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2011      	movs	r0, #17
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0e:	4b64      	ldr	r3, [pc, #400]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	055b      	lsls	r3, r3, #21
 8002b16:	4013      	ands	r3, r2
 8002b18:	d110      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1a:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b1e:	4b60      	ldr	r3, [pc, #384]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0549      	lsls	r1, r1, #21
 8002b24:	430a      	orrs	r2, r1
 8002b26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b2c:	2380      	movs	r3, #128	; 0x80
 8002b2e:	055b      	lsls	r3, r3, #21
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b36:	183b      	adds	r3, r7, r0
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002b3c:	4b58      	ldr	r3, [pc, #352]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d019      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d014      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002b58:	4b51      	ldr	r3, [pc, #324]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	4a51      	ldr	r2, [pc, #324]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b62:	4b4f      	ldr	r3, [pc, #316]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b66:	4b4e      	ldr	r3, [pc, #312]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b68:	2180      	movs	r1, #128	; 0x80
 8002b6a:	0249      	lsls	r1, r1, #9
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b70:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b74:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b76:	494c      	ldr	r1, [pc, #304]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002b78:	400a      	ands	r2, r1
 8002b7a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002b7c:	4b48      	ldr	r3, [pc, #288]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2201      	movs	r2, #1
 8002b86:	4013      	ands	r3, r2
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fa35 	bl	8000ff8 <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002b92:	e00c      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe fa30 	bl	8000ff8 <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	4a43      	ldr	r2, [pc, #268]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d904      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002ba4:	2313      	movs	r3, #19
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2203      	movs	r2, #3
 8002baa:	701a      	strb	r2, [r3, #0]
          break;
 8002bac:	e004      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002bae:	4b3c      	ldr	r3, [pc, #240]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d0ed      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002bb8:	2313      	movs	r3, #19
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	4b37      	ldr	r3, [pc, #220]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc6:	4a37      	ldr	r2, [pc, #220]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	699a      	ldr	r2, [r3, #24]
 8002bd0:	4b33      	ldr	r3, [pc, #204]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bd6:	e005      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd8:	2312      	movs	r3, #18
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	2213      	movs	r2, #19
 8002bde:	18ba      	adds	r2, r7, r2
 8002be0:	7812      	ldrb	r2, [r2, #0]
 8002be2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002be4:	2311      	movs	r3, #17
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf2:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bf4:	492e      	ldr	r1, [pc, #184]	; (8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf6:	400a      	ands	r2, r1
 8002bf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4013      	ands	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4393      	bics	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c22:	4b1f      	ldr	r3, [pc, #124]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c26:	4a23      	ldr	r2, [pc, #140]	; (8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c32:	430a      	orrs	r2, r1
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	2380      	movs	r3, #128	; 0x80
 8002c3c:	01db      	lsls	r3, r3, #7
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d008      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	0899      	lsrs	r1, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695a      	ldr	r2, [r3, #20]
 8002c4e:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c60:	4b0f      	ldr	r3, [pc, #60]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	4a14      	ldr	r2, [pc, #80]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	da09      	bge.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002c7c:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	22e0      	movs	r2, #224	; 0xe0
 8002c82:	4393      	bics	r3, r2
 8002c84:	0019      	movs	r1, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002c90:	2312      	movs	r3, #18
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	781b      	ldrb	r3, [r3, #0]
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	fffffcff 	.word	0xfffffcff
 8002ca8:	fffeffff 	.word	0xfffeffff
 8002cac:	00001388 	.word	0x00001388
 8002cb0:	efffffff 	.word	0xefffffff
 8002cb4:	ffffcfff 	.word	0xffffcfff
 8002cb8:	ffff3fff 	.word	0xffff3fff

08002cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e04a      	b.n	8002d64 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223d      	movs	r2, #61	; 0x3d
 8002cd2:	5c9b      	ldrb	r3, [r3, r2]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d107      	bne.n	8002cea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	223c      	movs	r2, #60	; 0x3c
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7fd ffb7 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223d      	movs	r2, #61	; 0x3d
 8002cee:	2102      	movs	r1, #2
 8002cf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	0010      	movs	r0, r2
 8002cfe:	f000 fc15 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2248      	movs	r2, #72	; 0x48
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	223e      	movs	r2, #62	; 0x3e
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	223f      	movs	r2, #63	; 0x3f
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2240      	movs	r2, #64	; 0x40
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2241      	movs	r2, #65	; 0x41
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2242      	movs	r2, #66	; 0x42
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2243      	movs	r2, #67	; 0x43
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2244      	movs	r2, #68	; 0x44
 8002d3e:	2101      	movs	r1, #1
 8002d40:	5499      	strb	r1, [r3, r2]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2245      	movs	r2, #69	; 0x45
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2246      	movs	r2, #70	; 0x46
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2247      	movs	r2, #71	; 0x47
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	223d      	movs	r2, #61	; 0x3d
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e04a      	b.n	8002e14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223d      	movs	r2, #61	; 0x3d
 8002d82:	5c9b      	ldrb	r3, [r3, r2]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	223c      	movs	r2, #60	; 0x3c
 8002d8e:	2100      	movs	r1, #0
 8002d90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7fd ff39 	bl	8000c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223d      	movs	r2, #61	; 0x3d
 8002d9e:	2102      	movs	r1, #2
 8002da0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	0019      	movs	r1, r3
 8002dac:	0010      	movs	r0, r2
 8002dae:	f000 fbbd 	bl	800352c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2248      	movs	r2, #72	; 0x48
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	223e      	movs	r2, #62	; 0x3e
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	5499      	strb	r1, [r3, r2]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223f      	movs	r2, #63	; 0x3f
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	5499      	strb	r1, [r3, r2]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2240      	movs	r2, #64	; 0x40
 8002dce:	2101      	movs	r1, #1
 8002dd0:	5499      	strb	r1, [r3, r2]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2241      	movs	r2, #65	; 0x41
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	5499      	strb	r1, [r3, r2]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2242      	movs	r2, #66	; 0x42
 8002dde:	2101      	movs	r1, #1
 8002de0:	5499      	strb	r1, [r3, r2]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2243      	movs	r2, #67	; 0x43
 8002de6:	2101      	movs	r1, #1
 8002de8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2244      	movs	r2, #68	; 0x44
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2245      	movs	r2, #69	; 0x45
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2246      	movs	r2, #70	; 0x46
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2247      	movs	r2, #71	; 0x47
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	223d      	movs	r2, #61	; 0x3d
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	0018      	movs	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d108      	bne.n	8002e3e <HAL_TIM_PWM_Start+0x22>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	223e      	movs	r2, #62	; 0x3e
 8002e30:	5c9b      	ldrb	r3, [r3, r2]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	1e5a      	subs	r2, r3, #1
 8002e38:	4193      	sbcs	r3, r2
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	e037      	b.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d108      	bne.n	8002e56 <HAL_TIM_PWM_Start+0x3a>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	223f      	movs	r2, #63	; 0x3f
 8002e48:	5c9b      	ldrb	r3, [r3, r2]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	1e5a      	subs	r2, r3, #1
 8002e50:	4193      	sbcs	r3, r2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	e02b      	b.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d108      	bne.n	8002e6e <HAL_TIM_PWM_Start+0x52>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	5c9b      	ldrb	r3, [r3, r2]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	1e5a      	subs	r2, r3, #1
 8002e68:	4193      	sbcs	r3, r2
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	e01f      	b.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d108      	bne.n	8002e86 <HAL_TIM_PWM_Start+0x6a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2241      	movs	r2, #65	; 0x41
 8002e78:	5c9b      	ldrb	r3, [r3, r2]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	1e5a      	subs	r2, r3, #1
 8002e80:	4193      	sbcs	r3, r2
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	e013      	b.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b10      	cmp	r3, #16
 8002e8a:	d108      	bne.n	8002e9e <HAL_TIM_PWM_Start+0x82>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2242      	movs	r2, #66	; 0x42
 8002e90:	5c9b      	ldrb	r3, [r3, r2]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	4193      	sbcs	r3, r2
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	e007      	b.n	8002eae <HAL_TIM_PWM_Start+0x92>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2243      	movs	r2, #67	; 0x43
 8002ea2:	5c9b      	ldrb	r3, [r3, r2]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	4193      	sbcs	r3, r2
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e07b      	b.n	8002fae <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <HAL_TIM_PWM_Start+0xaa>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	223e      	movs	r2, #62	; 0x3e
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	5499      	strb	r1, [r3, r2]
 8002ec4:	e023      	b.n	8002f0e <HAL_TIM_PWM_Start+0xf2>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d104      	bne.n	8002ed6 <HAL_TIM_PWM_Start+0xba>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223f      	movs	r2, #63	; 0x3f
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	5499      	strb	r1, [r3, r2]
 8002ed4:	e01b      	b.n	8002f0e <HAL_TIM_PWM_Start+0xf2>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d104      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0xca>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	2102      	movs	r1, #2
 8002ee2:	5499      	strb	r1, [r3, r2]
 8002ee4:	e013      	b.n	8002f0e <HAL_TIM_PWM_Start+0xf2>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b0c      	cmp	r3, #12
 8002eea:	d104      	bne.n	8002ef6 <HAL_TIM_PWM_Start+0xda>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2241      	movs	r2, #65	; 0x41
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	5499      	strb	r1, [r3, r2]
 8002ef4:	e00b      	b.n	8002f0e <HAL_TIM_PWM_Start+0xf2>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b10      	cmp	r3, #16
 8002efa:	d104      	bne.n	8002f06 <HAL_TIM_PWM_Start+0xea>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2242      	movs	r2, #66	; 0x42
 8002f00:	2102      	movs	r1, #2
 8002f02:	5499      	strb	r1, [r3, r2]
 8002f04:	e003      	b.n	8002f0e <HAL_TIM_PWM_Start+0xf2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2243      	movs	r2, #67	; 0x43
 8002f0a:	2102      	movs	r1, #2
 8002f0c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6839      	ldr	r1, [r7, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	0018      	movs	r0, r3
 8002f18:	f000 fe10 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a25      	ldr	r2, [pc, #148]	; (8002fb8 <HAL_TIM_PWM_Start+0x19c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x11e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a24      	ldr	r2, [pc, #144]	; (8002fbc <HAL_TIM_PWM_Start+0x1a0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x11e>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_TIM_PWM_Start+0x1a4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_PWM_Start+0x122>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <HAL_TIM_PWM_Start+0x124>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2180      	movs	r1, #128	; 0x80
 8002f50:	0209      	lsls	r1, r1, #8
 8002f52:	430a      	orrs	r2, r1
 8002f54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_TIM_PWM_Start+0x19c>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d004      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x14e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <HAL_TIM_PWM_Start+0x1a8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d116      	bne.n	8002f98 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	4a15      	ldr	r2, [pc, #84]	; (8002fc8 <HAL_TIM_PWM_Start+0x1ac>)
 8002f72:	4013      	ands	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b06      	cmp	r3, #6
 8002f7a:	d016      	beq.n	8002faa <HAL_TIM_PWM_Start+0x18e>
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	025b      	lsls	r3, r3, #9
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d011      	beq.n	8002faa <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f96:	e008      	b.n	8002faa <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	e000      	b.n	8002fac <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40014400 	.word	0x40014400
 8002fc0:	40014800 	.word	0x40014800
 8002fc4:	40000400 	.word	0x40000400
 8002fc8:	00010007 	.word	0x00010007

08002fcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6839      	ldr	r1, [r7, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 fdac 	bl	8003b3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a35      	ldr	r2, [pc, #212]	; (80030c0 <HAL_TIM_PWM_Stop+0xf4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_TIM_PWM_Stop+0x36>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_TIM_PWM_Stop+0xf8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_PWM_Stop+0x36>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a32      	ldr	r2, [pc, #200]	; (80030c8 <HAL_TIM_PWM_Stop+0xfc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_Stop+0x3a>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_TIM_PWM_Stop+0x3c>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d013      	beq.n	8003034 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <HAL_TIM_PWM_Stop+0x100>)
 8003014:	4013      	ands	r3, r2
 8003016:	d10d      	bne.n	8003034 <HAL_TIM_PWM_Stop+0x68>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <HAL_TIM_PWM_Stop+0x104>)
 8003020:	4013      	ands	r3, r2
 8003022:	d107      	bne.n	8003034 <HAL_TIM_PWM_Stop+0x68>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4929      	ldr	r1, [pc, #164]	; (80030d4 <HAL_TIM_PWM_Stop+0x108>)
 8003030:	400a      	ands	r2, r1
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_TIM_PWM_Stop+0x100>)
 800303c:	4013      	ands	r3, r2
 800303e:	d10d      	bne.n	800305c <HAL_TIM_PWM_Stop+0x90>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a22      	ldr	r2, [pc, #136]	; (80030d0 <HAL_TIM_PWM_Stop+0x104>)
 8003048:	4013      	ands	r3, r2
 800304a:	d107      	bne.n	800305c <HAL_TIM_PWM_Stop+0x90>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2101      	movs	r1, #1
 8003058:	438a      	bics	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_TIM_PWM_Stop+0xa0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	223e      	movs	r2, #62	; 0x3e
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	e023      	b.n	80030b4 <HAL_TIM_PWM_Stop+0xe8>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d104      	bne.n	800307c <HAL_TIM_PWM_Stop+0xb0>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	223f      	movs	r2, #63	; 0x3f
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
 800307a:	e01b      	b.n	80030b4 <HAL_TIM_PWM_Stop+0xe8>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b08      	cmp	r3, #8
 8003080:	d104      	bne.n	800308c <HAL_TIM_PWM_Stop+0xc0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	e013      	b.n	80030b4 <HAL_TIM_PWM_Stop+0xe8>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2b0c      	cmp	r3, #12
 8003090:	d104      	bne.n	800309c <HAL_TIM_PWM_Stop+0xd0>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2241      	movs	r2, #65	; 0x41
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]
 800309a:	e00b      	b.n	80030b4 <HAL_TIM_PWM_Stop+0xe8>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d104      	bne.n	80030ac <HAL_TIM_PWM_Stop+0xe0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2242      	movs	r2, #66	; 0x42
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]
 80030aa:	e003      	b.n	80030b4 <HAL_TIM_PWM_Stop+0xe8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2243      	movs	r2, #67	; 0x43
 80030b0:	2101      	movs	r1, #1
 80030b2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b002      	add	sp, #8
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40012c00 	.word	0x40012c00
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800
 80030cc:	00001111 	.word	0x00001111
 80030d0:	00000444 	.word	0x00000444
 80030d4:	ffff7fff 	.word	0xffff7fff

080030d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2202      	movs	r2, #2
 80030f4:	4013      	ands	r3, r2
 80030f6:	d021      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d01d      	beq.n	800313c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2203      	movs	r2, #3
 8003106:	4252      	negs	r2, r2
 8003108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	2203      	movs	r2, #3
 8003118:	4013      	ands	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	0018      	movs	r0, r3
 8003120:	f000 f9ec 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003124:	e007      	b.n	8003136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	0018      	movs	r0, r3
 800312a:	f000 f9df 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0018      	movs	r0, r3
 8003132:	f000 f9eb 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	2204      	movs	r2, #4
 8003140:	4013      	ands	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2204      	movs	r2, #4
 8003148:	4013      	ands	r3, r2
 800314a:	d01e      	beq.n	800318a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2205      	movs	r2, #5
 8003152:	4252      	negs	r2, r2
 8003154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	23c0      	movs	r3, #192	; 0xc0
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d004      	beq.n	8003174 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0018      	movs	r0, r3
 800316e:	f000 f9c5 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003172:	e007      	b.n	8003184 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f9b8 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 f9c4 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2208      	movs	r2, #8
 800318e:	4013      	ands	r3, r2
 8003190:	d021      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2208      	movs	r2, #8
 8003196:	4013      	ands	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2209      	movs	r2, #9
 80031a0:	4252      	negs	r2, r2
 80031a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2204      	movs	r2, #4
 80031a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2203      	movs	r2, #3
 80031b2:	4013      	ands	r3, r2
 80031b4:	d004      	beq.n	80031c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 f99f 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80031be:	e007      	b.n	80031d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f000 f992 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f99e 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2210      	movs	r2, #16
 80031da:	4013      	ands	r3, r2
 80031dc:	d022      	beq.n	8003224 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2210      	movs	r2, #16
 80031e2:	4013      	ands	r3, r2
 80031e4:	d01e      	beq.n	8003224 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2211      	movs	r2, #17
 80031ec:	4252      	negs	r2, r2
 80031ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2208      	movs	r2, #8
 80031f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	23c0      	movs	r3, #192	; 0xc0
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4013      	ands	r3, r2
 8003202:	d004      	beq.n	800320e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	0018      	movs	r0, r3
 8003208:	f000 f978 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 800320c:	e007      	b.n	800321e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 f96b 	bl	80034ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f000 f977 	bl	800350c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2201      	movs	r2, #1
 8003228:	4013      	ands	r3, r2
 800322a:	d00c      	beq.n	8003246 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	4013      	ands	r3, r2
 8003232:	d008      	beq.n	8003246 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2202      	movs	r2, #2
 800323a:	4252      	negs	r2, r2
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	0018      	movs	r0, r3
 8003242:	f000 f94b 	bl	80034dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2280      	movs	r2, #128	; 0x80
 800324a:	4013      	ands	r3, r2
 800324c:	d00c      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	4013      	ands	r3, r2
 8003254:	d008      	beq.n	8003268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2281      	movs	r2, #129	; 0x81
 800325c:	4252      	negs	r2, r2
 800325e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fcf8 	bl	8003c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d00b      	beq.n	800328a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	4013      	ands	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <HAL_TIM_IRQHandler+0x200>)
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0018      	movs	r0, r3
 8003286:	f000 fcef 	bl	8003c68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2240      	movs	r2, #64	; 0x40
 800328e:	4013      	ands	r3, r2
 8003290:	d00c      	beq.n	80032ac <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	4013      	ands	r3, r2
 8003298:	d008      	beq.n	80032ac <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2241      	movs	r2, #65	; 0x41
 80032a0:	4252      	negs	r2, r2
 80032a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f938 	bl	800351c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d00c      	beq.n	80032ce <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	4013      	ands	r3, r2
 80032ba:	d008      	beq.n	80032ce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	4252      	negs	r2, r2
 80032c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fcbd 	bl	8003c48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	46bd      	mov	sp, r7
 80032d2:	b004      	add	sp, #16
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	fffffeff 	.word	0xfffffeff

080032dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2317      	movs	r3, #23
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	223c      	movs	r2, #60	; 0x3c
 80032f4:	5c9b      	ldrb	r3, [r3, r2]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0e5      	b.n	80034ca <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	223c      	movs	r2, #60	; 0x3c
 8003302:	2101      	movs	r1, #1
 8003304:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b14      	cmp	r3, #20
 800330a:	d900      	bls.n	800330e <HAL_TIM_PWM_ConfigChannel+0x32>
 800330c:	e0d1      	b.n	80034b2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	009a      	lsls	r2, r3, #2
 8003312:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f000 f96e 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2108      	movs	r1, #8
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2104      	movs	r1, #4
 8003344:	438a      	bics	r2, r1
 8003346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6999      	ldr	r1, [r3, #24]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	619a      	str	r2, [r3, #24]
      break;
 800335a:	e0af      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	0011      	movs	r1, r2
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f9cd 	bl	8003704 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699a      	ldr	r2, [r3, #24]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2180      	movs	r1, #128	; 0x80
 8003376:	0109      	lsls	r1, r1, #4
 8003378:	430a      	orrs	r2, r1
 800337a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4954      	ldr	r1, [pc, #336]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003388:	400a      	ands	r2, r1
 800338a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6999      	ldr	r1, [r3, #24]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	021a      	lsls	r2, r3, #8
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	619a      	str	r2, [r3, #24]
      break;
 80033a0:	e08c      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	0011      	movs	r1, r2
 80033aa:	0018      	movs	r0, r3
 80033ac:	f000 fa28 	bl	8003800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2108      	movs	r1, #8
 80033bc:	430a      	orrs	r2, r1
 80033be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2104      	movs	r1, #4
 80033cc:	438a      	bics	r2, r1
 80033ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69d9      	ldr	r1, [r3, #28]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	61da      	str	r2, [r3, #28]
      break;
 80033e2:	e06b      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	0011      	movs	r1, r2
 80033ec:	0018      	movs	r0, r3
 80033ee:	f000 fa89 	bl	8003904 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2180      	movs	r1, #128	; 0x80
 80033fe:	0109      	lsls	r1, r1, #4
 8003400:	430a      	orrs	r2, r1
 8003402:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4932      	ldr	r1, [pc, #200]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003410:	400a      	ands	r2, r1
 8003412:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69d9      	ldr	r1, [r3, #28]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	021a      	lsls	r2, r3, #8
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	61da      	str	r2, [r3, #28]
      break;
 8003428:	e048      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	0011      	movs	r1, r2
 8003432:	0018      	movs	r0, r3
 8003434:	f000 faca 	bl	80039cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2108      	movs	r1, #8
 8003444:	430a      	orrs	r2, r1
 8003446:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2104      	movs	r1, #4
 8003454:	438a      	bics	r2, r1
 8003456:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	691a      	ldr	r2, [r3, #16]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800346a:	e027      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	0011      	movs	r1, r2
 8003474:	0018      	movs	r0, r3
 8003476:	f000 fb03 	bl	8003a80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2180      	movs	r1, #128	; 0x80
 8003486:	0109      	lsls	r1, r1, #4
 8003488:	430a      	orrs	r2, r1
 800348a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4910      	ldr	r1, [pc, #64]	; (80034d8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003498:	400a      	ands	r2, r1
 800349a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	021a      	lsls	r2, r3, #8
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034b0:	e004      	b.n	80034bc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80034b2:	2317      	movs	r3, #23
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2201      	movs	r2, #1
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	223c      	movs	r2, #60	; 0x3c
 80034c0:	2100      	movs	r1, #0
 80034c2:	5499      	strb	r1, [r3, r2]

  return status;
 80034c4:	2317      	movs	r3, #23
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	781b      	ldrb	r3, [r3, #0]
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b006      	add	sp, #24
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	08004fec 	.word	0x08004fec
 80034d8:	fffffbff 	.word	0xfffffbff

080034dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a2b      	ldr	r2, [pc, #172]	; (80035ec <TIM_Base_SetConfig+0xc0>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d003      	beq.n	800354c <TIM_Base_SetConfig+0x20>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <TIM_Base_SetConfig+0xc4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d108      	bne.n	800355e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2270      	movs	r2, #112	; 0x70
 8003550:	4393      	bics	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a22      	ldr	r2, [pc, #136]	; (80035ec <TIM_Base_SetConfig+0xc0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00f      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <TIM_Base_SetConfig+0xc4>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00b      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <TIM_Base_SetConfig+0xc8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d007      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a1f      	ldr	r2, [pc, #124]	; (80035f8 <TIM_Base_SetConfig+0xcc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d003      	beq.n	8003586 <TIM_Base_SetConfig+0x5a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <TIM_Base_SetConfig+0xd0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d108      	bne.n	8003598 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <TIM_Base_SetConfig+0xd4>)
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	4393      	bics	r3, r2
 800359e:	001a      	movs	r2, r3
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <TIM_Base_SetConfig+0xc0>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0xaa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <TIM_Base_SetConfig+0xcc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0xaa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <TIM_Base_SetConfig+0xd0>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d103      	bne.n	80035de <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	615a      	str	r2, [r3, #20]
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b004      	add	sp, #16
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	40012c00 	.word	0x40012c00
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40002000 	.word	0x40002000
 80035f8:	40014400 	.word	0x40014400
 80035fc:	40014800 	.word	0x40014800
 8003600:	fffffcff 	.word	0xfffffcff

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	2201      	movs	r2, #1
 800361a:	4393      	bics	r3, r2
 800361c:	001a      	movs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	699b      	ldr	r3, [r3, #24]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4a2e      	ldr	r2, [pc, #184]	; (80036ec <TIM_OC1_SetConfig+0xe8>)
 8003632:	4013      	ands	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2203      	movs	r2, #3
 800363a:	4393      	bics	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	2202      	movs	r2, #2
 800364c:	4393      	bics	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_OC1_SetConfig+0xec>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d007      	beq.n	8003672 <TIM_OC1_SetConfig+0x6e>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <TIM_OC1_SetConfig+0xf0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d003      	beq.n	8003672 <TIM_OC1_SetConfig+0x6e>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <TIM_OC1_SetConfig+0xf4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10c      	bne.n	800368c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2208      	movs	r2, #8
 8003676:	4393      	bics	r3, r2
 8003678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2204      	movs	r2, #4
 8003688:	4393      	bics	r3, r2
 800368a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <TIM_OC1_SetConfig+0xec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_OC1_SetConfig+0xa0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <TIM_OC1_SetConfig+0xf0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d003      	beq.n	80036a4 <TIM_OC1_SetConfig+0xa0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a16      	ldr	r2, [pc, #88]	; (80036f8 <TIM_OC1_SetConfig+0xf4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d111      	bne.n	80036c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <TIM_OC1_SetConfig+0xf8>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4a14      	ldr	r2, [pc, #80]	; (8003700 <TIM_OC1_SetConfig+0xfc>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	b006      	add	sp, #24
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	fffeff8f 	.word	0xfffeff8f
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	fffffeff 	.word	0xfffffeff
 8003700:	fffffdff 	.word	0xfffffdff

08003704 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	2210      	movs	r2, #16
 800371a:	4393      	bics	r3, r2
 800371c:	001a      	movs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a2c      	ldr	r2, [pc, #176]	; (80037e4 <TIM_OC2_SetConfig+0xe0>)
 8003732:	4013      	ands	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	4a2b      	ldr	r2, [pc, #172]	; (80037e8 <TIM_OC2_SetConfig+0xe4>)
 800373a:	4013      	ands	r3, r2
 800373c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2220      	movs	r2, #32
 800374e:	4393      	bics	r3, r2
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <TIM_OC2_SetConfig+0xe8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10d      	bne.n	8003782 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	4393      	bics	r3, r2
 800376c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	4393      	bics	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a19      	ldr	r2, [pc, #100]	; (80037ec <TIM_OC2_SetConfig+0xe8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_OC2_SetConfig+0x96>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <TIM_OC2_SetConfig+0xec>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_OC2_SetConfig+0x96>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <TIM_OC2_SetConfig+0xf0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d113      	bne.n	80037c2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4a16      	ldr	r2, [pc, #88]	; (80037f8 <TIM_OC2_SetConfig+0xf4>)
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4a15      	ldr	r2, [pc, #84]	; (80037fc <TIM_OC2_SetConfig+0xf8>)
 80037a6:	4013      	ands	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b006      	add	sp, #24
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	feff8fff 	.word	0xfeff8fff
 80037e8:	fffffcff 	.word	0xfffffcff
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40014400 	.word	0x40014400
 80037f4:	40014800 	.word	0x40014800
 80037f8:	fffffbff 	.word	0xfffffbff
 80037fc:	fffff7ff 	.word	0xfffff7ff

08003800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a31      	ldr	r2, [pc, #196]	; (80038dc <TIM_OC3_SetConfig+0xdc>)
 8003816:	401a      	ands	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4a2d      	ldr	r2, [pc, #180]	; (80038e0 <TIM_OC3_SetConfig+0xe0>)
 800382c:	4013      	ands	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2203      	movs	r2, #3
 8003834:	4393      	bics	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <TIM_OC3_SetConfig+0xe4>)
 8003846:	4013      	ands	r3, r2
 8003848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <TIM_OC3_SetConfig+0xe8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d10d      	bne.n	800387a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <TIM_OC3_SetConfig+0xec>)
 8003862:	4013      	ands	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <TIM_OC3_SetConfig+0xf0>)
 8003876:	4013      	ands	r3, r2
 8003878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <TIM_OC3_SetConfig+0xe8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d007      	beq.n	8003892 <TIM_OC3_SetConfig+0x92>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <TIM_OC3_SetConfig+0xf4>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d003      	beq.n	8003892 <TIM_OC3_SetConfig+0x92>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1a      	ldr	r2, [pc, #104]	; (80038f8 <TIM_OC3_SetConfig+0xf8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d113      	bne.n	80038ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <TIM_OC3_SetConfig+0xfc>)
 8003896:	4013      	ands	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	4a18      	ldr	r2, [pc, #96]	; (8003900 <TIM_OC3_SetConfig+0x100>)
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	621a      	str	r2, [r3, #32]
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b006      	add	sp, #24
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	fffffeff 	.word	0xfffffeff
 80038e0:	fffeff8f 	.word	0xfffeff8f
 80038e4:	fffffdff 	.word	0xfffffdff
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	fffff7ff 	.word	0xfffff7ff
 80038f0:	fffffbff 	.word	0xfffffbff
 80038f4:	40014400 	.word	0x40014400
 80038f8:	40014800 	.word	0x40014800
 80038fc:	ffffefff 	.word	0xffffefff
 8003900:	ffffdfff 	.word	0xffffdfff

08003904 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	4a24      	ldr	r2, [pc, #144]	; (80039ac <TIM_OC4_SetConfig+0xa8>)
 800391a:	401a      	ands	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a20      	ldr	r2, [pc, #128]	; (80039b0 <TIM_OC4_SetConfig+0xac>)
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <TIM_OC4_SetConfig+0xb0>)
 8003938:	4013      	ands	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <TIM_OC4_SetConfig+0xb4>)
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a17      	ldr	r2, [pc, #92]	; (80039bc <TIM_OC4_SetConfig+0xb8>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_OC4_SetConfig+0x70>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <TIM_OC4_SetConfig+0xbc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC4_SetConfig+0x70>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a15      	ldr	r2, [pc, #84]	; (80039c4 <TIM_OC4_SetConfig+0xc0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d109      	bne.n	8003988 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	4a14      	ldr	r2, [pc, #80]	; (80039c8 <TIM_OC4_SetConfig+0xc4>)
 8003978:	4013      	ands	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	019b      	lsls	r3, r3, #6
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685a      	ldr	r2, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	621a      	str	r2, [r3, #32]
}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b006      	add	sp, #24
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	ffffefff 	.word	0xffffefff
 80039b0:	feff8fff 	.word	0xfeff8fff
 80039b4:	fffffcff 	.word	0xfffffcff
 80039b8:	ffffdfff 	.word	0xffffdfff
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	ffffbfff 	.word	0xffffbfff

080039cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <TIM_OC5_SetConfig+0x9c>)
 80039e2:	401a      	ands	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <TIM_OC5_SetConfig+0xa0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4a19      	ldr	r2, [pc, #100]	; (8003a70 <TIM_OC5_SetConfig+0xa4>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	041b      	lsls	r3, r3, #16
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a15      	ldr	r2, [pc, #84]	; (8003a74 <TIM_OC5_SetConfig+0xa8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <TIM_OC5_SetConfig+0x66>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a14      	ldr	r2, [pc, #80]	; (8003a78 <TIM_OC5_SetConfig+0xac>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_OC5_SetConfig+0x66>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a13      	ldr	r2, [pc, #76]	; (8003a7c <TIM_OC5_SetConfig+0xb0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d109      	bne.n	8003a46 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4a0c      	ldr	r2, [pc, #48]	; (8003a68 <TIM_OC5_SetConfig+0x9c>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	021b      	lsls	r3, r3, #8
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	621a      	str	r2, [r3, #32]
}
 8003a60:	46c0      	nop			; (mov r8, r8)
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b006      	add	sp, #24
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	fffeffff 	.word	0xfffeffff
 8003a6c:	fffeff8f 	.word	0xfffeff8f
 8003a70:	fffdffff 	.word	0xfffdffff
 8003a74:	40012c00 	.word	0x40012c00
 8003a78:	40014400 	.word	0x40014400
 8003a7c:	40014800 	.word	0x40014800

08003a80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <TIM_OC6_SetConfig+0xa0>)
 8003a96:	401a      	ands	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a1e      	ldr	r2, [pc, #120]	; (8003b24 <TIM_OC6_SetConfig+0xa4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4a1a      	ldr	r2, [pc, #104]	; (8003b28 <TIM_OC6_SetConfig+0xa8>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	051b      	lsls	r3, r3, #20
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <TIM_OC6_SetConfig+0xac>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x68>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <TIM_OC6_SetConfig+0xb0>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC6_SetConfig+0x68>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a14      	ldr	r2, [pc, #80]	; (8003b34 <TIM_OC6_SetConfig+0xb4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d109      	bne.n	8003afc <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	4a13      	ldr	r2, [pc, #76]	; (8003b38 <TIM_OC6_SetConfig+0xb8>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	029b      	lsls	r3, r3, #10
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b006      	add	sp, #24
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	ffefffff 	.word	0xffefffff
 8003b24:	feff8fff 	.word	0xfeff8fff
 8003b28:	ffdfffff 	.word	0xffdfffff
 8003b2c:	40012c00 	.word	0x40012c00
 8003b30:	40014400 	.word	0x40014400
 8003b34:	40014800 	.word	0x40014800
 8003b38:	fffbffff 	.word	0xfffbffff

08003b3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	221f      	movs	r2, #31
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	2201      	movs	r2, #1
 8003b50:	409a      	lsls	r2, r3
 8003b52:	0013      	movs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	43d2      	mvns	r2, r2
 8003b5e:	401a      	ands	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	211f      	movs	r1, #31
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	6879      	ldr	r1, [r7, #4]
 8003b70:	4099      	lsls	r1, r3
 8003b72:	000b      	movs	r3, r1
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	b006      	add	sp, #24
 8003b80:	bd80      	pop	{r7, pc}
	...

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	223c      	movs	r2, #60	; 0x3c
 8003b92:	5c9b      	ldrb	r3, [r3, r2]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e04a      	b.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	223c      	movs	r2, #60	; 0x3c
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	223d      	movs	r2, #61	; 0x3d
 8003ba8:	2102      	movs	r1, #2
 8003baa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1e      	ldr	r2, [pc, #120]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2270      	movs	r2, #112	; 0x70
 8003bdc:	4393      	bics	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a11      	ldr	r2, [pc, #68]	; (8003c3c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d004      	beq.n	8003c06 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10c      	bne.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	4393      	bics	r3, r2
 8003c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223d      	movs	r2, #61	; 0x3d
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223c      	movs	r2, #60	; 0x3c
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b004      	add	sp, #16
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	ff0fffff 	.word	0xff0fffff
 8003c44:	40000400 	.word	0x40000400

08003c48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	b002      	add	sp, #8
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	46bd      	mov	sp, r7
 8003c64:	b002      	add	sp, #8
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b002      	add	sp, #8
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e046      	b.n	8003d18 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2288      	movs	r2, #136	; 0x88
 8003c8e:	589b      	ldr	r3, [r3, r2]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d107      	bne.n	8003ca4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2284      	movs	r2, #132	; 0x84
 8003c98:	2100      	movs	r1, #0
 8003c9a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fd f840 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2288      	movs	r2, #136	; 0x88
 8003ca8:	2124      	movs	r1, #36	; 0x24
 8003caa:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	438a      	bics	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fa4e 	bl	8004168 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f000 f8cc 	bl	8003e6c <UART_SetConfig>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e01c      	b.n	8003d18 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	490d      	ldr	r1, [pc, #52]	; (8003d20 <HAL_UART_Init+0xa8>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	212a      	movs	r1, #42	; 0x2a
 8003cfa:	438a      	bics	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2101      	movs	r1, #1
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f000 fadd 	bl	80042d0 <UART_CheckIdleState>
 8003d16:	0003      	movs	r3, r0
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	ffffb7ff 	.word	0xffffb7ff

08003d24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	; 0x28
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	603b      	str	r3, [r7, #0]
 8003d30:	1dbb      	adds	r3, r7, #6
 8003d32:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2288      	movs	r2, #136	; 0x88
 8003d38:	589b      	ldr	r3, [r3, r2]
 8003d3a:	2b20      	cmp	r3, #32
 8003d3c:	d000      	beq.n	8003d40 <HAL_UART_Transmit+0x1c>
 8003d3e:	e090      	b.n	8003e62 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_UART_Transmit+0x2a>
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	881b      	ldrh	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e088      	b.n	8003e64 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	015b      	lsls	r3, r3, #5
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d109      	bne.n	8003d72 <HAL_UART_Transmit+0x4e>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d105      	bne.n	8003d72 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d001      	beq.n	8003d72 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e078      	b.n	8003e64 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2290      	movs	r2, #144	; 0x90
 8003d76:	2100      	movs	r1, #0
 8003d78:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2288      	movs	r2, #136	; 0x88
 8003d7e:	2121      	movs	r1, #33	; 0x21
 8003d80:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d82:	f7fd f939 	bl	8000ff8 <HAL_GetTick>
 8003d86:	0003      	movs	r3, r0
 8003d88:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1dba      	adds	r2, r7, #6
 8003d8e:	2154      	movs	r1, #84	; 0x54
 8003d90:	8812      	ldrh	r2, [r2, #0]
 8003d92:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	1dba      	adds	r2, r7, #6
 8003d98:	2156      	movs	r1, #86	; 0x56
 8003d9a:	8812      	ldrh	r2, [r2, #0]
 8003d9c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	015b      	lsls	r3, r3, #5
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d108      	bne.n	8003dbc <HAL_UART_Transmit+0x98>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d104      	bne.n	8003dbc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e003      	b.n	8003dc4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dc4:	e030      	b.n	8003e28 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	9300      	str	r3, [sp, #0]
 8003dce:	0013      	movs	r3, r2
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2180      	movs	r1, #128	; 0x80
 8003dd4:	f000 fb26 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003dd8:	1e03      	subs	r3, r0, #0
 8003dda:	d005      	beq.n	8003de8 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2288      	movs	r2, #136	; 0x88
 8003de0:	2120      	movs	r1, #32
 8003de2:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e03d      	b.n	8003e64 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	001a      	movs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	05d2      	lsls	r2, r2, #23
 8003dfa:	0dd2      	lsrs	r2, r2, #23
 8003dfc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	3302      	adds	r3, #2
 8003e02:	61bb      	str	r3, [r7, #24]
 8003e04:	e007      	b.n	8003e16 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	3301      	adds	r3, #1
 8003e14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2256      	movs	r2, #86	; 0x56
 8003e1a:	5a9b      	ldrh	r3, [r3, r2]
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b299      	uxth	r1, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2256      	movs	r2, #86	; 0x56
 8003e26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2256      	movs	r2, #86	; 0x56
 8003e2c:	5a9b      	ldrh	r3, [r3, r2]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1c8      	bne.n	8003dc6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	0013      	movs	r3, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2140      	movs	r1, #64	; 0x40
 8003e42:	f000 faef 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2288      	movs	r2, #136	; 0x88
 8003e4e:	2120      	movs	r1, #32
 8003e50:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e006      	b.n	8003e64 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2288      	movs	r2, #136	; 0x88
 8003e5a:	2120      	movs	r1, #32
 8003e5c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b008      	add	sp, #32
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e74:	231e      	movs	r3, #30
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4aab      	ldr	r2, [pc, #684]	; (8004148 <UART_SetConfig+0x2dc>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	0019      	movs	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4aa6      	ldr	r2, [pc, #664]	; (800414c <UART_SetConfig+0x2e0>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a9d      	ldr	r2, [pc, #628]	; (8004150 <UART_SetConfig+0x2e4>)
 8003eda:	4013      	ands	r3, r2
 8003edc:	0019      	movs	r1, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eee:	220f      	movs	r2, #15
 8003ef0:	4393      	bics	r3, r2
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a93      	ldr	r2, [pc, #588]	; (8004154 <UART_SetConfig+0x2e8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d127      	bne.n	8003f5a <UART_SetConfig+0xee>
 8003f0a:	4b93      	ldr	r3, [pc, #588]	; (8004158 <UART_SetConfig+0x2ec>)
 8003f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0e:	2203      	movs	r2, #3
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b03      	cmp	r3, #3
 8003f14:	d017      	beq.n	8003f46 <UART_SetConfig+0xda>
 8003f16:	d81b      	bhi.n	8003f50 <UART_SetConfig+0xe4>
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d00a      	beq.n	8003f32 <UART_SetConfig+0xc6>
 8003f1c:	d818      	bhi.n	8003f50 <UART_SetConfig+0xe4>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <UART_SetConfig+0xbc>
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d00a      	beq.n	8003f3c <UART_SetConfig+0xd0>
 8003f26:	e013      	b.n	8003f50 <UART_SetConfig+0xe4>
 8003f28:	231f      	movs	r3, #31
 8003f2a:	18fb      	adds	r3, r7, r3
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e021      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f32:	231f      	movs	r3, #31
 8003f34:	18fb      	adds	r3, r7, r3
 8003f36:	2202      	movs	r2, #2
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e01c      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f3c:	231f      	movs	r3, #31
 8003f3e:	18fb      	adds	r3, r7, r3
 8003f40:	2204      	movs	r2, #4
 8003f42:	701a      	strb	r2, [r3, #0]
 8003f44:	e017      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f46:	231f      	movs	r3, #31
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e012      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f50:	231f      	movs	r3, #31
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2210      	movs	r2, #16
 8003f56:	701a      	strb	r2, [r3, #0]
 8003f58:	e00d      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a7f      	ldr	r2, [pc, #508]	; (800415c <UART_SetConfig+0x2f0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d104      	bne.n	8003f6e <UART_SetConfig+0x102>
 8003f64:	231f      	movs	r3, #31
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2200      	movs	r2, #0
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e003      	b.n	8003f76 <UART_SetConfig+0x10a>
 8003f6e:	231f      	movs	r3, #31
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	2210      	movs	r2, #16
 8003f74:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69da      	ldr	r2, [r3, #28]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d000      	beq.n	8003f84 <UART_SetConfig+0x118>
 8003f82:	e06f      	b.n	8004064 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003f84:	231f      	movs	r3, #31
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b08      	cmp	r3, #8
 8003f8c:	d01f      	beq.n	8003fce <UART_SetConfig+0x162>
 8003f8e:	dc22      	bgt.n	8003fd6 <UART_SetConfig+0x16a>
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d017      	beq.n	8003fc4 <UART_SetConfig+0x158>
 8003f94:	dc1f      	bgt.n	8003fd6 <UART_SetConfig+0x16a>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <UART_SetConfig+0x134>
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d005      	beq.n	8003faa <UART_SetConfig+0x13e>
 8003f9e:	e01a      	b.n	8003fd6 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe fd86 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	0003      	movs	r3, r0
 8003fa6:	61bb      	str	r3, [r7, #24]
        break;
 8003fa8:	e01c      	b.n	8003fe4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003faa:	4b6b      	ldr	r3, [pc, #428]	; (8004158 <UART_SetConfig+0x2ec>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	0019      	movs	r1, r3
 8003fb8:	4869      	ldr	r0, [pc, #420]	; (8004160 <UART_SetConfig+0x2f4>)
 8003fba:	f7fc f8b7 	bl	800012c <__udivsi3>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	61bb      	str	r3, [r7, #24]
        break;
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc4:	f7fe fd2a 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8003fc8:	0003      	movs	r3, r0
 8003fca:	61bb      	str	r3, [r7, #24]
        break;
 8003fcc:	e00a      	b.n	8003fe4 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	021b      	lsls	r3, r3, #8
 8003fd2:	61bb      	str	r3, [r7, #24]
        break;
 8003fd4:	e006      	b.n	8003fe4 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fda:	231e      	movs	r3, #30
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
        break;
 8003fe2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d100      	bne.n	8003fec <UART_SetConfig+0x180>
 8003fea:	e097      	b.n	800411c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff0:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <UART_SetConfig+0x2f8>)
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	5ad3      	ldrh	r3, [r2, r3]
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	69b8      	ldr	r0, [r7, #24]
 8003ffa:	f7fc f897 	bl	800012c <__udivsi3>
 8003ffe:	0003      	movs	r3, r0
 8004000:	005a      	lsls	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	18d2      	adds	r2, r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	0019      	movs	r1, r3
 8004010:	0010      	movs	r0, r2
 8004012:	f7fc f88b 	bl	800012c <__udivsi3>
 8004016:	0003      	movs	r3, r0
 8004018:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b0f      	cmp	r3, #15
 800401e:	d91c      	bls.n	800405a <UART_SetConfig+0x1ee>
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	025b      	lsls	r3, r3, #9
 8004026:	429a      	cmp	r2, r3
 8004028:	d217      	bcs.n	800405a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	b29a      	uxth	r2, r3
 800402e:	200e      	movs	r0, #14
 8004030:	183b      	adds	r3, r7, r0
 8004032:	210f      	movs	r1, #15
 8004034:	438a      	bics	r2, r1
 8004036:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	085b      	lsrs	r3, r3, #1
 800403c:	b29b      	uxth	r3, r3
 800403e:	2207      	movs	r2, #7
 8004040:	4013      	ands	r3, r2
 8004042:	b299      	uxth	r1, r3
 8004044:	183b      	adds	r3, r7, r0
 8004046:	183a      	adds	r2, r7, r0
 8004048:	8812      	ldrh	r2, [r2, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	183a      	adds	r2, r7, r0
 8004054:	8812      	ldrh	r2, [r2, #0]
 8004056:	60da      	str	r2, [r3, #12]
 8004058:	e060      	b.n	800411c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800405a:	231e      	movs	r3, #30
 800405c:	18fb      	adds	r3, r7, r3
 800405e:	2201      	movs	r2, #1
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e05b      	b.n	800411c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004064:	231f      	movs	r3, #31
 8004066:	18fb      	adds	r3, r7, r3
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b08      	cmp	r3, #8
 800406c:	d01f      	beq.n	80040ae <UART_SetConfig+0x242>
 800406e:	dc22      	bgt.n	80040b6 <UART_SetConfig+0x24a>
 8004070:	2b04      	cmp	r3, #4
 8004072:	d017      	beq.n	80040a4 <UART_SetConfig+0x238>
 8004074:	dc1f      	bgt.n	80040b6 <UART_SetConfig+0x24a>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <UART_SetConfig+0x214>
 800407a:	2b02      	cmp	r3, #2
 800407c:	d005      	beq.n	800408a <UART_SetConfig+0x21e>
 800407e:	e01a      	b.n	80040b6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004080:	f7fe fd16 	bl	8002ab0 <HAL_RCC_GetPCLK1Freq>
 8004084:	0003      	movs	r3, r0
 8004086:	61bb      	str	r3, [r7, #24]
        break;
 8004088:	e01c      	b.n	80040c4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800408a:	4b33      	ldr	r3, [pc, #204]	; (8004158 <UART_SetConfig+0x2ec>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2207      	movs	r2, #7
 8004092:	4013      	ands	r3, r2
 8004094:	3301      	adds	r3, #1
 8004096:	0019      	movs	r1, r3
 8004098:	4831      	ldr	r0, [pc, #196]	; (8004160 <UART_SetConfig+0x2f4>)
 800409a:	f7fc f847 	bl	800012c <__udivsi3>
 800409e:	0003      	movs	r3, r0
 80040a0:	61bb      	str	r3, [r7, #24]
        break;
 80040a2:	e00f      	b.n	80040c4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a4:	f7fe fcba 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80040a8:	0003      	movs	r3, r0
 80040aa:	61bb      	str	r3, [r7, #24]
        break;
 80040ac:	e00a      	b.n	80040c4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e006      	b.n	80040c4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	231e      	movs	r3, #30
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
        break;
 80040c2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d028      	beq.n	800411c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	4b25      	ldr	r3, [pc, #148]	; (8004164 <UART_SetConfig+0x2f8>)
 80040d0:	0052      	lsls	r2, r2, #1
 80040d2:	5ad3      	ldrh	r3, [r2, r3]
 80040d4:	0019      	movs	r1, r3
 80040d6:	69b8      	ldr	r0, [r7, #24]
 80040d8:	f7fc f828 	bl	800012c <__udivsi3>
 80040dc:	0003      	movs	r3, r0
 80040de:	001a      	movs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	18d2      	adds	r2, r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0019      	movs	r1, r3
 80040ee:	0010      	movs	r0, r2
 80040f0:	f7fc f81c 	bl	800012c <__udivsi3>
 80040f4:	0003      	movs	r3, r0
 80040f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0f      	cmp	r3, #15
 80040fc:	d90a      	bls.n	8004114 <UART_SetConfig+0x2a8>
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	2380      	movs	r3, #128	; 0x80
 8004102:	025b      	lsls	r3, r3, #9
 8004104:	429a      	cmp	r2, r3
 8004106:	d205      	bcs.n	8004114 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	e003      	b.n	800411c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004114:	231e      	movs	r3, #30
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2201      	movs	r2, #1
 800411a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	226a      	movs	r2, #106	; 0x6a
 8004120:	2101      	movs	r1, #1
 8004122:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2268      	movs	r2, #104	; 0x68
 8004128:	2101      	movs	r1, #1
 800412a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004138:	231e      	movs	r3, #30
 800413a:	18fb      	adds	r3, r7, r3
 800413c:	781b      	ldrb	r3, [r3, #0]
}
 800413e:	0018      	movs	r0, r3
 8004140:	46bd      	mov	sp, r7
 8004142:	b008      	add	sp, #32
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	cfff69f3 	.word	0xcfff69f3
 800414c:	ffffcfff 	.word	0xffffcfff
 8004150:	11fff4ff 	.word	0x11fff4ff
 8004154:	40013800 	.word	0x40013800
 8004158:	40021000 	.word	0x40021000
 800415c:	40004400 	.word	0x40004400
 8004160:	02dc6c00 	.word	0x02dc6c00
 8004164:	08005040 	.word	0x08005040

08004168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	2208      	movs	r2, #8
 8004176:	4013      	ands	r3, r2
 8004178:	d00b      	beq.n	8004192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <UART_AdvFeatureConfig+0x144>)
 8004182:	4013      	ands	r3, r2
 8004184:	0019      	movs	r1, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004196:	2201      	movs	r2, #1
 8004198:	4013      	ands	r3, r2
 800419a:	d00b      	beq.n	80041b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4a43      	ldr	r2, [pc, #268]	; (80042b0 <UART_AdvFeatureConfig+0x148>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	0019      	movs	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b8:	2202      	movs	r2, #2
 80041ba:	4013      	ands	r3, r2
 80041bc:	d00b      	beq.n	80041d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	4a3b      	ldr	r2, [pc, #236]	; (80042b4 <UART_AdvFeatureConfig+0x14c>)
 80041c6:	4013      	ands	r3, r2
 80041c8:	0019      	movs	r1, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d00b      	beq.n	80041f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <UART_AdvFeatureConfig+0x150>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	0019      	movs	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	2210      	movs	r2, #16
 80041fe:	4013      	ands	r3, r2
 8004200:	d00b      	beq.n	800421a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a2c      	ldr	r2, [pc, #176]	; (80042bc <UART_AdvFeatureConfig+0x154>)
 800420a:	4013      	ands	r3, r2
 800420c:	0019      	movs	r1, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	2220      	movs	r2, #32
 8004220:	4013      	ands	r3, r2
 8004222:	d00b      	beq.n	800423c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	4a25      	ldr	r2, [pc, #148]	; (80042c0 <UART_AdvFeatureConfig+0x158>)
 800422c:	4013      	ands	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2240      	movs	r2, #64	; 0x40
 8004242:	4013      	ands	r3, r2
 8004244:	d01d      	beq.n	8004282 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	4a1d      	ldr	r2, [pc, #116]	; (80042c4 <UART_AdvFeatureConfig+0x15c>)
 800424e:	4013      	ands	r3, r2
 8004250:	0019      	movs	r1, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	035b      	lsls	r3, r3, #13
 8004266:	429a      	cmp	r2, r3
 8004268:	d10b      	bne.n	8004282 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <UART_AdvFeatureConfig+0x160>)
 8004272:	4013      	ands	r3, r2
 8004274:	0019      	movs	r1, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	2280      	movs	r2, #128	; 0x80
 8004288:	4013      	ands	r3, r2
 800428a:	d00b      	beq.n	80042a4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <UART_AdvFeatureConfig+0x164>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]
  }
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b002      	add	sp, #8
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	ffff7fff 	.word	0xffff7fff
 80042b0:	fffdffff 	.word	0xfffdffff
 80042b4:	fffeffff 	.word	0xfffeffff
 80042b8:	fffbffff 	.word	0xfffbffff
 80042bc:	ffffefff 	.word	0xffffefff
 80042c0:	ffffdfff 	.word	0xffffdfff
 80042c4:	ffefffff 	.word	0xffefffff
 80042c8:	ff9fffff 	.word	0xff9fffff
 80042cc:	fff7ffff 	.word	0xfff7ffff

080042d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b092      	sub	sp, #72	; 0x48
 80042d4:	af02      	add	r7, sp, #8
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2290      	movs	r2, #144	; 0x90
 80042dc:	2100      	movs	r1, #0
 80042de:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e0:	f7fc fe8a 	bl	8000ff8 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2208      	movs	r2, #8
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d12d      	bne.n	8004352 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f8:	2280      	movs	r2, #128	; 0x80
 80042fa:	0391      	lsls	r1, r2, #14
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4a47      	ldr	r2, [pc, #284]	; (800441c <UART_CheckIdleState+0x14c>)
 8004300:	9200      	str	r2, [sp, #0]
 8004302:	2200      	movs	r2, #0
 8004304:	f000 f88e 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d022      	beq.n	8004352 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800430c:	f3ef 8310 	mrs	r3, PRIMASK
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004314:	63bb      	str	r3, [r7, #56]	; 0x38
 8004316:	2301      	movs	r3, #1
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2180      	movs	r1, #128	; 0x80
 800432e:	438a      	bics	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004334:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2288      	movs	r2, #136	; 0x88
 8004342:	2120      	movs	r1, #32
 8004344:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2284      	movs	r2, #132	; 0x84
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e060      	b.n	8004414 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2204      	movs	r2, #4
 800435a:	4013      	ands	r3, r2
 800435c:	2b04      	cmp	r3, #4
 800435e:	d146      	bne.n	80043ee <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	2280      	movs	r2, #128	; 0x80
 8004364:	03d1      	lsls	r1, r2, #15
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4a2c      	ldr	r2, [pc, #176]	; (800441c <UART_CheckIdleState+0x14c>)
 800436a:	9200      	str	r2, [sp, #0]
 800436c:	2200      	movs	r2, #0
 800436e:	f000 f859 	bl	8004424 <UART_WaitOnFlagUntilTimeout>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d03b      	beq.n	80043ee <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004376:	f3ef 8310 	mrs	r3, PRIMASK
 800437a:	60fb      	str	r3, [r7, #12]
  return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437e:	637b      	str	r3, [r7, #52]	; 0x34
 8004380:	2301      	movs	r3, #1
 8004382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	f383 8810 	msr	PRIMASK, r3
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4922      	ldr	r1, [pc, #136]	; (8004420 <UART_CheckIdleState+0x150>)
 8004398:	400a      	ands	r2, r1
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800439e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043a8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b0:	633b      	str	r3, [r7, #48]	; 0x30
 80043b2:	2301      	movs	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f383 8810 	msr	PRIMASK, r3
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2101      	movs	r1, #1
 80043ca:	438a      	bics	r2, r1
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	228c      	movs	r2, #140	; 0x8c
 80043de:	2120      	movs	r1, #32
 80043e0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2284      	movs	r2, #132	; 0x84
 80043e6:	2100      	movs	r1, #0
 80043e8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e012      	b.n	8004414 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2288      	movs	r2, #136	; 0x88
 80043f2:	2120      	movs	r1, #32
 80043f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	228c      	movs	r2, #140	; 0x8c
 80043fa:	2120      	movs	r1, #32
 80043fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2284      	movs	r2, #132	; 0x84
 800440e:	2100      	movs	r1, #0
 8004410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b010      	add	sp, #64	; 0x40
 800441a:	bd80      	pop	{r7, pc}
 800441c:	01ffffff 	.word	0x01ffffff
 8004420:	fffffedf 	.word	0xfffffedf

08004424 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	1dfb      	adds	r3, r7, #7
 8004432:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004434:	e04b      	b.n	80044ce <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	3301      	adds	r3, #1
 800443a:	d048      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800443c:	f7fc fddc 	bl	8000ff8 <HAL_GetTick>
 8004440:	0002      	movs	r2, r0
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	429a      	cmp	r2, r3
 800444a:	d302      	bcc.n	8004452 <UART_WaitOnFlagUntilTimeout+0x2e>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e04b      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2204      	movs	r2, #4
 800445e:	4013      	ands	r3, r2
 8004460:	d035      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2208      	movs	r2, #8
 800446a:	4013      	ands	r3, r2
 800446c:	2b08      	cmp	r3, #8
 800446e:	d111      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2208      	movs	r2, #8
 8004476:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	0018      	movs	r0, r3
 800447c:	f000 f83c 	bl	80044f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2290      	movs	r2, #144	; 0x90
 8004484:	2108      	movs	r1, #8
 8004486:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2284      	movs	r2, #132	; 0x84
 800448c:	2100      	movs	r1, #0
 800448e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e02c      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	401a      	ands	r2, r3
 80044a0:	2380      	movs	r3, #128	; 0x80
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d112      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2280      	movs	r2, #128	; 0x80
 80044ae:	0112      	lsls	r2, r2, #4
 80044b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	0018      	movs	r0, r3
 80044b6:	f000 f81f 	bl	80044f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2290      	movs	r2, #144	; 0x90
 80044be:	2120      	movs	r1, #32
 80044c0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2284      	movs	r2, #132	; 0x84
 80044c6:	2100      	movs	r1, #0
 80044c8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e00f      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	425a      	negs	r2, r3
 80044de:	4153      	adcs	r3, r2
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	001a      	movs	r2, r3
 80044e4:	1dfb      	adds	r3, r7, #7
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d0a4      	beq.n	8004436 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b004      	add	sp, #16
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08e      	sub	sp, #56	; 0x38
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004500:	f3ef 8310 	mrs	r3, PRIMASK
 8004504:	617b      	str	r3, [r7, #20]
  return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
 800450a:	2301      	movs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			; (mov r8, r8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4926      	ldr	r1, [pc, #152]	; (80045bc <UART_EndRxTransfer+0xc4>)
 8004522:	400a      	ands	r2, r1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004528:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f383 8810 	msr	PRIMASK, r3
}
 8004530:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	623b      	str	r3, [r7, #32]
  return(result);
 8004538:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
 800453c:	2301      	movs	r3, #1
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	491b      	ldr	r1, [pc, #108]	; (80045c0 <UART_EndRxTransfer+0xc8>)
 8004554:	400a      	ands	r2, r1
 8004556:	609a      	str	r2, [r3, #8]
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004568:	2b01      	cmp	r3, #1
 800456a:	d118      	bne.n	800459e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800456c:	f3ef 8310 	mrs	r3, PRIMASK
 8004570:	60bb      	str	r3, [r7, #8]
  return(result);
 8004572:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004576:	2301      	movs	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f383 8810 	msr	PRIMASK, r3
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2110      	movs	r1, #16
 800458e:	438a      	bics	r2, r1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	f383 8810 	msr	PRIMASK, r3
}
 800459c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	228c      	movs	r2, #140	; 0x8c
 80045a2:	2120      	movs	r1, #32
 80045a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80045b2:	46c0      	nop			; (mov r8, r8)
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b00e      	add	sp, #56	; 0x38
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	fffffedf 	.word	0xfffffedf
 80045c0:	effffffe 	.word	0xeffffffe

080045c4 <siprintf>:
 80045c4:	b40e      	push	{r1, r2, r3}
 80045c6:	b500      	push	{lr}
 80045c8:	490b      	ldr	r1, [pc, #44]	; (80045f8 <siprintf+0x34>)
 80045ca:	b09c      	sub	sp, #112	; 0x70
 80045cc:	ab1d      	add	r3, sp, #116	; 0x74
 80045ce:	9002      	str	r0, [sp, #8]
 80045d0:	9006      	str	r0, [sp, #24]
 80045d2:	9107      	str	r1, [sp, #28]
 80045d4:	9104      	str	r1, [sp, #16]
 80045d6:	4809      	ldr	r0, [pc, #36]	; (80045fc <siprintf+0x38>)
 80045d8:	4909      	ldr	r1, [pc, #36]	; (8004600 <siprintf+0x3c>)
 80045da:	cb04      	ldmia	r3!, {r2}
 80045dc:	9105      	str	r1, [sp, #20]
 80045de:	6800      	ldr	r0, [r0, #0]
 80045e0:	a902      	add	r1, sp, #8
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	f000 f9a2 	bl	800492c <_svfiprintf_r>
 80045e8:	2200      	movs	r2, #0
 80045ea:	9b02      	ldr	r3, [sp, #8]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	b01c      	add	sp, #112	; 0x70
 80045f0:	bc08      	pop	{r3}
 80045f2:	b003      	add	sp, #12
 80045f4:	4718      	bx	r3
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	7fffffff 	.word	0x7fffffff
 80045fc:	20000058 	.word	0x20000058
 8004600:	ffff0208 	.word	0xffff0208

08004604 <memset>:
 8004604:	0003      	movs	r3, r0
 8004606:	1882      	adds	r2, r0, r2
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	7019      	strb	r1, [r3, #0]
 8004610:	3301      	adds	r3, #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <__errno>:
 8004614:	4b01      	ldr	r3, [pc, #4]	; (800461c <__errno+0x8>)
 8004616:	6818      	ldr	r0, [r3, #0]
 8004618:	4770      	bx	lr
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	20000058 	.word	0x20000058

08004620 <__libc_init_array>:
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	2600      	movs	r6, #0
 8004624:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x38>)
 8004626:	4d0d      	ldr	r5, [pc, #52]	; (800465c <__libc_init_array+0x3c>)
 8004628:	1b64      	subs	r4, r4, r5
 800462a:	10a4      	asrs	r4, r4, #2
 800462c:	42a6      	cmp	r6, r4
 800462e:	d109      	bne.n	8004644 <__libc_init_array+0x24>
 8004630:	2600      	movs	r6, #0
 8004632:	f000 fc6d 	bl	8004f10 <_init>
 8004636:	4c0a      	ldr	r4, [pc, #40]	; (8004660 <__libc_init_array+0x40>)
 8004638:	4d0a      	ldr	r5, [pc, #40]	; (8004664 <__libc_init_array+0x44>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	42a6      	cmp	r6, r4
 8004640:	d105      	bne.n	800464e <__libc_init_array+0x2e>
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	00b3      	lsls	r3, r6, #2
 8004646:	58eb      	ldr	r3, [r5, r3]
 8004648:	4798      	blx	r3
 800464a:	3601      	adds	r6, #1
 800464c:	e7ee      	b.n	800462c <__libc_init_array+0xc>
 800464e:	00b3      	lsls	r3, r6, #2
 8004650:	58eb      	ldr	r3, [r5, r3]
 8004652:	4798      	blx	r3
 8004654:	3601      	adds	r6, #1
 8004656:	e7f2      	b.n	800463e <__libc_init_array+0x1e>
 8004658:	0800508c 	.word	0x0800508c
 800465c:	0800508c 	.word	0x0800508c
 8004660:	08005090 	.word	0x08005090
 8004664:	0800508c 	.word	0x0800508c

08004668 <__retarget_lock_acquire_recursive>:
 8004668:	4770      	bx	lr

0800466a <__retarget_lock_release_recursive>:
 800466a:	4770      	bx	lr

0800466c <_free_r>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	0005      	movs	r5, r0
 8004670:	2900      	cmp	r1, #0
 8004672:	d010      	beq.n	8004696 <_free_r+0x2a>
 8004674:	1f0c      	subs	r4, r1, #4
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	da00      	bge.n	800467e <_free_r+0x12>
 800467c:	18e4      	adds	r4, r4, r3
 800467e:	0028      	movs	r0, r5
 8004680:	f000 f8e2 	bl	8004848 <__malloc_lock>
 8004684:	4a1d      	ldr	r2, [pc, #116]	; (80046fc <_free_r+0x90>)
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <_free_r+0x2c>
 800468c:	6063      	str	r3, [r4, #4]
 800468e:	6014      	str	r4, [r2, #0]
 8004690:	0028      	movs	r0, r5
 8004692:	f000 f8e1 	bl	8004858 <__malloc_unlock>
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	42a3      	cmp	r3, r4
 800469a:	d908      	bls.n	80046ae <_free_r+0x42>
 800469c:	6820      	ldr	r0, [r4, #0]
 800469e:	1821      	adds	r1, r4, r0
 80046a0:	428b      	cmp	r3, r1
 80046a2:	d1f3      	bne.n	800468c <_free_r+0x20>
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	1809      	adds	r1, r1, r0
 80046aa:	6021      	str	r1, [r4, #0]
 80046ac:	e7ee      	b.n	800468c <_free_r+0x20>
 80046ae:	001a      	movs	r2, r3
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <_free_r+0x4e>
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	d9f9      	bls.n	80046ae <_free_r+0x42>
 80046ba:	6811      	ldr	r1, [r2, #0]
 80046bc:	1850      	adds	r0, r2, r1
 80046be:	42a0      	cmp	r0, r4
 80046c0:	d10b      	bne.n	80046da <_free_r+0x6e>
 80046c2:	6820      	ldr	r0, [r4, #0]
 80046c4:	1809      	adds	r1, r1, r0
 80046c6:	1850      	adds	r0, r2, r1
 80046c8:	6011      	str	r1, [r2, #0]
 80046ca:	4283      	cmp	r3, r0
 80046cc:	d1e0      	bne.n	8004690 <_free_r+0x24>
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	1841      	adds	r1, r0, r1
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	6053      	str	r3, [r2, #4]
 80046d8:	e7da      	b.n	8004690 <_free_r+0x24>
 80046da:	42a0      	cmp	r0, r4
 80046dc:	d902      	bls.n	80046e4 <_free_r+0x78>
 80046de:	230c      	movs	r3, #12
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	e7d5      	b.n	8004690 <_free_r+0x24>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	1821      	adds	r1, r4, r0
 80046e8:	428b      	cmp	r3, r1
 80046ea:	d103      	bne.n	80046f4 <_free_r+0x88>
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	1809      	adds	r1, r1, r0
 80046f2:	6021      	str	r1, [r4, #0]
 80046f4:	6063      	str	r3, [r4, #4]
 80046f6:	6054      	str	r4, [r2, #4]
 80046f8:	e7ca      	b.n	8004690 <_free_r+0x24>
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	2000038c 	.word	0x2000038c

08004700 <sbrk_aligned>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0f      	ldr	r6, [pc, #60]	; (8004740 <sbrk_aligned+0x40>)
 8004704:	000d      	movs	r5, r1
 8004706:	6831      	ldr	r1, [r6, #0]
 8004708:	0004      	movs	r4, r0
 800470a:	2900      	cmp	r1, #0
 800470c:	d102      	bne.n	8004714 <sbrk_aligned+0x14>
 800470e:	f000 fba1 	bl	8004e54 <_sbrk_r>
 8004712:	6030      	str	r0, [r6, #0]
 8004714:	0029      	movs	r1, r5
 8004716:	0020      	movs	r0, r4
 8004718:	f000 fb9c 	bl	8004e54 <_sbrk_r>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d00a      	beq.n	8004736 <sbrk_aligned+0x36>
 8004720:	2303      	movs	r3, #3
 8004722:	1cc5      	adds	r5, r0, #3
 8004724:	439d      	bics	r5, r3
 8004726:	42a8      	cmp	r0, r5
 8004728:	d007      	beq.n	800473a <sbrk_aligned+0x3a>
 800472a:	1a29      	subs	r1, r5, r0
 800472c:	0020      	movs	r0, r4
 800472e:	f000 fb91 	bl	8004e54 <_sbrk_r>
 8004732:	3001      	adds	r0, #1
 8004734:	d101      	bne.n	800473a <sbrk_aligned+0x3a>
 8004736:	2501      	movs	r5, #1
 8004738:	426d      	negs	r5, r5
 800473a:	0028      	movs	r0, r5
 800473c:	bd70      	pop	{r4, r5, r6, pc}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	20000390 	.word	0x20000390

08004744 <_malloc_r>:
 8004744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004746:	2203      	movs	r2, #3
 8004748:	1ccb      	adds	r3, r1, #3
 800474a:	4393      	bics	r3, r2
 800474c:	3308      	adds	r3, #8
 800474e:	0006      	movs	r6, r0
 8004750:	001f      	movs	r7, r3
 8004752:	2b0c      	cmp	r3, #12
 8004754:	d238      	bcs.n	80047c8 <_malloc_r+0x84>
 8004756:	270c      	movs	r7, #12
 8004758:	42b9      	cmp	r1, r7
 800475a:	d837      	bhi.n	80047cc <_malloc_r+0x88>
 800475c:	0030      	movs	r0, r6
 800475e:	f000 f873 	bl	8004848 <__malloc_lock>
 8004762:	4b38      	ldr	r3, [pc, #224]	; (8004844 <_malloc_r+0x100>)
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	001c      	movs	r4, r3
 800476a:	2c00      	cmp	r4, #0
 800476c:	d133      	bne.n	80047d6 <_malloc_r+0x92>
 800476e:	0039      	movs	r1, r7
 8004770:	0030      	movs	r0, r6
 8004772:	f7ff ffc5 	bl	8004700 <sbrk_aligned>
 8004776:	0004      	movs	r4, r0
 8004778:	1c43      	adds	r3, r0, #1
 800477a:	d15e      	bne.n	800483a <_malloc_r+0xf6>
 800477c:	9b00      	ldr	r3, [sp, #0]
 800477e:	681c      	ldr	r4, [r3, #0]
 8004780:	0025      	movs	r5, r4
 8004782:	2d00      	cmp	r5, #0
 8004784:	d14e      	bne.n	8004824 <_malloc_r+0xe0>
 8004786:	2c00      	cmp	r4, #0
 8004788:	d051      	beq.n	800482e <_malloc_r+0xea>
 800478a:	6823      	ldr	r3, [r4, #0]
 800478c:	0029      	movs	r1, r5
 800478e:	18e3      	adds	r3, r4, r3
 8004790:	0030      	movs	r0, r6
 8004792:	9301      	str	r3, [sp, #4]
 8004794:	f000 fb5e 	bl	8004e54 <_sbrk_r>
 8004798:	9b01      	ldr	r3, [sp, #4]
 800479a:	4283      	cmp	r3, r0
 800479c:	d147      	bne.n	800482e <_malloc_r+0xea>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	0030      	movs	r0, r6
 80047a2:	1aff      	subs	r7, r7, r3
 80047a4:	0039      	movs	r1, r7
 80047a6:	f7ff ffab 	bl	8004700 <sbrk_aligned>
 80047aa:	3001      	adds	r0, #1
 80047ac:	d03f      	beq.n	800482e <_malloc_r+0xea>
 80047ae:	6823      	ldr	r3, [r4, #0]
 80047b0:	19db      	adds	r3, r3, r7
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	9b00      	ldr	r3, [sp, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d040      	beq.n	800483e <_malloc_r+0xfa>
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	42a2      	cmp	r2, r4
 80047c0:	d133      	bne.n	800482a <_malloc_r+0xe6>
 80047c2:	2200      	movs	r2, #0
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	e014      	b.n	80047f2 <_malloc_r+0xae>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	dac5      	bge.n	8004758 <_malloc_r+0x14>
 80047cc:	230c      	movs	r3, #12
 80047ce:	2500      	movs	r5, #0
 80047d0:	6033      	str	r3, [r6, #0]
 80047d2:	0028      	movs	r0, r5
 80047d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047d6:	6821      	ldr	r1, [r4, #0]
 80047d8:	1bc9      	subs	r1, r1, r7
 80047da:	d420      	bmi.n	800481e <_malloc_r+0xda>
 80047dc:	290b      	cmp	r1, #11
 80047de:	d918      	bls.n	8004812 <_malloc_r+0xce>
 80047e0:	19e2      	adds	r2, r4, r7
 80047e2:	6027      	str	r7, [r4, #0]
 80047e4:	42a3      	cmp	r3, r4
 80047e6:	d112      	bne.n	800480e <_malloc_r+0xca>
 80047e8:	9b00      	ldr	r3, [sp, #0]
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	6863      	ldr	r3, [r4, #4]
 80047ee:	6011      	str	r1, [r2, #0]
 80047f0:	6053      	str	r3, [r2, #4]
 80047f2:	0030      	movs	r0, r6
 80047f4:	0025      	movs	r5, r4
 80047f6:	f000 f82f 	bl	8004858 <__malloc_unlock>
 80047fa:	2207      	movs	r2, #7
 80047fc:	350b      	adds	r5, #11
 80047fe:	1d23      	adds	r3, r4, #4
 8004800:	4395      	bics	r5, r2
 8004802:	1aea      	subs	r2, r5, r3
 8004804:	429d      	cmp	r5, r3
 8004806:	d0e4      	beq.n	80047d2 <_malloc_r+0x8e>
 8004808:	1b5b      	subs	r3, r3, r5
 800480a:	50a3      	str	r3, [r4, r2]
 800480c:	e7e1      	b.n	80047d2 <_malloc_r+0x8e>
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	e7ec      	b.n	80047ec <_malloc_r+0xa8>
 8004812:	6862      	ldr	r2, [r4, #4]
 8004814:	42a3      	cmp	r3, r4
 8004816:	d1d5      	bne.n	80047c4 <_malloc_r+0x80>
 8004818:	9b00      	ldr	r3, [sp, #0]
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e7e9      	b.n	80047f2 <_malloc_r+0xae>
 800481e:	0023      	movs	r3, r4
 8004820:	6864      	ldr	r4, [r4, #4]
 8004822:	e7a2      	b.n	800476a <_malloc_r+0x26>
 8004824:	002c      	movs	r4, r5
 8004826:	686d      	ldr	r5, [r5, #4]
 8004828:	e7ab      	b.n	8004782 <_malloc_r+0x3e>
 800482a:	0013      	movs	r3, r2
 800482c:	e7c4      	b.n	80047b8 <_malloc_r+0x74>
 800482e:	230c      	movs	r3, #12
 8004830:	0030      	movs	r0, r6
 8004832:	6033      	str	r3, [r6, #0]
 8004834:	f000 f810 	bl	8004858 <__malloc_unlock>
 8004838:	e7cb      	b.n	80047d2 <_malloc_r+0x8e>
 800483a:	6027      	str	r7, [r4, #0]
 800483c:	e7d9      	b.n	80047f2 <_malloc_r+0xae>
 800483e:	605b      	str	r3, [r3, #4]
 8004840:	deff      	udf	#255	; 0xff
 8004842:	46c0      	nop			; (mov r8, r8)
 8004844:	2000038c 	.word	0x2000038c

08004848 <__malloc_lock>:
 8004848:	b510      	push	{r4, lr}
 800484a:	4802      	ldr	r0, [pc, #8]	; (8004854 <__malloc_lock+0xc>)
 800484c:	f7ff ff0c 	bl	8004668 <__retarget_lock_acquire_recursive>
 8004850:	bd10      	pop	{r4, pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	20000388 	.word	0x20000388

08004858 <__malloc_unlock>:
 8004858:	b510      	push	{r4, lr}
 800485a:	4802      	ldr	r0, [pc, #8]	; (8004864 <__malloc_unlock+0xc>)
 800485c:	f7ff ff05 	bl	800466a <__retarget_lock_release_recursive>
 8004860:	bd10      	pop	{r4, pc}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	20000388 	.word	0x20000388

08004868 <__ssputs_r>:
 8004868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800486a:	b085      	sub	sp, #20
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	9203      	str	r2, [sp, #12]
 8004870:	688e      	ldr	r6, [r1, #8]
 8004872:	9a01      	ldr	r2, [sp, #4]
 8004874:	0007      	movs	r7, r0
 8004876:	000c      	movs	r4, r1
 8004878:	680b      	ldr	r3, [r1, #0]
 800487a:	4296      	cmp	r6, r2
 800487c:	d831      	bhi.n	80048e2 <__ssputs_r+0x7a>
 800487e:	898a      	ldrh	r2, [r1, #12]
 8004880:	2190      	movs	r1, #144	; 0x90
 8004882:	00c9      	lsls	r1, r1, #3
 8004884:	420a      	tst	r2, r1
 8004886:	d029      	beq.n	80048dc <__ssputs_r+0x74>
 8004888:	2003      	movs	r0, #3
 800488a:	6921      	ldr	r1, [r4, #16]
 800488c:	1a5b      	subs	r3, r3, r1
 800488e:	9302      	str	r3, [sp, #8]
 8004890:	6963      	ldr	r3, [r4, #20]
 8004892:	4343      	muls	r3, r0
 8004894:	0fdd      	lsrs	r5, r3, #31
 8004896:	18ed      	adds	r5, r5, r3
 8004898:	9b01      	ldr	r3, [sp, #4]
 800489a:	9802      	ldr	r0, [sp, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	181b      	adds	r3, r3, r0
 80048a0:	106d      	asrs	r5, r5, #1
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	d900      	bls.n	80048a8 <__ssputs_r+0x40>
 80048a6:	001d      	movs	r5, r3
 80048a8:	0552      	lsls	r2, r2, #21
 80048aa:	d529      	bpl.n	8004900 <__ssputs_r+0x98>
 80048ac:	0029      	movs	r1, r5
 80048ae:	0038      	movs	r0, r7
 80048b0:	f7ff ff48 	bl	8004744 <_malloc_r>
 80048b4:	1e06      	subs	r6, r0, #0
 80048b6:	d02d      	beq.n	8004914 <__ssputs_r+0xac>
 80048b8:	9a02      	ldr	r2, [sp, #8]
 80048ba:	6921      	ldr	r1, [r4, #16]
 80048bc:	f000 fae7 	bl	8004e8e <memcpy>
 80048c0:	89a2      	ldrh	r2, [r4, #12]
 80048c2:	4b19      	ldr	r3, [pc, #100]	; (8004928 <__ssputs_r+0xc0>)
 80048c4:	401a      	ands	r2, r3
 80048c6:	2380      	movs	r3, #128	; 0x80
 80048c8:	4313      	orrs	r3, r2
 80048ca:	81a3      	strh	r3, [r4, #12]
 80048cc:	9b02      	ldr	r3, [sp, #8]
 80048ce:	6126      	str	r6, [r4, #16]
 80048d0:	18f6      	adds	r6, r6, r3
 80048d2:	6026      	str	r6, [r4, #0]
 80048d4:	6165      	str	r5, [r4, #20]
 80048d6:	9e01      	ldr	r6, [sp, #4]
 80048d8:	1aed      	subs	r5, r5, r3
 80048da:	60a5      	str	r5, [r4, #8]
 80048dc:	9b01      	ldr	r3, [sp, #4]
 80048de:	429e      	cmp	r6, r3
 80048e0:	d900      	bls.n	80048e4 <__ssputs_r+0x7c>
 80048e2:	9e01      	ldr	r6, [sp, #4]
 80048e4:	0032      	movs	r2, r6
 80048e6:	9903      	ldr	r1, [sp, #12]
 80048e8:	6820      	ldr	r0, [r4, #0]
 80048ea:	f000 fa9f 	bl	8004e2c <memmove>
 80048ee:	2000      	movs	r0, #0
 80048f0:	68a3      	ldr	r3, [r4, #8]
 80048f2:	1b9b      	subs	r3, r3, r6
 80048f4:	60a3      	str	r3, [r4, #8]
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	199b      	adds	r3, r3, r6
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	b005      	add	sp, #20
 80048fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004900:	002a      	movs	r2, r5
 8004902:	0038      	movs	r0, r7
 8004904:	f000 facc 	bl	8004ea0 <_realloc_r>
 8004908:	1e06      	subs	r6, r0, #0
 800490a:	d1df      	bne.n	80048cc <__ssputs_r+0x64>
 800490c:	0038      	movs	r0, r7
 800490e:	6921      	ldr	r1, [r4, #16]
 8004910:	f7ff feac 	bl	800466c <_free_r>
 8004914:	230c      	movs	r3, #12
 8004916:	2001      	movs	r0, #1
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	89a2      	ldrh	r2, [r4, #12]
 800491c:	3334      	adds	r3, #52	; 0x34
 800491e:	4313      	orrs	r3, r2
 8004920:	81a3      	strh	r3, [r4, #12]
 8004922:	4240      	negs	r0, r0
 8004924:	e7ea      	b.n	80048fc <__ssputs_r+0x94>
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	fffffb7f 	.word	0xfffffb7f

0800492c <_svfiprintf_r>:
 800492c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492e:	b0a1      	sub	sp, #132	; 0x84
 8004930:	9003      	str	r0, [sp, #12]
 8004932:	001d      	movs	r5, r3
 8004934:	898b      	ldrh	r3, [r1, #12]
 8004936:	000f      	movs	r7, r1
 8004938:	0016      	movs	r6, r2
 800493a:	061b      	lsls	r3, r3, #24
 800493c:	d511      	bpl.n	8004962 <_svfiprintf_r+0x36>
 800493e:	690b      	ldr	r3, [r1, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10e      	bne.n	8004962 <_svfiprintf_r+0x36>
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	f7ff fefd 	bl	8004744 <_malloc_r>
 800494a:	6038      	str	r0, [r7, #0]
 800494c:	6138      	str	r0, [r7, #16]
 800494e:	2800      	cmp	r0, #0
 8004950:	d105      	bne.n	800495e <_svfiprintf_r+0x32>
 8004952:	230c      	movs	r3, #12
 8004954:	9a03      	ldr	r2, [sp, #12]
 8004956:	3801      	subs	r0, #1
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	b021      	add	sp, #132	; 0x84
 800495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800495e:	2340      	movs	r3, #64	; 0x40
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	2300      	movs	r3, #0
 8004964:	ac08      	add	r4, sp, #32
 8004966:	6163      	str	r3, [r4, #20]
 8004968:	3320      	adds	r3, #32
 800496a:	7663      	strb	r3, [r4, #25]
 800496c:	3310      	adds	r3, #16
 800496e:	76a3      	strb	r3, [r4, #26]
 8004970:	9507      	str	r5, [sp, #28]
 8004972:	0035      	movs	r5, r6
 8004974:	782b      	ldrb	r3, [r5, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <_svfiprintf_r+0x52>
 800497a:	2b25      	cmp	r3, #37	; 0x25
 800497c:	d148      	bne.n	8004a10 <_svfiprintf_r+0xe4>
 800497e:	1bab      	subs	r3, r5, r6
 8004980:	9305      	str	r3, [sp, #20]
 8004982:	42b5      	cmp	r5, r6
 8004984:	d00b      	beq.n	800499e <_svfiprintf_r+0x72>
 8004986:	0032      	movs	r2, r6
 8004988:	0039      	movs	r1, r7
 800498a:	9803      	ldr	r0, [sp, #12]
 800498c:	f7ff ff6c 	bl	8004868 <__ssputs_r>
 8004990:	3001      	adds	r0, #1
 8004992:	d100      	bne.n	8004996 <_svfiprintf_r+0x6a>
 8004994:	e0af      	b.n	8004af6 <_svfiprintf_r+0x1ca>
 8004996:	6963      	ldr	r3, [r4, #20]
 8004998:	9a05      	ldr	r2, [sp, #20]
 800499a:	189b      	adds	r3, r3, r2
 800499c:	6163      	str	r3, [r4, #20]
 800499e:	782b      	ldrb	r3, [r5, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d100      	bne.n	80049a6 <_svfiprintf_r+0x7a>
 80049a4:	e0a7      	b.n	8004af6 <_svfiprintf_r+0x1ca>
 80049a6:	2201      	movs	r2, #1
 80049a8:	2300      	movs	r3, #0
 80049aa:	4252      	negs	r2, r2
 80049ac:	6062      	str	r2, [r4, #4]
 80049ae:	a904      	add	r1, sp, #16
 80049b0:	3254      	adds	r2, #84	; 0x54
 80049b2:	1852      	adds	r2, r2, r1
 80049b4:	1c6e      	adds	r6, r5, #1
 80049b6:	6023      	str	r3, [r4, #0]
 80049b8:	60e3      	str	r3, [r4, #12]
 80049ba:	60a3      	str	r3, [r4, #8]
 80049bc:	7013      	strb	r3, [r2, #0]
 80049be:	65a3      	str	r3, [r4, #88]	; 0x58
 80049c0:	4b55      	ldr	r3, [pc, #340]	; (8004b18 <_svfiprintf_r+0x1ec>)
 80049c2:	2205      	movs	r2, #5
 80049c4:	0018      	movs	r0, r3
 80049c6:	7831      	ldrb	r1, [r6, #0]
 80049c8:	9305      	str	r3, [sp, #20]
 80049ca:	f000 fa55 	bl	8004e78 <memchr>
 80049ce:	1c75      	adds	r5, r6, #1
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d11f      	bne.n	8004a14 <_svfiprintf_r+0xe8>
 80049d4:	6822      	ldr	r2, [r4, #0]
 80049d6:	06d3      	lsls	r3, r2, #27
 80049d8:	d504      	bpl.n	80049e4 <_svfiprintf_r+0xb8>
 80049da:	2353      	movs	r3, #83	; 0x53
 80049dc:	a904      	add	r1, sp, #16
 80049de:	185b      	adds	r3, r3, r1
 80049e0:	2120      	movs	r1, #32
 80049e2:	7019      	strb	r1, [r3, #0]
 80049e4:	0713      	lsls	r3, r2, #28
 80049e6:	d504      	bpl.n	80049f2 <_svfiprintf_r+0xc6>
 80049e8:	2353      	movs	r3, #83	; 0x53
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	185b      	adds	r3, r3, r1
 80049ee:	212b      	movs	r1, #43	; 0x2b
 80049f0:	7019      	strb	r1, [r3, #0]
 80049f2:	7833      	ldrb	r3, [r6, #0]
 80049f4:	2b2a      	cmp	r3, #42	; 0x2a
 80049f6:	d016      	beq.n	8004a26 <_svfiprintf_r+0xfa>
 80049f8:	0035      	movs	r5, r6
 80049fa:	2100      	movs	r1, #0
 80049fc:	200a      	movs	r0, #10
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	782a      	ldrb	r2, [r5, #0]
 8004a02:	1c6e      	adds	r6, r5, #1
 8004a04:	3a30      	subs	r2, #48	; 0x30
 8004a06:	2a09      	cmp	r2, #9
 8004a08:	d94e      	bls.n	8004aa8 <_svfiprintf_r+0x17c>
 8004a0a:	2900      	cmp	r1, #0
 8004a0c:	d111      	bne.n	8004a32 <_svfiprintf_r+0x106>
 8004a0e:	e017      	b.n	8004a40 <_svfiprintf_r+0x114>
 8004a10:	3501      	adds	r5, #1
 8004a12:	e7af      	b.n	8004974 <_svfiprintf_r+0x48>
 8004a14:	9b05      	ldr	r3, [sp, #20]
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	1ac0      	subs	r0, r0, r3
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	4083      	lsls	r3, r0
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	002e      	movs	r6, r5
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	e7cc      	b.n	80049c0 <_svfiprintf_r+0x94>
 8004a26:	9b07      	ldr	r3, [sp, #28]
 8004a28:	1d19      	adds	r1, r3, #4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	9107      	str	r1, [sp, #28]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	db01      	blt.n	8004a36 <_svfiprintf_r+0x10a>
 8004a32:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a34:	e004      	b.n	8004a40 <_svfiprintf_r+0x114>
 8004a36:	425b      	negs	r3, r3
 8004a38:	60e3      	str	r3, [r4, #12]
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	782b      	ldrb	r3, [r5, #0]
 8004a42:	2b2e      	cmp	r3, #46	; 0x2e
 8004a44:	d10a      	bne.n	8004a5c <_svfiprintf_r+0x130>
 8004a46:	786b      	ldrb	r3, [r5, #1]
 8004a48:	2b2a      	cmp	r3, #42	; 0x2a
 8004a4a:	d135      	bne.n	8004ab8 <_svfiprintf_r+0x18c>
 8004a4c:	9b07      	ldr	r3, [sp, #28]
 8004a4e:	3502      	adds	r5, #2
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	9207      	str	r2, [sp, #28]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	db2b      	blt.n	8004ab2 <_svfiprintf_r+0x186>
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	4e2f      	ldr	r6, [pc, #188]	; (8004b1c <_svfiprintf_r+0x1f0>)
 8004a5e:	2203      	movs	r2, #3
 8004a60:	0030      	movs	r0, r6
 8004a62:	7829      	ldrb	r1, [r5, #0]
 8004a64:	f000 fa08 	bl	8004e78 <memchr>
 8004a68:	2800      	cmp	r0, #0
 8004a6a:	d006      	beq.n	8004a7a <_svfiprintf_r+0x14e>
 8004a6c:	2340      	movs	r3, #64	; 0x40
 8004a6e:	1b80      	subs	r0, r0, r6
 8004a70:	4083      	lsls	r3, r0
 8004a72:	6822      	ldr	r2, [r4, #0]
 8004a74:	3501      	adds	r5, #1
 8004a76:	4313      	orrs	r3, r2
 8004a78:	6023      	str	r3, [r4, #0]
 8004a7a:	7829      	ldrb	r1, [r5, #0]
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	4828      	ldr	r0, [pc, #160]	; (8004b20 <_svfiprintf_r+0x1f4>)
 8004a80:	1c6e      	adds	r6, r5, #1
 8004a82:	7621      	strb	r1, [r4, #24]
 8004a84:	f000 f9f8 	bl	8004e78 <memchr>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	d03c      	beq.n	8004b06 <_svfiprintf_r+0x1da>
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <_svfiprintf_r+0x1f8>)
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d125      	bne.n	8004ade <_svfiprintf_r+0x1b2>
 8004a92:	2207      	movs	r2, #7
 8004a94:	9b07      	ldr	r3, [sp, #28]
 8004a96:	3307      	adds	r3, #7
 8004a98:	4393      	bics	r3, r2
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	9307      	str	r3, [sp, #28]
 8004a9e:	6963      	ldr	r3, [r4, #20]
 8004aa0:	9a04      	ldr	r2, [sp, #16]
 8004aa2:	189b      	adds	r3, r3, r2
 8004aa4:	6163      	str	r3, [r4, #20]
 8004aa6:	e764      	b.n	8004972 <_svfiprintf_r+0x46>
 8004aa8:	4343      	muls	r3, r0
 8004aaa:	0035      	movs	r5, r6
 8004aac:	2101      	movs	r1, #1
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	e7a6      	b.n	8004a00 <_svfiprintf_r+0xd4>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	425b      	negs	r3, r3
 8004ab6:	e7d0      	b.n	8004a5a <_svfiprintf_r+0x12e>
 8004ab8:	2300      	movs	r3, #0
 8004aba:	200a      	movs	r0, #10
 8004abc:	001a      	movs	r2, r3
 8004abe:	3501      	adds	r5, #1
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	7829      	ldrb	r1, [r5, #0]
 8004ac4:	1c6e      	adds	r6, r5, #1
 8004ac6:	3930      	subs	r1, #48	; 0x30
 8004ac8:	2909      	cmp	r1, #9
 8004aca:	d903      	bls.n	8004ad4 <_svfiprintf_r+0x1a8>
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0c5      	beq.n	8004a5c <_svfiprintf_r+0x130>
 8004ad0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ad2:	e7c3      	b.n	8004a5c <_svfiprintf_r+0x130>
 8004ad4:	4342      	muls	r2, r0
 8004ad6:	0035      	movs	r5, r6
 8004ad8:	2301      	movs	r3, #1
 8004ada:	1852      	adds	r2, r2, r1
 8004adc:	e7f1      	b.n	8004ac2 <_svfiprintf_r+0x196>
 8004ade:	aa07      	add	r2, sp, #28
 8004ae0:	9200      	str	r2, [sp, #0]
 8004ae2:	0021      	movs	r1, r4
 8004ae4:	003a      	movs	r2, r7
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <_svfiprintf_r+0x1fc>)
 8004ae8:	9803      	ldr	r0, [sp, #12]
 8004aea:	e000      	b.n	8004aee <_svfiprintf_r+0x1c2>
 8004aec:	bf00      	nop
 8004aee:	9004      	str	r0, [sp, #16]
 8004af0:	9b04      	ldr	r3, [sp, #16]
 8004af2:	3301      	adds	r3, #1
 8004af4:	d1d3      	bne.n	8004a9e <_svfiprintf_r+0x172>
 8004af6:	89bb      	ldrh	r3, [r7, #12]
 8004af8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004afa:	065b      	lsls	r3, r3, #25
 8004afc:	d400      	bmi.n	8004b00 <_svfiprintf_r+0x1d4>
 8004afe:	e72c      	b.n	800495a <_svfiprintf_r+0x2e>
 8004b00:	2001      	movs	r0, #1
 8004b02:	4240      	negs	r0, r0
 8004b04:	e729      	b.n	800495a <_svfiprintf_r+0x2e>
 8004b06:	aa07      	add	r2, sp, #28
 8004b08:	9200      	str	r2, [sp, #0]
 8004b0a:	0021      	movs	r1, r4
 8004b0c:	003a      	movs	r2, r7
 8004b0e:	4b06      	ldr	r3, [pc, #24]	; (8004b28 <_svfiprintf_r+0x1fc>)
 8004b10:	9803      	ldr	r0, [sp, #12]
 8004b12:	f000 f87b 	bl	8004c0c <_printf_i>
 8004b16:	e7ea      	b.n	8004aee <_svfiprintf_r+0x1c2>
 8004b18:	08005058 	.word	0x08005058
 8004b1c:	0800505e 	.word	0x0800505e
 8004b20:	08005062 	.word	0x08005062
 8004b24:	00000000 	.word	0x00000000
 8004b28:	08004869 	.word	0x08004869

08004b2c <_printf_common>:
 8004b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b2e:	0016      	movs	r6, r2
 8004b30:	9301      	str	r3, [sp, #4]
 8004b32:	688a      	ldr	r2, [r1, #8]
 8004b34:	690b      	ldr	r3, [r1, #16]
 8004b36:	000c      	movs	r4, r1
 8004b38:	9000      	str	r0, [sp, #0]
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	da00      	bge.n	8004b40 <_printf_common+0x14>
 8004b3e:	0013      	movs	r3, r2
 8004b40:	0022      	movs	r2, r4
 8004b42:	6033      	str	r3, [r6, #0]
 8004b44:	3243      	adds	r2, #67	; 0x43
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	2a00      	cmp	r2, #0
 8004b4a:	d001      	beq.n	8004b50 <_printf_common+0x24>
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	6823      	ldr	r3, [r4, #0]
 8004b52:	069b      	lsls	r3, r3, #26
 8004b54:	d502      	bpl.n	8004b5c <_printf_common+0x30>
 8004b56:	6833      	ldr	r3, [r6, #0]
 8004b58:	3302      	adds	r3, #2
 8004b5a:	6033      	str	r3, [r6, #0]
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	2306      	movs	r3, #6
 8004b60:	0015      	movs	r5, r2
 8004b62:	401d      	ands	r5, r3
 8004b64:	421a      	tst	r2, r3
 8004b66:	d027      	beq.n	8004bb8 <_printf_common+0x8c>
 8004b68:	0023      	movs	r3, r4
 8004b6a:	3343      	adds	r3, #67	; 0x43
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	4193      	sbcs	r3, r2
 8004b72:	6822      	ldr	r2, [r4, #0]
 8004b74:	0692      	lsls	r2, r2, #26
 8004b76:	d430      	bmi.n	8004bda <_printf_common+0xae>
 8004b78:	0022      	movs	r2, r4
 8004b7a:	9901      	ldr	r1, [sp, #4]
 8004b7c:	9800      	ldr	r0, [sp, #0]
 8004b7e:	9d08      	ldr	r5, [sp, #32]
 8004b80:	3243      	adds	r2, #67	; 0x43
 8004b82:	47a8      	blx	r5
 8004b84:	3001      	adds	r0, #1
 8004b86:	d025      	beq.n	8004bd4 <_printf_common+0xa8>
 8004b88:	2206      	movs	r2, #6
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d105      	bne.n	8004ba0 <_printf_common+0x74>
 8004b94:	6833      	ldr	r3, [r6, #0]
 8004b96:	68e5      	ldr	r5, [r4, #12]
 8004b98:	1aed      	subs	r5, r5, r3
 8004b9a:	43eb      	mvns	r3, r5
 8004b9c:	17db      	asrs	r3, r3, #31
 8004b9e:	401d      	ands	r5, r3
 8004ba0:	68a3      	ldr	r3, [r4, #8]
 8004ba2:	6922      	ldr	r2, [r4, #16]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	dd01      	ble.n	8004bac <_printf_common+0x80>
 8004ba8:	1a9b      	subs	r3, r3, r2
 8004baa:	18ed      	adds	r5, r5, r3
 8004bac:	2600      	movs	r6, #0
 8004bae:	42b5      	cmp	r5, r6
 8004bb0:	d120      	bne.n	8004bf4 <_printf_common+0xc8>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e010      	b.n	8004bd8 <_printf_common+0xac>
 8004bb6:	3501      	adds	r5, #1
 8004bb8:	68e3      	ldr	r3, [r4, #12]
 8004bba:	6832      	ldr	r2, [r6, #0]
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	42ab      	cmp	r3, r5
 8004bc0:	ddd2      	ble.n	8004b68 <_printf_common+0x3c>
 8004bc2:	0022      	movs	r2, r4
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	9901      	ldr	r1, [sp, #4]
 8004bc8:	9800      	ldr	r0, [sp, #0]
 8004bca:	9f08      	ldr	r7, [sp, #32]
 8004bcc:	3219      	adds	r2, #25
 8004bce:	47b8      	blx	r7
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d1f0      	bne.n	8004bb6 <_printf_common+0x8a>
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	4240      	negs	r0, r0
 8004bd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bda:	2030      	movs	r0, #48	; 0x30
 8004bdc:	18e1      	adds	r1, r4, r3
 8004bde:	3143      	adds	r1, #67	; 0x43
 8004be0:	7008      	strb	r0, [r1, #0]
 8004be2:	0021      	movs	r1, r4
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	3145      	adds	r1, #69	; 0x45
 8004be8:	7809      	ldrb	r1, [r1, #0]
 8004bea:	18a2      	adds	r2, r4, r2
 8004bec:	3243      	adds	r2, #67	; 0x43
 8004bee:	3302      	adds	r3, #2
 8004bf0:	7011      	strb	r1, [r2, #0]
 8004bf2:	e7c1      	b.n	8004b78 <_printf_common+0x4c>
 8004bf4:	0022      	movs	r2, r4
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	9901      	ldr	r1, [sp, #4]
 8004bfa:	9800      	ldr	r0, [sp, #0]
 8004bfc:	9f08      	ldr	r7, [sp, #32]
 8004bfe:	321a      	adds	r2, #26
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	d0e6      	beq.n	8004bd4 <_printf_common+0xa8>
 8004c06:	3601      	adds	r6, #1
 8004c08:	e7d1      	b.n	8004bae <_printf_common+0x82>
	...

08004c0c <_printf_i>:
 8004c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0e:	b08b      	sub	sp, #44	; 0x2c
 8004c10:	9206      	str	r2, [sp, #24]
 8004c12:	000a      	movs	r2, r1
 8004c14:	3243      	adds	r2, #67	; 0x43
 8004c16:	9307      	str	r3, [sp, #28]
 8004c18:	9005      	str	r0, [sp, #20]
 8004c1a:	9204      	str	r2, [sp, #16]
 8004c1c:	7e0a      	ldrb	r2, [r1, #24]
 8004c1e:	000c      	movs	r4, r1
 8004c20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c22:	2a78      	cmp	r2, #120	; 0x78
 8004c24:	d809      	bhi.n	8004c3a <_printf_i+0x2e>
 8004c26:	2a62      	cmp	r2, #98	; 0x62
 8004c28:	d80b      	bhi.n	8004c42 <_printf_i+0x36>
 8004c2a:	2a00      	cmp	r2, #0
 8004c2c:	d100      	bne.n	8004c30 <_printf_i+0x24>
 8004c2e:	e0be      	b.n	8004dae <_printf_i+0x1a2>
 8004c30:	497c      	ldr	r1, [pc, #496]	; (8004e24 <_printf_i+0x218>)
 8004c32:	9103      	str	r1, [sp, #12]
 8004c34:	2a58      	cmp	r2, #88	; 0x58
 8004c36:	d100      	bne.n	8004c3a <_printf_i+0x2e>
 8004c38:	e093      	b.n	8004d62 <_printf_i+0x156>
 8004c3a:	0026      	movs	r6, r4
 8004c3c:	3642      	adds	r6, #66	; 0x42
 8004c3e:	7032      	strb	r2, [r6, #0]
 8004c40:	e022      	b.n	8004c88 <_printf_i+0x7c>
 8004c42:	0010      	movs	r0, r2
 8004c44:	3863      	subs	r0, #99	; 0x63
 8004c46:	2815      	cmp	r0, #21
 8004c48:	d8f7      	bhi.n	8004c3a <_printf_i+0x2e>
 8004c4a:	f7fb fa65 	bl	8000118 <__gnu_thumb1_case_shi>
 8004c4e:	0016      	.short	0x0016
 8004c50:	fff6001f 	.word	0xfff6001f
 8004c54:	fff6fff6 	.word	0xfff6fff6
 8004c58:	001ffff6 	.word	0x001ffff6
 8004c5c:	fff6fff6 	.word	0xfff6fff6
 8004c60:	fff6fff6 	.word	0xfff6fff6
 8004c64:	003600a3 	.word	0x003600a3
 8004c68:	fff60083 	.word	0xfff60083
 8004c6c:	00b4fff6 	.word	0x00b4fff6
 8004c70:	0036fff6 	.word	0x0036fff6
 8004c74:	fff6fff6 	.word	0xfff6fff6
 8004c78:	0087      	.short	0x0087
 8004c7a:	0026      	movs	r6, r4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	3642      	adds	r6, #66	; 0x42
 8004c80:	1d11      	adds	r1, r2, #4
 8004c82:	6019      	str	r1, [r3, #0]
 8004c84:	6813      	ldr	r3, [r2, #0]
 8004c86:	7033      	strb	r3, [r6, #0]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0a2      	b.n	8004dd2 <_printf_i+0x1c6>
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	6809      	ldr	r1, [r1, #0]
 8004c90:	1d02      	adds	r2, r0, #4
 8004c92:	060d      	lsls	r5, r1, #24
 8004c94:	d50b      	bpl.n	8004cae <_printf_i+0xa2>
 8004c96:	6805      	ldr	r5, [r0, #0]
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	da03      	bge.n	8004ca6 <_printf_i+0x9a>
 8004c9e:	232d      	movs	r3, #45	; 0x2d
 8004ca0:	9a04      	ldr	r2, [sp, #16]
 8004ca2:	426d      	negs	r5, r5
 8004ca4:	7013      	strb	r3, [r2, #0]
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	; (8004e24 <_printf_i+0x218>)
 8004ca8:	270a      	movs	r7, #10
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	e01b      	b.n	8004ce6 <_printf_i+0xda>
 8004cae:	6805      	ldr	r5, [r0, #0]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	0649      	lsls	r1, r1, #25
 8004cb4:	d5f1      	bpl.n	8004c9a <_printf_i+0x8e>
 8004cb6:	b22d      	sxth	r5, r5
 8004cb8:	e7ef      	b.n	8004c9a <_printf_i+0x8e>
 8004cba:	680d      	ldr	r5, [r1, #0]
 8004cbc:	6819      	ldr	r1, [r3, #0]
 8004cbe:	1d08      	adds	r0, r1, #4
 8004cc0:	6018      	str	r0, [r3, #0]
 8004cc2:	062e      	lsls	r6, r5, #24
 8004cc4:	d501      	bpl.n	8004cca <_printf_i+0xbe>
 8004cc6:	680d      	ldr	r5, [r1, #0]
 8004cc8:	e003      	b.n	8004cd2 <_printf_i+0xc6>
 8004cca:	066d      	lsls	r5, r5, #25
 8004ccc:	d5fb      	bpl.n	8004cc6 <_printf_i+0xba>
 8004cce:	680d      	ldr	r5, [r1, #0]
 8004cd0:	b2ad      	uxth	r5, r5
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <_printf_i+0x218>)
 8004cd4:	2708      	movs	r7, #8
 8004cd6:	9303      	str	r3, [sp, #12]
 8004cd8:	2a6f      	cmp	r2, #111	; 0x6f
 8004cda:	d000      	beq.n	8004cde <_printf_i+0xd2>
 8004cdc:	3702      	adds	r7, #2
 8004cde:	0023      	movs	r3, r4
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	3343      	adds	r3, #67	; 0x43
 8004ce4:	701a      	strb	r2, [r3, #0]
 8004ce6:	6863      	ldr	r3, [r4, #4]
 8004ce8:	60a3      	str	r3, [r4, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	db03      	blt.n	8004cf6 <_printf_i+0xea>
 8004cee:	2104      	movs	r1, #4
 8004cf0:	6822      	ldr	r2, [r4, #0]
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	6022      	str	r2, [r4, #0]
 8004cf6:	2d00      	cmp	r5, #0
 8004cf8:	d102      	bne.n	8004d00 <_printf_i+0xf4>
 8004cfa:	9e04      	ldr	r6, [sp, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <_printf_i+0x10e>
 8004d00:	9e04      	ldr	r6, [sp, #16]
 8004d02:	0028      	movs	r0, r5
 8004d04:	0039      	movs	r1, r7
 8004d06:	f7fb fa97 	bl	8000238 <__aeabi_uidivmod>
 8004d0a:	9b03      	ldr	r3, [sp, #12]
 8004d0c:	3e01      	subs	r6, #1
 8004d0e:	5c5b      	ldrb	r3, [r3, r1]
 8004d10:	7033      	strb	r3, [r6, #0]
 8004d12:	002b      	movs	r3, r5
 8004d14:	0005      	movs	r5, r0
 8004d16:	429f      	cmp	r7, r3
 8004d18:	d9f3      	bls.n	8004d02 <_printf_i+0xf6>
 8004d1a:	2f08      	cmp	r7, #8
 8004d1c:	d109      	bne.n	8004d32 <_printf_i+0x126>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07db      	lsls	r3, r3, #31
 8004d22:	d506      	bpl.n	8004d32 <_printf_i+0x126>
 8004d24:	6862      	ldr	r2, [r4, #4]
 8004d26:	6923      	ldr	r3, [r4, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	dc02      	bgt.n	8004d32 <_printf_i+0x126>
 8004d2c:	2330      	movs	r3, #48	; 0x30
 8004d2e:	3e01      	subs	r6, #1
 8004d30:	7033      	strb	r3, [r6, #0]
 8004d32:	9b04      	ldr	r3, [sp, #16]
 8004d34:	1b9b      	subs	r3, r3, r6
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	9b07      	ldr	r3, [sp, #28]
 8004d3a:	0021      	movs	r1, r4
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	9805      	ldr	r0, [sp, #20]
 8004d40:	9b06      	ldr	r3, [sp, #24]
 8004d42:	aa09      	add	r2, sp, #36	; 0x24
 8004d44:	f7ff fef2 	bl	8004b2c <_printf_common>
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d147      	bne.n	8004ddc <_printf_i+0x1d0>
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	4240      	negs	r0, r0
 8004d50:	b00b      	add	sp, #44	; 0x2c
 8004d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d54:	2220      	movs	r2, #32
 8004d56:	6809      	ldr	r1, [r1, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	6022      	str	r2, [r4, #0]
 8004d5c:	2278      	movs	r2, #120	; 0x78
 8004d5e:	4932      	ldr	r1, [pc, #200]	; (8004e28 <_printf_i+0x21c>)
 8004d60:	9103      	str	r1, [sp, #12]
 8004d62:	0021      	movs	r1, r4
 8004d64:	3145      	adds	r1, #69	; 0x45
 8004d66:	700a      	strb	r2, [r1, #0]
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	c920      	ldmia	r1!, {r5}
 8004d6e:	0610      	lsls	r0, r2, #24
 8004d70:	d402      	bmi.n	8004d78 <_printf_i+0x16c>
 8004d72:	0650      	lsls	r0, r2, #25
 8004d74:	d500      	bpl.n	8004d78 <_printf_i+0x16c>
 8004d76:	b2ad      	uxth	r5, r5
 8004d78:	6019      	str	r1, [r3, #0]
 8004d7a:	07d3      	lsls	r3, r2, #31
 8004d7c:	d502      	bpl.n	8004d84 <_printf_i+0x178>
 8004d7e:	2320      	movs	r3, #32
 8004d80:	4313      	orrs	r3, r2
 8004d82:	6023      	str	r3, [r4, #0]
 8004d84:	2710      	movs	r7, #16
 8004d86:	2d00      	cmp	r5, #0
 8004d88:	d1a9      	bne.n	8004cde <_printf_i+0xd2>
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	6823      	ldr	r3, [r4, #0]
 8004d8e:	4393      	bics	r3, r2
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	e7a4      	b.n	8004cde <_printf_i+0xd2>
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	680d      	ldr	r5, [r1, #0]
 8004d98:	1d10      	adds	r0, r2, #4
 8004d9a:	6949      	ldr	r1, [r1, #20]
 8004d9c:	6018      	str	r0, [r3, #0]
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	062e      	lsls	r6, r5, #24
 8004da2:	d501      	bpl.n	8004da8 <_printf_i+0x19c>
 8004da4:	6019      	str	r1, [r3, #0]
 8004da6:	e002      	b.n	8004dae <_printf_i+0x1a2>
 8004da8:	066d      	lsls	r5, r5, #25
 8004daa:	d5fb      	bpl.n	8004da4 <_printf_i+0x198>
 8004dac:	8019      	strh	r1, [r3, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	9e04      	ldr	r6, [sp, #16]
 8004db2:	6123      	str	r3, [r4, #16]
 8004db4:	e7c0      	b.n	8004d38 <_printf_i+0x12c>
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	1d11      	adds	r1, r2, #4
 8004dba:	6019      	str	r1, [r3, #0]
 8004dbc:	6816      	ldr	r6, [r2, #0]
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	0030      	movs	r0, r6
 8004dc2:	6862      	ldr	r2, [r4, #4]
 8004dc4:	f000 f858 	bl	8004e78 <memchr>
 8004dc8:	2800      	cmp	r0, #0
 8004dca:	d001      	beq.n	8004dd0 <_printf_i+0x1c4>
 8004dcc:	1b80      	subs	r0, r0, r6
 8004dce:	6060      	str	r0, [r4, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	6123      	str	r3, [r4, #16]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9a04      	ldr	r2, [sp, #16]
 8004dd8:	7013      	strb	r3, [r2, #0]
 8004dda:	e7ad      	b.n	8004d38 <_printf_i+0x12c>
 8004ddc:	0032      	movs	r2, r6
 8004dde:	6923      	ldr	r3, [r4, #16]
 8004de0:	9906      	ldr	r1, [sp, #24]
 8004de2:	9805      	ldr	r0, [sp, #20]
 8004de4:	9d07      	ldr	r5, [sp, #28]
 8004de6:	47a8      	blx	r5
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0af      	beq.n	8004d4c <_printf_i+0x140>
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	079b      	lsls	r3, r3, #30
 8004df0:	d415      	bmi.n	8004e1e <_printf_i+0x212>
 8004df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df4:	68e0      	ldr	r0, [r4, #12]
 8004df6:	4298      	cmp	r0, r3
 8004df8:	daaa      	bge.n	8004d50 <_printf_i+0x144>
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	e7a8      	b.n	8004d50 <_printf_i+0x144>
 8004dfe:	0022      	movs	r2, r4
 8004e00:	2301      	movs	r3, #1
 8004e02:	9906      	ldr	r1, [sp, #24]
 8004e04:	9805      	ldr	r0, [sp, #20]
 8004e06:	9e07      	ldr	r6, [sp, #28]
 8004e08:	3219      	adds	r2, #25
 8004e0a:	47b0      	blx	r6
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d09d      	beq.n	8004d4c <_printf_i+0x140>
 8004e10:	3501      	adds	r5, #1
 8004e12:	68e3      	ldr	r3, [r4, #12]
 8004e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e16:	1a9b      	subs	r3, r3, r2
 8004e18:	42ab      	cmp	r3, r5
 8004e1a:	dcf0      	bgt.n	8004dfe <_printf_i+0x1f2>
 8004e1c:	e7e9      	b.n	8004df2 <_printf_i+0x1e6>
 8004e1e:	2500      	movs	r5, #0
 8004e20:	e7f7      	b.n	8004e12 <_printf_i+0x206>
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	08005069 	.word	0x08005069
 8004e28:	0800507a 	.word	0x0800507a

08004e2c <memmove>:
 8004e2c:	b510      	push	{r4, lr}
 8004e2e:	4288      	cmp	r0, r1
 8004e30:	d902      	bls.n	8004e38 <memmove+0xc>
 8004e32:	188b      	adds	r3, r1, r2
 8004e34:	4298      	cmp	r0, r3
 8004e36:	d303      	bcc.n	8004e40 <memmove+0x14>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	e007      	b.n	8004e4c <memmove+0x20>
 8004e3c:	5c8b      	ldrb	r3, [r1, r2]
 8004e3e:	5483      	strb	r3, [r0, r2]
 8004e40:	3a01      	subs	r2, #1
 8004e42:	d2fb      	bcs.n	8004e3c <memmove+0x10>
 8004e44:	bd10      	pop	{r4, pc}
 8004e46:	5ccc      	ldrb	r4, [r1, r3]
 8004e48:	54c4      	strb	r4, [r0, r3]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d1fa      	bne.n	8004e46 <memmove+0x1a>
 8004e50:	e7f8      	b.n	8004e44 <memmove+0x18>
	...

08004e54 <_sbrk_r>:
 8004e54:	2300      	movs	r3, #0
 8004e56:	b570      	push	{r4, r5, r6, lr}
 8004e58:	4d06      	ldr	r5, [pc, #24]	; (8004e74 <_sbrk_r+0x20>)
 8004e5a:	0004      	movs	r4, r0
 8004e5c:	0008      	movs	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fb ffec 	bl	8000e3c <_sbrk>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d103      	bne.n	8004e70 <_sbrk_r+0x1c>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d000      	beq.n	8004e70 <_sbrk_r+0x1c>
 8004e6e:	6023      	str	r3, [r4, #0]
 8004e70:	bd70      	pop	{r4, r5, r6, pc}
 8004e72:	46c0      	nop			; (mov r8, r8)
 8004e74:	20000384 	.word	0x20000384

08004e78 <memchr>:
 8004e78:	b2c9      	uxtb	r1, r1
 8004e7a:	1882      	adds	r2, r0, r2
 8004e7c:	4290      	cmp	r0, r2
 8004e7e:	d101      	bne.n	8004e84 <memchr+0xc>
 8004e80:	2000      	movs	r0, #0
 8004e82:	4770      	bx	lr
 8004e84:	7803      	ldrb	r3, [r0, #0]
 8004e86:	428b      	cmp	r3, r1
 8004e88:	d0fb      	beq.n	8004e82 <memchr+0xa>
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	e7f6      	b.n	8004e7c <memchr+0x4>

08004e8e <memcpy>:
 8004e8e:	2300      	movs	r3, #0
 8004e90:	b510      	push	{r4, lr}
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d100      	bne.n	8004e98 <memcpy+0xa>
 8004e96:	bd10      	pop	{r4, pc}
 8004e98:	5ccc      	ldrb	r4, [r1, r3]
 8004e9a:	54c4      	strb	r4, [r0, r3]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	e7f8      	b.n	8004e92 <memcpy+0x4>

08004ea0 <_realloc_r>:
 8004ea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ea2:	0007      	movs	r7, r0
 8004ea4:	000e      	movs	r6, r1
 8004ea6:	0014      	movs	r4, r2
 8004ea8:	2900      	cmp	r1, #0
 8004eaa:	d105      	bne.n	8004eb8 <_realloc_r+0x18>
 8004eac:	0011      	movs	r1, r2
 8004eae:	f7ff fc49 	bl	8004744 <_malloc_r>
 8004eb2:	0005      	movs	r5, r0
 8004eb4:	0028      	movs	r0, r5
 8004eb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d103      	bne.n	8004ec4 <_realloc_r+0x24>
 8004ebc:	f7ff fbd6 	bl	800466c <_free_r>
 8004ec0:	0025      	movs	r5, r4
 8004ec2:	e7f7      	b.n	8004eb4 <_realloc_r+0x14>
 8004ec4:	f000 f81b 	bl	8004efe <_malloc_usable_size_r>
 8004ec8:	9001      	str	r0, [sp, #4]
 8004eca:	4284      	cmp	r4, r0
 8004ecc:	d803      	bhi.n	8004ed6 <_realloc_r+0x36>
 8004ece:	0035      	movs	r5, r6
 8004ed0:	0843      	lsrs	r3, r0, #1
 8004ed2:	42a3      	cmp	r3, r4
 8004ed4:	d3ee      	bcc.n	8004eb4 <_realloc_r+0x14>
 8004ed6:	0021      	movs	r1, r4
 8004ed8:	0038      	movs	r0, r7
 8004eda:	f7ff fc33 	bl	8004744 <_malloc_r>
 8004ede:	1e05      	subs	r5, r0, #0
 8004ee0:	d0e8      	beq.n	8004eb4 <_realloc_r+0x14>
 8004ee2:	9b01      	ldr	r3, [sp, #4]
 8004ee4:	0022      	movs	r2, r4
 8004ee6:	429c      	cmp	r4, r3
 8004ee8:	d900      	bls.n	8004eec <_realloc_r+0x4c>
 8004eea:	001a      	movs	r2, r3
 8004eec:	0031      	movs	r1, r6
 8004eee:	0028      	movs	r0, r5
 8004ef0:	f7ff ffcd 	bl	8004e8e <memcpy>
 8004ef4:	0031      	movs	r1, r6
 8004ef6:	0038      	movs	r0, r7
 8004ef8:	f7ff fbb8 	bl	800466c <_free_r>
 8004efc:	e7da      	b.n	8004eb4 <_realloc_r+0x14>

08004efe <_malloc_usable_size_r>:
 8004efe:	1f0b      	subs	r3, r1, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	1f18      	subs	r0, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	da01      	bge.n	8004f0c <_malloc_usable_size_r+0xe>
 8004f08:	580b      	ldr	r3, [r1, r0]
 8004f0a:	18c0      	adds	r0, r0, r3
 8004f0c:	4770      	bx	lr
	...

08004f10 <_init>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr

08004f1c <_fini>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr
